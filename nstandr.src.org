# - Reference from [[associate-id:org:29i4s7t0y5i0][nstandr R package]] on [2021-06-05 Sat 22:51]
#+PROPERTY: header-args:R  :comments link :session :mkdirp yes :padline yes
* Frontpage
:PROPERTIES:
:export_file_name: README.md
:export_options: toc:nil
:export_options+: author:nil
:export_options+: title:nil
:END:

#+begin_export markdown
# nstandr <img src="img/logo.png" align="right" alt="" width="120"/>
#+end_export

#+begin: md-badges :codecov-token OQVJ7NRXO5
#+begin_export markdown
[![R-CMD-check](https://github.com/stasvlasov/nstandr/workflows/R-CMD-check/badge.svg)](https://github.com/stasvlasov/nstandr/actions)
[![codecov](https://codecov.io/gh/stasvlasov/nstandr/branch/master/graph/badge.svg?token=OQVJ7NRXO5)](https://codecov.io/gh/stasvlasov/nstandr)
![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/stasvlasov/nstandr)
#+end_export
#+end


The R package =nstandr= makes standardized organizational names using procedures described by Thoma et al. (2010), Magerman et al. (2006), Cockburn et al. (2009), Wasi & Flaaen (2015).

This is work in progress. Please, file an issue or a suggestion if you have any.

*** Installation

#+BEGIN_SRC R
  devtools::install_github("stasvlasov/nstandr")
#+END_SRC

*** Usage
The package provides its main function =standardize=. The function expect character vector of organization names as input and returns its standardized version.

For the standardization methods described in Magerman et al. (2006) and Cockburn et al. (2009) you can use =standardize_magerman= and =standardize_cockburn= respectively. These functions are similar to =standardize(x, procedures=nstandr:::magerman_procedures_list))= and =standardize(x, procedures=nstandr:::cockburn_procedures_list))= but with additional options for tweaking original procedures and with more documentation.

Here is an example of =standardize_magerman= usage
#+BEGIN_SRC R
  textConnection("SGS-THOMSON MICROELECTRONICS
  S.G.S. THOMSON MICROELECTRONICS S.R.L.
  S.G.S. THOMSON MICROELECTRONICS, S.R.L.
  S.G.S.-THOMSON MICROELECTRONICS S.R.L.
  SGS - THOMSON MICROELECTRONICS S.A.
  SGS - THOMSON MICROELECTRONICS S.R.L.
  SGS - THOMSON MICROELECTRONICS, INC.
  SGS - THOMSON MICROELECTRONICS, S.R.L.
  SGS THOMSON MICROELECTRONICS S.A.
  SGS THOMSON MICROELECTRONICS S.R.L.
  SGS THOMSON MICROELECTRONICS SA
  SGS THOMSON MICROELECTRONICS SRL
  SGS THOMSON MICROELECTRONICS, INC.
  SGS THOMSON MICROELECTRONICS, S.A.
  SGS- THOMSON MICROELECTRONICS, S.A.
  SGS THOMSON MICROELECTRONICS, S.R.L.
  SGS- THOMSON MICROELECTRONICS<BR>(PTE) LTD.
  SGS THOMSON-MICROELECTRONICS SA
  SGS-THOMSON MICROELECTRONIC S.A.
  SGS-THOMSON MICROELECTRONICS
  SGS-THOMSON MICROELECTRONICS GMBH
  SGS-THOMSON MICROELECTRONICS INC.
  SGS-THOMSON MICROELECTRONICS LIMITED
  SGS-THOMSON MICROELECTRONICS LTD.
  SGS-THOMSON MICROELECTRONICS PTE LTD
  SGS-THOMSON MICROELECTRONICS PTE LTD.
  SGS-THOMSON MICROELECTRONICS PTE. LIMITED
  SGS-THOMSON MICROELECTRONICS PTE. LTD.
  SGS-THOMSON MICROELECTRONICS S. R. L.
  SGS-THOMSON MICROELECTRONICS S.A
  SGS-THOMSON MICROELECTRONICS S.A.
  SGS-THOMSON MICROELECTRONICS S.P.A.
  SGS-THOMSON MICROELECTRONICS S.R. L.
  SGS-THOMSON MICROELECTRONICS S.R.L
  SGS-THOMSON MICROELECTRONICS S.R.L.
  SGS--THOMSON MICROELECTRONICS S.R.L.
  SGS-THOMSON MICROELECTRONICS SA
  SGS-THOMSON MICROELECTRONICS SPA
  SGS-THOMSON MICROELECTRONICS SRL
  SGS-THOMSON MICROELECTRONICS SRL.
  SGS-THOMSON MICROELECTRONICS, GMBH
  SGS-THOMSON MICROELECTRONICS, INC
  SGS-THOMSON MICROELECTRONICS, INC.
  SGS-THOMSON MICROELECTRONICS, LTD.
  SGS-THOMSON MICROELECTRONICS, PTE LTD.
  SGS-THOMSON MICROELECTRONICS, S.A.
  SGS-THOMSON MICROELECTRONICS, S.R.L.
  SGS-THOMSON MICROELECTRONICS, S.RL
  SGS-THOMSON MICROELECTRONICS, SA
  SGS-THOMSON MICROELECTRONICS, SA.
  SGS-THOMSON MICROELECTRONICS, SRL
  SGS-THOMSON MICROELECTRONICS,S.R.L.") |>
      readLines() |>
      standardize_magerman(output_placement = "append_to_x")

  # 
  # Applying standardization procedures:
  # -----------------------------------------------------------------
  # 
  # * Upper casing                                               DONE
  # * Cleaning spaces                                            DONE
  # * Removing HTML codes                                        DONE
  # * Cleaning spaces (2)                                        DONE
  # * Replacing SGML coded characters                            DONE
  # * Replacing proprietary characters                           DONE
  # * Detecting Umlauts                                          DONE
  # * Replacing accented characters                              DONE
  # * Removing special characters                                DONE
  # * Fixing quotation irregularities                            DONE
  # * Removing double quotations                                 DONE
  # * Removing non alphanumeric characters (1)                   DONE
  # * Removing non alphanumeric characters (2)                   DONE
  # * Fixing comma and period irregularities                     DONE
  # * Removing legal form                                        DONE
  # * Removing common words                                      DONE
  # * Fixing spelling variations                                 DONE
  # * Condensing                                                 DONE
  # * Fixing umlaut variations                                   DONE
  # 
  # -----------------------------------------------------------------
  # Standardization is done!
  # 
  #                                               x                     std_x
  #  1:                SGS-THOMSON MICROELECTRONICS SGSTHOMSONMICROELECTRONIC
  #  2:      S.G.S. THOMSON MICROELECTRONICS S.R.L. SGSTHOMSONMICROELECTRONIC
  #  3:     S.G.S. THOMSON MICROELECTRONICS, S.R.L. SGSTHOMSONMICROELECTRONIC
  #  4:      S.G.S.-THOMSON MICROELECTRONICS S.R.L. SGSTHOMSONMICROELECTRONIC
  #  5:         SGS - THOMSON MICROELECTRONICS S.A. SGSTHOMSONMICROELECTRONIC
  #  6:       SGS - THOMSON MICROELECTRONICS S.R.L. SGSTHOMSONMICROELECTRONIC
  #  7:        SGS - THOMSON MICROELECTRONICS, INC. SGSTHOMSONMICROELECTRONIC
  #  8:      SGS - THOMSON MICROELECTRONICS, S.R.L. SGSTHOMSONMICROELECTRONIC
  #  9:           SGS THOMSON MICROELECTRONICS S.A. SGSTHOMSONMICROELECTRONIC
  # 10:         SGS THOMSON MICROELECTRONICS S.R.L. SGSTHOMSONMICROELECTRONIC
  # 11:             SGS THOMSON MICROELECTRONICS SA SGSTHOMSONMICROELECTRONIC
  # 12:            SGS THOMSON MICROELECTRONICS SRL SGSTHOMSONMICROELECTRONIC
  # 13:          SGS THOMSON MICROELECTRONICS, INC. SGSTHOMSONMICROELECTRONIC
  # 14:          SGS THOMSON MICROELECTRONICS, S.A. SGSTHOMSONMICROELECTRONIC
  # 15:         SGS- THOMSON MICROELECTRONICS, S.A. SGSTHOMSONMICROELECTRONIC
  # 16:        SGS THOMSON MICROELECTRONICS, S.R.L. SGSTHOMSONMICROELECTRONIC
  # 17: SGS- THOMSON MICROELECTRONICS<BR>(PTE) LTD. SGSTHOMSONMICROELECTRONIC
  # 18:             SGS THOMSON-MICROELECTRONICS SA SGSTHOMSONMICROELECTRONIC
  # 19:            SGS-THOMSON MICROELECTRONIC S.A. SGSTHOMSONMICROELECTRONIC
  # 20:                SGS-THOMSON MICROELECTRONICS SGSTHOMSONMICROELECTRONIC
  # 21:           SGS-THOMSON MICROELECTRONICS GMBH SGSTHOMSONMICROELECTRONIC
  # 22:           SGS-THOMSON MICROELECTRONICS INC. SGSTHOMSONMICROELECTRONIC
  # 23:        SGS-THOMSON MICROELECTRONICS LIMITED SGSTHOMSONMICROELECTRONIC
  # 24:           SGS-THOMSON MICROELECTRONICS LTD. SGSTHOMSONMICROELECTRONIC
  # 25:        SGS-THOMSON MICROELECTRONICS PTE LTD SGSTHOMSONMICROELECTRONIC
  # 26:       SGS-THOMSON MICROELECTRONICS PTE LTD. SGSTHOMSONMICROELECTRONIC
  # 27:   SGS-THOMSON MICROELECTRONICS PTE. LIMITED SGSTHOMSONMICROELECTRONIC
  # 28:      SGS-THOMSON MICROELECTRONICS PTE. LTD. SGSTHOMSONMICROELECTRONIC
  # 29:       SGS-THOMSON MICROELECTRONICS S. R. L. SGSTHOMSONMICROELECTRONIC
  # 30:            SGS-THOMSON MICROELECTRONICS S.A SGSTHOMSONMICROELECTRONIC
  # 31:           SGS-THOMSON MICROELECTRONICS S.A. SGSTHOMSONMICROELECTRONIC
  # 32:         SGS-THOMSON MICROELECTRONICS S.P.A. SGSTHOMSONMICROELECTRONIC
  # 33:        SGS-THOMSON MICROELECTRONICS S.R. L. SGSTHOMSONMICROELECTRONIC
  # 34:          SGS-THOMSON MICROELECTRONICS S.R.L SGSTHOMSONMICROELECTRONIC
  # 35:         SGS-THOMSON MICROELECTRONICS S.R.L. SGSTHOMSONMICROELECTRONIC
  # 36:        SGS--THOMSON MICROELECTRONICS S.R.L. SGSTHOMSONMICROELECTRONIC
  # 37:             SGS-THOMSON MICROELECTRONICS SA SGSTHOMSONMICROELECTRONIC
  # 38:            SGS-THOMSON MICROELECTRONICS SPA SGSTHOMSONMICROELECTRONIC
  # 39:            SGS-THOMSON MICROELECTRONICS SRL SGSTHOMSONMICROELECTRONIC
  # 40:           SGS-THOMSON MICROELECTRONICS SRL. SGSTHOMSONMICROELECTRONIC
  # 41:          SGS-THOMSON MICROELECTRONICS, GMBH SGSTHOMSONMICROELECTRONIC
  # 42:           SGS-THOMSON MICROELECTRONICS, INC SGSTHOMSONMICROELECTRONIC
  # 43:          SGS-THOMSON MICROELECTRONICS, INC. SGSTHOMSONMICROELECTRONIC
  # 44:          SGS-THOMSON MICROELECTRONICS, LTD. SGSTHOMSONMICROELECTRONIC
  # 45:      SGS-THOMSON MICROELECTRONICS, PTE LTD. SGSTHOMSONMICROELECTRONIC
  # 46:          SGS-THOMSON MICROELECTRONICS, S.A. SGSTHOMSONMICROELECTRONIC
  # 47:        SGS-THOMSON MICROELECTRONICS, S.R.L. SGSTHOMSONMICROELECTRONIC
  # 48:          SGS-THOMSON MICROELECTRONICS, S.RL SGSTHOMSONMICROELECTRONIC
  # 49:            SGS-THOMSON MICROELECTRONICS, SA SGSTHOMSONMICROELECTRONIC
  # 50:           SGS-THOMSON MICROELECTRONICS, SA. SGSTHOMSONMICROELECTRONIC
  # 51:           SGS-THOMSON MICROELECTRONICS, SRL SGSTHOMSONMICROELECTRONIC
  # 52:         SGS-THOMSON MICROELECTRONICS,S.R.L. SGSTHOMSONMICROELECTRONIC
  #                                               x                     std_x
#+END_SRC

** References

Magerman, T., Looy, V., Bart, & Song, X. (2006). /Data Production Methods for Harmonized Patent Statistics: Patentee Name Standardization/ (SSRN Scholarly Paper No. ID 944470). Rochester, NY: Social Science Research Network. Retrieved from http://papers.ssrn.com/abstract=944470

Thoma, G., Torrisi, S., Gambardella, A., Guellec, D., Hall, B. H., & Harhoff, D. (2010). Harmonizing and combining large datasets - an application to firm-level patent and accounting data. /National Bureau of Economic Research Working Paper Series/, (15851). Retrieved from http://www.nber.org/papers/w15851 http://www.nber.org/papers/w15851.pdf

Wasi, N., & Flaaen, A. (2015). Record linkage using Stata: Preprocessing, linking, and reviewing utilities. The Stata Journal, 15(3), 672-697. Retrieved from https://ebp-projects.isr.umich.edu/NCRN/papers/wasi_flaaen_statarecordlinkageutilities.pdf



* Citing

#+begin_src latex
@misc{Vlasov2022,
  author = {Vlasov, Stanislav A.},
  title = {nstandr - an R package that makes standardized organizational names.},
  year = {2020},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/stasvlasov/nstandr}},
  commit = {10293d9d5f0687b5b7dc784d8a75942b7175f4a1}
}
#+end_src

* Development

For this package development I use Emacs' org-mode that allows literate programming. Literate programming in this case provides ways to do the following:
- Use tables of internal data for standardization in human readable format and convert it to .rda when deploying package
- Write function definition and tests next to other but tangle it from .org file to different directories and .r files on deployment

** Naming Convention
- All functions should have a verb
- Variables should not have a verb
- Everything that is available to user should start with either nstandr (data) or standardize (functions)
- Internal functions and variables does not have to have this prefix
- Second part of the name is a source if the function or a data is taken from this source (e.g. standardize.magerman.remove.common.words)
- The rest is the name of the function or a variable as precise and informative as possible
- Data for string substitutions, removals or pattern recognition should be named as "patterns" (e.g., nstandr.magerman.patterns.special.characters)


* Deploy
#+name: deploy
#+begin_src emacs-lisp
  (save-excursion
    (let ((calls '( "reset-working-directory"
                    "tangle-readme"
                    "tangle-buffer"
                    "inject-get-dots"
                    "call-all-calls"
                    "generate-package-docs"
                    ))
           ;; turn off babel prompts
           org-confirm-babel-evaluate)
      (mapcar
       (lambda (name)
         (let (org-confirm-babel-evaluate)
           (save-excursion
             (org-babel-goto-named-src-block name)
             (call-interactively 'org-babel-execute-maybe))))
       calls)))
#+end_src

** README.md
#+name: tangle-readme
#+begin_src emacs-lisp
  (require 'org-goto)
  (save-excursion
    (org-goto--local-search-headings "Frontpage" nil t)
    (org-pandoc-export-to-markdown nil 'subtreep))
#+end_src
** Set up tinytest
#+BEGIN_SRC R
  tinytest::setup_tinytest(".")
#+END_SRC

** Add github workflows and badges

https://github.com/r-lib/actions/blob/v1/examples/README.md
#+BEGIN_SRC R
  usethis::use_github_action("check-release")
  usethis::use_github_action("test-coverage")
  usethis::use_github_action("pkgdown")
  
  usethis::use_github_actions_badge(name = "R-CMD-check")
#+END_SRC

** Set Enviroment for making the package (.Rprofile)
:PROPERTIES:
:ID:       org:yeu37341cai0
:END:
*** CRAN Packages
:PROPERTIES:
:ID:       org:id2dzmx01ei0
:END:

There packages are used for building ~nstandr~
#+name: packages
| names          | link                                                                 |
|----------------+----------------------------------------------------------------------|
| devtools       |                                                                      |
| roxygen2       |                                                                      |
| languageserver |                                                                      |
| xml2           |                                                                      |
| tibble         |                                                                      |
| stringi        |                                                                      |
| stringr        |                                                                      |
| magrittr       |                                                                      |
| lubridate      |                                                                      |
| plyr           |                                                                      |
| data.table     |                                                                      |
| dplyr          |                                                                      |
| tinytest       | https://github.com/markvanderloo/tinytest/blob/master/pkg/README.md  |
| checkmate      | https://mllg.github.io/checkmate/                                    |
| boomer         | [[https://moodymudskipper.github.io/boomer/][Debugging Tools to Inspect the Intermediate Steps of a Call]]          |

Note: If =install.packages= is tangled to =.Rprofile= it might cause a recursive installation because installers can runs R sessions in the same folder.

#+name: install-packages
#+header: :var packages = packages
#+BEGIN_SRC R :tangle no
  ## --------------------------------------------------------------------------------
  ## Install Packages if not installed
  ## --------------------------------------------------------------------------------
  for(package in packages$names) {
      if(!require(package, character.only = TRUE)) {
          install.packages(package, repos = 'http://cloud.r-project.org')
      }
  }
  ## --------------------------------------------------------------------------------
#+END_SRC

#+name: get-packages
#+header: :var packages = packages
#+BEGIN_SRC R :tangle no :results replace raw
  paste0(c("c('" , paste(packages$names, collapse = "'\n, '"), "')"), collapse = "")
#+END_SRC

.Rprofile
#+BEGIN_SRC R :tangle no :noweb tangle
    ## -----------------------------------------------------------------------------
    ## First load default packages getOption("defaultPackages")
    ## Otherwise it will add it at the end which can mask some funcitons
    .First.sys()

  ## set default mirror
  options(repos=structure(c(CRAN="http://cloud.r-project.org")))

    ## -----------------------------------------------------------------------------
    ## Load Packages
    ## -----------------------------------------------------------------------------
    for(package in
        <<get-packages()>>) {
        require(package, character.only = TRUE)
    }
#+END_SRC



*** My Packages
:PROPERTIES:
:ID:       org:qa7ezmx01ei0
:END:

#+BEGIN_SRC R :tangle no
  ## --------------------------------------------------------------------------------
  ## Load My pakcages
  ## --------------------------------------------------------------------------------
  ## detach(package:romRDS, unload = TRUE)
  ## remove.packages("romRDS")
  if (!require("romRDS", character.only = TRUE)) {
    if(!require("devtools")) {
      install.packages("devtools"
                     , repos = 'http://cloud.r-project.org'
                     , dependencies = TRUE)
      require("devtools", character.only = TRUE)
    }
    install_github("stasvlasov/romRDS")
    require("romRDS", character.only = TRUE)
  }
  ## --------------------------------------------------------------------------------
#+END_SRC

** Package documentation
:PROPERTIES:
:ID:       org:g5wa69d1ffi0
:END:

#+BEGIN_SRC R :tangle R/nstandr.r
  #' @details
  #' nstandr package standardizes organizational names
  #'     mainly using procedures described in Thoma et al. (2010) and
  #'     Magerman, Looy, Bart, & Song (2006) but not only.  This is work
  #'     in progress. Please, file an issues or suggestion if you have
  #'     any.  The main function is [standardize()].
  #' @keywords internal
  "_PACKAGE"
#+END_SRC

** Reset working directory
#+name: reset-working-directory
#+BEGIN_SRC R :tangle no
  ## Remove tangled and generated files
  ## --------------------------------------------------------------------------------
  files_to_remove <- c(
      "DESCRIPTION"
    , "NAMESPACE"
  )

  dirs_to_remove <-c(
      "man"
    , "inst"
    , "data"
    , "R"
  )

  ## remove files in dirs recursively
  sapply(dirs_to_remove
       , function(dir) {
           file.remove(list.files(dir , recursive = TRUE, full.names = TRUE))
       })

  ## remove files and empty dirs
  sapply(c(files_to_remove, dirs_to_remove) , file.remove)

#+END_SRC

** Tangle source
#+name: tangle-buffer
#+BEGIN_SRC emacs-lisp :results none
  (org-babel-tangle)
#+END_SRC

Plus tangle dots [[id:org:6lik3kf0kcj0][get_dots]]

** Make package data from org-tables

It is a named src R code block. Call it in org file by refering in =#+CALL:= with arguments =data.name= and =data=.

This file exports specific org-table to =.rds= (R data stucture) file to =data.dir= (default to =./data=) and then combines these data files (.rds) into =R/sysdata.rda= (about =R/sysdata.rda= see http://r-pkgs.had.co.nz/data.html).

To call all calls
#+name: call-all-calls
#+BEGIN_SRC emacs-lisp :results none
  (let (org-confirm-babel-evaluate)
    (org-babel-map-call-lines nil (call-interactively 'org-babel-execute-maybe)))
#+END_SRC

#+name: make-rds-procedures-list
#+header: :colnames no
#+header: :var data = "default.data.table"
#+header: :var data.name = "default.data.name"
#+header: :var data.names = "first.row"
#+header: :var data.dir = "./data"
#+header: :var remove.single.quotes = "TRUE"
#+header: :var add.to.rda = "TRUE"
#+header: :var rda.filename = "sysdata"
#+header: :var rda.dir = "./R"
#+begin_src R :tangle no :noweb yes
  require("magrittr")
  require("stringr")
  require("stringi")
  require("data.table")
  require("romRDS")

  ## just in case if there is not directory
  dir.create(data.dir, recursive = TRUE, showWarnings = FALSE)

  ## make a path for saving .rds
  data.path  <-
      data.name %>% 
      paste0(".rds") %>%
      file.path(data.dir, .)

  ## just in case if there is not directory
  dir.create(rda.dir, recursive = TRUE, showWarnings = FALSE)

  <<standardize_make_procedures_list>>

  ## make a path for saving .rda
  rda.path  <-
      rda.filename %>% 
      paste0(".rda") %>%
      file.path(rda.dir, .)

  if(length(data) == 1) {
      data %<>%
          extract2(1) %>%
          ## small fix for the stings trimming problem
          {if(as.logical(remove.single.quotes))
               str_replace(.,"^'(.*)'$", "\\1")
           else .} %>%
          ## work around | character in the strings
          stri_replace_all_fixed("\\vert", "|")
      ## save data to .rda (filename is the same as var name)
      saveRDS(data, data.path)
  } else {  
      ## fix for column names
      if(data.names == "first.row") {
          ## only works when option :colnames no
          data.names <- 
              data %>%
              extract(1,) %>%
              unlist %>% 
              tolower %>%
              make.names
          data %<>% 
              extract(-1,) %>%
              set_names(data.names)
      }
      ## small fix for the stings trimming problem
      ## only remove quotes when they is on the both sides of the string
      ## it will then convert everything into strings
      data <- {
          if(as.logical(remove.single.quotes)) {
              lapply(data,str_replace, "^'(.*)'$", "\\1")
          } else {
              data
          }
      } |>
          ## work around | character in the strings
          lapply(stri_replace_all_fixed, "\\vert", "|") |>
          as.data.table() |>
          standardize_make_procedures_list()

      ## save data to .rda (filename is the same as var name)
      saveRDS(data, data.path)
  }

  message(data.name, " is saved!")



  ## add all .rds to R/sysdata.rda
  ## (variable names are the same as .rds files)
  if(!is.null(add.to.rda)) {
      dir(data.dir) %>% 
          sapply(romRDS
               , dir = data.dir
               , quietly = TRUE
               , return_obj_name = TRUE
               , do_not_make = TRUE
               , obj_name_has_extention = TRUE) %>%
          save(list = ., file = rda.path)
  }

  message(".rda is updated!")

#+end_src

#+label: Rename and save org tables to .rds files
#+name: make-rds-patterns-table
#+header: :colnames no
#+header: :var data = "default.data.table"
#+header: :var data.name = "default.data.name"
#+header: :var data.names = "first.row"
#+header: :var data.dir = "./data"
#+header: :var remove.single.quotes = "TRUE"
#+header: :var add.to.rda = "TRUE"
#+header: :var rda.filename = "sysdata"
#+header: :var rda.dir = "./R"
#+begin_src R :tangle no
  require("magrittr")
  require("stringr")
  require("stringi")
  require("data.table")
  require("romRDS")

  ## just in case if there is not directory
  dir.create(data.dir, recursive = TRUE, showWarnings = FALSE)

  ## make a path for saving .rds
  data.path  <-
      data.name %>% 
      paste0(".rds") %>%
      file.path(data.dir, .)

  ## just in case if there is not directory
  dir.create(rda.dir, recursive = TRUE, showWarnings = FALSE)

  ## make a path for saving .rda
  rda.path  <-
      rda.filename %>% 
      paste0(".rda") %>%
      file.path(rda.dir, .)

  if(length(data) == 1) {
      data %<>%
          extract2(1) %>%
          ## small fix for the stings trimming problem
          {if(as.logical(remove.single.quotes))
               str_replace(.,"^'(.*)'$", "\\1")
           else .} %>%
          ## work around | character in the strings
          stri_replace_all_fixed("\\vert", "|")
      ## save data to .rda (filename is the same as var name)
      saveRDS(data, data.path)
  } else {  
      ## fix for column names
      if(data.names == "first.row") {
          ## only works when option :colnames no
          data.names <- 
              data %>%
              extract(1,) %>%
              unlist %>% 
              tolower %>%
              make.names
          data %<>% 
              extract(-1,) %>%
              set_names(data.names)
      }
      ## small fix for the stings trimming problem
      ## only remove quotes when they is on the both sides of the string
      ## it will then convert everything into strings
      data %<>% 
          {if(as.logical(remove.single.quotes))
               lapply(.,str_replace, "^'(.*)'$", "\\1")
           else .} %>%
          ## work around | character in the strings
          lapply(stri_replace_all_fixed, "\\vert", "|") %>% 
          as.data.table
      ## save data to .rda (filename is the same as var name)
      saveRDS(data, data.path)
  }

  message(data.name, " is saved!")

  ## add all .rds to R/sysdata.rda
  ## (variable names are the same as .rds files)
  if(!is.null(add.to.rda)) {
      dir(data.dir) %>% 
          sapply(romRDS
               , dir = data.dir
               , quietly = TRUE
               , return_obj_name = TRUE
               , do_not_make = TRUE
               , obj_name_has_extention = TRUE) %>%
          save(list = ., file = rda.path)
  }

  message(".rda is updated!")

#+end_src

#+name: make-rda
#+header: :var data.dir = "./data"
#+header: :var add.to.rda = "TRUE"
#+header: :var rda.filename = "sysdata"
#+header: :var rda.dir = "./R"
#+BEGIN_SRC R
  require("romRDS")
  require("magrittr")
  
  ## just in case if there is not directory
  dir.create(rda.dir, recursive = TRUE, showWarnings = FALSE)
  
  ## make a path for saving .rda
  rda.path  <-
      rda.filename %>% 
      paste0(".rda") %>%
      file.path(rda.dir, .)
  
  
  ## add all .rds to R/sysdata.rda
  ## (variable names are the same as .rds files)
  if(!is.null(add.to.rda)) {
      dir(data.dir) %>% 
          sapply(romRDS
               , dir = data.dir
               , quietly = TRUE
               , return.obj.name = TRUE
               , do.not.make = TRUE
               , obj.name.has.extention = TRUE) %>%
          save(list = ., file = rda.path)
  }
  
  message(".rda is updated!")
  
#+END_SRC

** Generate package description

#+name: suggests
| packages  | link                                                                |
|-----------+---------------------------------------------------------------------|
| tinytest  | https://github.com/markvanderloo/tinytest/blob/master/pkg/README.md |
| fastmatch | [[https://cran.r-project.org/web/packages/fastmatch/index.html][CRAN - Package fastmatch]]                                            |

#+name: dependencies
| packages   | current_version | ensure_version | link |
|------------+-----------------+----------------+------|
| data.table |          1.14.2 |         1.13.0 |      |
| stringi    |           1.7.6 |          1.6.0 |      |
| xml2       |           1.3.2 |          1.0.0 |      |
| checkmate  |           2.0.0 |          2.0.0 |      |
#+TBLFM: $2='(org-sbe get-package-vesion (pkg $$1))

Adjust "ensure_version" verstions manually:

#+name: get-package-vesion
#+header: :var pkg = "base"
#+BEGIN_SRC R :results value replace
  packageVersion(pkg)
#+END_SRC

#+name: generate-package-docs
#+header: :var suggests = suggests
#+header: :var dependencies = dependencies
#+BEGIN_SRC R :tangle no :session
  ## Generate package description
  ## --------------------------------------------------------------------------------
  list(Title  = "Standardization of Organizational Names"
     , Date = Sys.Date()
     , "Authors@R" = 'as.person("Stanislav Vlasov <s.vlasov@uvt.nl> [aut, cre]")'
     , Version = "0.0.0.9000"
     , URL = "https://stasvlasov.github.io/nstandr/"
     , BugReports = "https://github.com/stasvlasov/nstandr/issues"
     , Imports = paste(
           paste0(dependencies$packages, " (>= ", dependencies$ensure_version, ")")
         , collapse = ", ")
     , Depends = "R (>= 3.5.0)"
     , Suggests = paste(suggests$packages, collapse = ", ")
     , Description = "Standardizes organizational names using steps described in Thoma et al. (2010) and Magerman, Looy, Bart, & Song (2006) and more."
     , References = "Magerman, T., Looy, V., Bart, & Song, X. (2006). Data Production Methods for Harmonized Patent Statistics: Patentee Name Harmonizarion (SSRN Scholarly Paper No. ID 944470). Rochester, NY: Social Science Research Network. Retrieved from http://papers.ssrn.com/abstract=944470, Thoma, G., Torrisi, S., Gambardella, A., Guellec, D., Hall, B. H., & Harhoff, D. (2010). Harmonizing and combining large datasets - an application to firm-level patent and accounting data. National Bureau of Economic Research Working Paper Series, (15851). Retrieved from http://www.nber.org/papers/w15851.pdf, Wasi, N., & Flaaen, A. (2015). Record linkage using Stata: Preprocessing, linking, and reviewing utilities. The Stata Journal, 15(3), 672-697. https://ebp-projects.isr.umich.edu/NCRN/papers/wasi_flaaen_statarecordlinkageutilities.pdf") |>
      usethis::use_description(check_name = TRUE
                             , roxygen = TRUE)
  usethis::use_mit_license()

  ## Update name spaces and documentation for functions
  roxygenise()
#+END_SRC

** Install package
#+name: install-package
#+BEGIN_SRC R :tangle no
  ## Unload and uninstall package
  ## --------------------------------------------------------------------------------
  detach(package:nstandr, unload = TRUE)
  remove.packages("nstandr")
  
  ## Install package
  ## --------------------------------------------------------------------------------
  install(".")
#+END_SRC

** Test package

#+BEGIN_SRC R :tangle no
  
  ## Deploy from web
  ## --------------------------------------------------------------------------------
  install_github("stasvlasov/nstandr")
  
  
  ## Load main functions
  source("R/nstandr.r")
  
  ## Load data used in funcitons
  load("R/sysdata.rda")
  
  ## load procedures functions
  source("R/magerman.r")
  source("R/cockburn.r")
  
  
  ## Test
  ## --------------------------------------------------------------------------------
  library("nstandr")
  
  standardize(c("Lala Ltd.", "bla-bla Ltd."))
  
  standardize_magerman(c("Lala Ltd.", "bla-bla Ltd."))
  
#+END_SRC


* Functions
** get_dots
:PROPERTIES:
:ID:       org:6lik3kf0kcj0
:END:
#+name: inject-get-dots
#+BEGIN_SRC emacs-lisp :tangle no
  (save-window-excursion
    (let* (tangling-from-nstandr-R-package
           (dots-get-dots-block-name "get_dots")
           (dots-r-pkg-path "~/org/research/dots/dots.src.org")
           ;; assume running in target pkg dir
           (r-pkg-path (file-name-directory (buffer-file-name)))
           (tangle-to-file (concat r-pkg-path "R/0_get_dots.r"))
           ;; this is used as condition in 'bind-get-dots' call in dots.src.org
           tangling-from-nstandr-R-package
           ;; turn off babel prompts
           org-confirm-babel-evaluate)
      (with-current-buffer (find-file dots-r-pkg-path)
        (org-babel-goto-named-src-block dots-get-dots-block-name)
        ;; With one universal prefix argument, only tangle the block at point.
        (org-babel-tangle '(4) tangle-to-file))))
#+END_SRC


** basic procedures

*** standardize_toupper
:PROPERTIES:
:ID:       org:xys0f8s0lei0
:END:

#+BEGIN_SRC R :tangle R/nstandr.r
  ##' @eval attr(standardize_toupper, "description")
  ##' 
  ##' @param x data
  ##' 
  ##' @inheritDotParams standardize_options
  ##'
  ##' @return updated data (as data.table)
  ##' @export
  standardize_toupper <- function(x, ...) {
      get_target(x) |>
          toupper() |>
          inset_target(x)
  }

  attr(standardize_toupper, "description") <- 
  "Uppercases vector of interest in the object (table)"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_standardize_toupper.r

  expect_equal(data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                                 , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
                                 , "MSLab Co."
                                 , "MSLaeb Comp."
                                 , "MSLab Comp."
                                 , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ")
                        , foo = "lalala" ) |>
               standardize_toupper(col = 2, name = "bar")
             , structure(list(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
                                       "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
                                       ), foo = c("LALALA", "LALALA", "LALALA", "LALALA", "LALALA", 
                                                  "LALALA")), row.names = c(NA, -6L), class = c("data.table", "data.frame"
                                                                                                )))

#+END_SRC

*** standardize_remove_brackets
:PROPERTIES:
:ID:       org:9ew0f8s0lei0
:END:

#+BEGIN_SRC R :tangle R/nstandr.r
  ##' @eval attr(standardize_remove_brackets, "@title")
  ##' @param x object (table)
  ##' @inheritDotParams standardize_options
  ##' @return updated object
  ##' 
  ##' @export
  standardize_remove_brackets  <- function(x, ...) {
      get_target(x) |>
          stringi::stri_replace_all_regex("<[^<>]*>|\\([^()]*\\)|\\{[^{}]*\\}|\\[[^\\[\\]]*\\]", "") |>
          inset_target(x)
  }

  attr(standardize_remove_brackets, "@title") <- "Removes brackets and content in brackets"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_standardize_remove_brackets.r
  ## remove.brackets breaks the encoding (so it is better to apply decoding first)
  expect_equal(standardize_remove_brackets("fa\xE7ile (lalala) lkj (sdfs) AAA [sdf]")
             , "fa�ile  lkj  AAA ")

  expect_equal(standardize_remove_brackets("fa7ile (lalala) lkj (sdfs) AAA [sdf]")
             , "fa7ile  lkj  AAA ")

#+END_SRC

*** standardize_remove_quotes
:PROPERTIES:
:ID:       org:4vz0f8s0lei0
:END:

#+BEGIN_SRC R :tangle R/nstandr.r
  ##' Removes double quotes
  ##' 
  ##' @param x an object
  ##' @inheritDotParams standardize_options
  ##' @return updated object
  ##' @export
  standardize_remove_quotes <- function(x, ...) {
          get_target(x) |>
            stringi::stri_replace_all_regex("\"", "") |>
            inset_target(x)
  }
#+END_SRC
*** standardize_dehtmlize
:PROPERTIES:
:ID:       org:4tffib50bci0
:END:

#+BEGIN_SRC R :tangle R/nstandr.r
  #' Converts HTML characters to UTF-8
  #'
  #' The method is about 1/3 faster than htmlParse but it is still quite slow
  #' @param x object (table)
  #' @param as_single_string If set then collapse characters in the main column of the `x` (i.e., `x.col`) as to a single string. It will increase performance (at least for relatively short tables). Default is FALSE
  #' @param as_single_string_sep delimiter for collapsed strings to uncollapse it later. Default is "#_|".
  #' @param use_read_xml If set the it will parse XML. Default is FALSE which means it parses HTML
  #' @inheritDotParams standardize_options
  #' @return updated object
  #' @references http://stackoverflow.com/questions/5060076
  #'
  #' @export
  standardize_dehtmlize <- function(x
                                , as_single_string = FALSE
                                , as_single_string_sep = "#_|"
                                , use_read_xml = FALSE
                                , ...) {
      x_vector <- get_target(x)
      if(as_single_string) {
          x_vector <- paste0(x_vector, collapse = as_single_string_sep)
          x_vector <- paste0("<x>", x_vector, "</x>")
          x_vector <- 
              (if(use_read_xml) {
                   xml2::read_xml(x_vector)
               } else {
                   xml2::read_html(x_vector)
               }) |> xml2::xml_text()
          strsplit(x_vector, as_single_string_sep, fixed = TRUE)[[1]]
      } else {
          sapply(x_vector, \(str) {
              str <- paste0("<x>", str, "</x>")
              (if(use_read_xml) {
                   xml2::read_xml(str)
               } else {
                   xml2::read_html(str)
               }) |> xml2::xml_text()
          }, USE.NAMES = FALSE)    
      } |> inset_target(x)
  }

#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_standardize_dehtmlize.r

  expect_equal(c("abcd", "&amp; &apos; &gt;", "&amp;", "&euro; &lt;") |>
               standardize_dehtmlize()
  , c("abcd", "& ' >", "&", "€ <"))


#+END_SRC

*** standardize_detect_enc
:PROPERTIES:
:ID:       org:e2bfib50bci0
:END:

#+BEGIN_SRC R :tangle R/nstandr.r
  #' Detects string encoding
  #' @param x object
  #' @param output_codes_col_name Same as in [detect_patterns()]
  #' @param return_only_codes Same as in [detect_patterns()]
  #' @param ... 
  #' @inheritDotParams standardize_options
  #' @return updated object
  #'
  #' @export
  standardize_detect_enc <- function(x
                                 , output_codes_col_name = "{col_name_}encoding"
                                 , return_only_codes = FALSE
                                 , ...) {
      available_enc_list <- iconvlist()
      x_vector <- get_target(x) |>
          stringi::stri_enc_detect() |>
          lapply(function(enc) {
              enc <- enc[["Encoding"]]
              first_ok_enc <- which(enc %in% available_enc_list)[1]
              if(length(first_ok_enc) == 0) ""
              else enc[[first_ok_enc]]
          }) |> unlist()
      if(return_only_codes) {
          x_vector
      } else {
          inset_target(x_vector
                     , x
                     , output_placement = "omit"
                     , output_copy_col_name = output_codes_col_name
                     , append_output_copy = TRUE)
      }
  }
#+END_SRC


#+BEGIN_SRC R :tangle inst/tinytest/test_standardize_detect_enc.r
  
  expect_equal(data.table(data = c("FAÇILE"
                                 , "fa\xE7ile"
                                 , "c\u00b5c\u00b5ber")
                        , coffee = "Yes, please!") |>
               standardize_detect_enc(return_only_codes = TRUE)
             , c("UTF-8", "ISO-8859-9", "UTF-8"))


  ## TODO col naming

  expect_equal(c("FAÇILE"
               , "fa\xE7ile"
               , "c\u00b5c\u00b5ber") |>
               standardize_detect_enc()
             , structure(list(x = c("FAÇILE", "fa\xe7ile", "cµcµber"), x_encoding = c("UTF-8", 
                                                                                      "ISO-8859-9", "UTF-8")), row.names = c(NA, -3L), class = c("data.table", 
                                                                                                                                                 "data.frame")))



  expect_equal(data.table(data = c("FAÇILE"
                                 , "fa\xE7ile"
                                 , "c\u00b5c\u00b5ber")
                        , coffee = "Yes, please!") |>
               standardize_detect_enc(output_codes_col_name = "{col_name}_lala")
             , structure(list(data = c("FAÇILE", "fa\xe7ile", "cµcµber"), 
                              coffee = c("Yes, please!", "Yes, please!", "Yes, please!"
                                         ), data_lala = c("UTF-8", "ISO-8859-9", "UTF-8")), row.names = c(NA, 
                                                                                                          -3L), class = c("data.table", "data.frame")))


#+END_SRC
*** standardize_toascii
:PROPERTIES:
:ID:       org:mzn0tpb0wei0
:END:

#+BEGIN_SRC R :tangle R/nstandr.r
  #' Translates non-ascii symbols to its ascii equivalent
  #' 
  #' @param x String to translate
  #' @param detect_encoding Detect encoding of individual elements (slower). Allows to work with mixed encodings.
  #' @inheritDotParams standardize_options
  #' 
  #' @export
  standardize_toascii <- function(x
                              , detect_encoding = FALSE
                              , ...) {
    str <- get_target(x)
    utf <- nstandr_patterns_ascii$utf |> paste(collapse = "")
    ascii <- nstandr_patterns_ascii$ascii |> paste(collapse = "")
    (if(detect_encoding) {
         mapply(
             \(name, enc) chartr(utf, ascii, iconv(name, from = enc, to = "UTF-8", sub = ""))
           , str
           , standardize_detect_enc(str, return_only_codes = TRUE)
           , SIMPLIFY = FALSE, USE.NAMES = FALSE) |>
             unlist() |>
             iconv(to = "ASCII", sub = "")
     } else {
         chartr(utf, ascii, enc2utf8(str)) |> 
             iconv(to = "ASCII", sub = "")
     }) |> inset_target(x)
  }
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_standardize_toascii.r
  expect_equal( c("FAÇILE"
                , "fa\xE7ile"
                , "c\u00b5c\u00b5ber") |>
                data.table("coffee") |>
                standardize_toascii(detect_encoding = TRUE)
             , structure(list(V1 = c("FACILE", "facile", "cucuber"), V2 = c("coffee", 
                                                                            "coffee", "coffee")), row.names = c(NA, -3L), class = c("data.table", 
                                                                                                                                    "data.frame")))

   expect_equal(c("FAÇILE"
                , "fa\xE7ile"
                , "c\u00b5c\u00b5ber") |>
                data.table("coffee") |>
                standardize_toascii()
              , structure(list(V1 = c("FACILE", "fa<e7>ile", "cucuber"), V2 = c("coffee", 
                                                                                "coffee", "coffee")), row.names = c(NA, -3L), class = c("data.table", 
                                                                                                                                        "data.frame")))


#+END_SRC

**** ASCII equivalents table

A table for converting ~ŠŒŽšœžŸ¥µÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýÿ~ string to ~SOZsozYYuAAAAAAACEEEEIIIIDNOOOOOOUUUUYsaaaaaaaceeeeiiiionoooooouuuuyy~

#+NAME: nstandr_patterns_ascii
| utf | ascii |
|-----+-------|
| Š   | S     |
| Œ   | O     |
| Ž   | Z     |
| š   | s     |
| œ   | o     |
| ž   | z     |
| Ÿ   | Y     |
| ¥   | Y     |
| µ   | u     |
| À   | A     |
| Á   | A     |
| Â   | A     |
| Ã   | A     |
| Ä   | A     |
| Å   | A     |
| Æ   | A     |
| Ç   | C     |
| È   | E     |
| É   | E     |
| Ê   | E     |
| Ë   | E     |
| Ì   | I     |
| Í   | I     |
| Î   | I     |
| Ï   | I     |
| Ð   | D     |
| Ñ   | N     |
| Ò   | O     |
| Ó   | O     |
| Ô   | O     |
| Õ   | O     |
| Ö   | O     |
| Ø   | O     |
| Ù   | U     |
| Ú   | U     |
| Û   | U     |
| Ü   | U     |
| Ý   | Y     |
| ß   | s     |
| à   | a     |
| á   | a     |
| â   | a     |
| ã   | a     |
| ä   | a     |
| å   | a     |
| æ   | a     |
| ç   | c     |
| è   | e     |
| é   | e     |
| ê   | e     |
| ë   | e     |
| ì   | i     |
| í   | i     |
| î   | i     |
| ï   | i     |
| ð   | o     |
| ñ   | n     |
| ò   | o     |
| ó   | o     |
| ô   | o     |
| õ   | o     |
| ö   | o     |
| ø   | o     |
| ù   | u     |
| ú   | u     |
| û   | u     |
| ü   | u     |
| ý   | y     |
| ÿ   | y     |

#+call: make-rds-patterns-table(data = nstandr_patterns_ascii, data.name = "nstandr_patterns_ascii")
*** standardize_squish_spaces
:PROPERTIES:
:ID:       org:dlp0f8s0lei0
:END:

  #+BEGIN_SRC R :tangle R/standardize_squish_spaces.r
    #' Removes redundant whitespases
    #' @param x table or vector
    #'
    #' @param wrap_in_spaces If set then adds leaing and ending spaces. Default is FALSE.
    #'
    #' @inheritDotParams standardize_options
    #'
    #' @return updated table or vector
    #' @export
    standardize_squish_spaces <- function(x, wrap_in_spaces = FALSE, ...) {
        get_target(x) |>
            stringi::stri_replace_all_regex("\\s+", " ") |>
            stringi::stri_trim_both() |> (
                \(y) if(wrap_in_spaces) paste0(" ", y, " ") else y
            )() |>
            inset_target(x)
    }
    #+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_standardize_squish_spaces.r

  expect_equal(standardize_squish_spaces("  String with trailing,  middle, and leading white space\t"
                                     , wrap_in_spaces = TRUE)
             , " String with trailing, middle, and leading white space ")




  expect_equal(standardize_squish_spaces("\n\nString with excess,  trailing and leading white   space\n\n"
                                     , wrap_in_spaces = FALSE)
             , "String with excess, trailing and leading white space")

#+END_SRC
** utils
*** standardize_make_procedures_list
:PROPERTIES:
:ID:       org:i762gum0fqi0
:END:

#+name: standardize_make_procedures_list
#+BEGIN_SRC R :tangle R/0_standardize_make_procedures_list.r
  ##' Makes list of procedures calls from table.
  ##'
  ##' Table should have at least two columns - messages and fuctions
  ##' calls. Each function call should be a string of the following
  ##' format "'function.name', arg1 = val1, arg2 = val2" (same as
  ##' arguments for `do.call` function).
  ##' 
  ##' @param procedures_table Table to use
  ##' @param message_field name of the column with messages that will be
  ##'     displayed when each call is executed
  ##' @param function_call_field name of the column where function
  ##'     (standardization procedures) calls are listed.
  ##' @param no_field name of the column where the number of procedure
  ##'     is specified. Also this field indicates if the row in the
  ##'     table is just a comment in which case it will be removed if
  ##'     `remove_comments` is set (which is set by default)
  ##' @param remove_comments Whether to remove comments.
  ##' @param sort_by_no_field Whether to sort the list by col named
  ##'     `no_field`
  ##' @param comments Values (character string) in the first col that
  ##'     makes entire row as commented out
  ##' @return List of named function calls. Names are messages.
  ##' 
  standardize_make_procedures_list <- function(procedures_table
                                           , message_field = "message"
                                           , function_call_field = "function.call"
                                           , no_field = "no"
                                           , remove_comments = TRUE
                                           , sort_by_no_field = TRUE
                                           , comments = c("#", "-", "")) {
      ## procedures_table <- defactor(procedures_table)
      if(remove_comments) {
          procedures_table <- 
              procedures_table[
                  !(procedures_table[[no_field]] %in% comments)
                , ]
      }
      if(sort_by_no_field) {
          procedures_table <-
              procedures_table[
                  procedures_table[[no_field]] |>
                  as.numeric() |>
                  order()
                , ]
      }
      procedures <- 
          procedures_table[[function_call_field]] |> (
              \(y) paste0("list(", y, ")")
          )() |>
          lapply(\(str) eval(parse(text = str))) |>
          lapply(\(lst) if(length(lst) == 1) unlist(lst) else lst)
      names(procedures) <- procedures_table[[message_field]]
      return(procedures)
  }
#+END_SRC


#+BEGIN_SRC R :tangle inst/tinytest/test_standardize_make_procedures_list.r
  standardize_make_procedures_list <- nstandr:::standardize_make_procedures_list

  expect_equal(data.frame(no = c(3,2,"-", "")
                        , message = c("hello", "world", "man", "dfsdf")
                        , function.call = c("'c', 1, b=3", "'sum', 8,8,9", "'version'", "")) |>
               standardize_make_procedures_list()
             , list(world = list("sum", 8, 8, 9), hello = list("c", 1, b = 3)))



  expect_equal(standardize_make_procedures_list(nstandr:::magerman_procedures_table)
             , list(`Upper casing` = "standardize_toupper", `Cleaning spaces` = "standardize_squish_spaces", 
                    `Removing HTML codes` = "magerman_remove_html_codes", `Cleaning spaces (2)` = "standardize_squish_spaces", 
                    `Replacing SGML coded characters` = "magerman_replace_sgml_characters", 
                    `Replacing proprietary characters` = "magerman_replace_proprietary_characters", 
                    `Detecting Umlauts` = list("magerman_detect_umlaut", output_codes_col_name = "magerman_umlaut"), 
                    `Replacing accented characters` = "magerman_replace_accented_characters", 
                    `Removing special characters` = "magerman_remove_special_characters", 
                    `Fixing quotation irregularities` = "magerman_remove_double_quotation_marks_irregularities", 
                    `Removing double quotations` = "magerman_remove_double_quotation_marks_beginning_end", 
                    `Removing non alphanumeric characters (1)` = "magerman_remove_non_alphanumeric_at_the_beginning", 
                    `Removing non alphanumeric characters (2)` = "magerman_remove_non_alphanumeric_at_the_end", 
                    `Fixing comma and period irregularities` = "magerman_replace_comma_period_irregularities", 
                    `Detecting legal form` = list("magerman_detect_legal_form", 
                                                  output_codes_col_name = "legal_form"), `Removing legal form` = "magerman_remove_legal_form_and_clean", 
                    `Removing common words` = "magerman_remove_common_words", 
                    `Fixing spelling variations` = "magerman_replace_spelling_variation", 
                    Condensing = "magerman_condense", `Fixing umlaut variations` = list(
                                                          "magerman_replace_umlaut", has_umlaut_col = "magerman_umlaut", 
                                                          progress = FALSE)))


#+END_SRC


*** standardize_x_split
:PROPERTIES:
:ID:       org:ije1f8s0lei0
:END:

#+BEGIN_SRC R :tangle R/nstandr.r
  ##' Splits the object (table) in chunks by rows
  ##'
  ##' Convenient to apply some function to the table in chunks, e.g., if you want to add display of progress.
  ##'
  ##' @param x object or table
  ##' @param by number of rows to split by
  ##' @param len length of the table (nrow). If it is NULL then use x_length(x)
  ##' 
  ##' @return List of (sub)tables
  standardize_x_split <- function(x, by, len = NULL) {
      if(is.null(len)) len <- x_length(x)
      split(x, rep(seq(1, len %/% by +1)
                 , each = by
                 , length.out = len))
  }
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_standardize_x_split.r
  standardize_x_split <- nstandr:::standardize_x_split


  expect_equal(data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                                 , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
                                 , "MSLab Co."
                                 , "MSLaeb Comp."
                                 , "MSLab Comp."
                                 , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |>
                              rep(50)
                        , foo = "lalala" ) |>
               standardize_x_split(10) |>
               sapply(class)
             , structure(c("data.table", "data.frame", "data.table", "data.frame", 
                           "data.table", "data.frame", "data.table", "data.frame", "data.table", 
                           "data.frame", "data.table", "data.frame", "data.table", "data.frame", 
                           "data.table", "data.frame", "data.table", "data.frame", "data.table", 
                           "data.frame", "data.table", "data.frame", "data.table", "data.frame", 
                           "data.table", "data.frame", "data.table", "data.frame", "data.table", 
                           "data.frame", "data.table", "data.frame", "data.table", "data.frame", 
                           "data.table", "data.frame", "data.table", "data.frame", "data.table", 
                           "data.frame", "data.table", "data.frame", "data.table", "data.frame", 
                           "data.table", "data.frame", "data.table", "data.frame", "data.table", 
                           "data.frame", "data.table", "data.frame", "data.table", "data.frame", 
                           "data.table", "data.frame", "data.table", "data.frame", "data.table", 
                           "data.frame"), .Dim = c(2L, 30L), .Dimnames = list(NULL, c("1", 
                                                                                      "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", 
                                                                                      "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", 
                                                                                      "25", "26", "27", "28", "29", "30"))))



  expect_equal(c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
               , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
               , "MSLab Co."
               , "MSLaeb Comp."
               , "MSLab Comp."
               , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |>
               rep(50) |>
               standardize_x_split(10)
  , list(`1` = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp."), `2` = c("MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
  ), `3` = c("MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
  ), `4` = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp."), `5` = c("MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
  ), `6` = c("MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
  ), `7` = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp."), `8` = c("MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
  ), `9` = c("MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
  ), `10` = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp."), `11` = c("MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
  ), `12` = c("MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
  ), `13` = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp."), `14` = c("MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
  ), `15` = c("MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
  ), `16` = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp."), `17` = c("MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
  ), `18` = c("MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
  ), `19` = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp."), `20` = c("MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
  ), `21` = c("MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
  ), `22` = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp."), `23` = c("MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
  ), `24` = c("MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
  ), `25` = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp."), `26` = c("MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
  ), `27` = c("MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
  ), `28` = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp."), `29` = c("MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
  ), `30` = c("MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ", 
  "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
  "MSLab Co.", "MSLaeb Comp.", "MSLab Comp.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
  )))
#+END_SRC

*** unlist_if_possible
:PROPERTIES:
:ID:       org:3ya1f8s0lei0
:END:
#+BEGIN_SRC R :tangle R/0_unlist_if_possible.r
  ##' If column in the `x` table is list unlist it if possible
  ##' @param x object
  ##' @param replace_zero_length_with Default is replace NULLs with NA_character_ because vector of just NA is a logical class
  ##' @param remove_empty_values remove NA, "", etc. from list elements.  (see [standardize_omit_empty()])
  ##' @return updated object
  ##' @export
  unlist_if_possible <- function(x
                               , replace_zero_length_with = NA_character_
                               , remove_empty_values = TRUE) {
      if(is.list(x)) {
          if(remove_empty_values) {
              x <- lapply(x, standardize_omit_empty)
          }
          len <- sapply(x, length)
          if(all(len == 1)) {
              unlist(x, recursive = FALSE, use.names = FALSE)
          } else if(all(len %in% 0:1)) {
              x[len == 0] <- replace_zero_length_with
              unlist(x, recursive = FALSE, use.names = FALSE)
          } else {
              return(x)
          }
      } else {
          ## assume that x is atomic
          return(x)
      }
  }
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_unlist_if_possible.r


  expect_equal(c(1,2,3,4) |> unlist_if_possible()
             , c(1, 2, 3, 4))

  expect_equal(list(c("a"), NULL, 3, "5", character(0)) |> unlist_if_possible()
             , c("a", NA, "3", "5", NA))


  expect_equal(list(c("a"), 3, "5") |> unlist_if_possible()
             , c("a", "3", "5"))


  expect_equal(list(c("a", "b", "c"), NULL, 3, "5", character(0)) |> unlist_if_possible()
             , list(c("a", "b", "c"), NULL, 3, "5", character(0)))


  expect_equal(list(c("a", NA, ""), NULL, 3, "5", character(0)) |> unlist_if_possible()
             , c("a", NA, "3", "5", NA))


  expect_equal(list(c("a", NA, ""), NULL, 3, "5", character(0)) |> unlist_if_possible(remove_empty_values = FALSE)
             , list(c("a", NA, ""), NULL, 3, "5", character(0)))


#+END_SRC

** Vector Handeling Functions
:PROPERTIES:
:ID:       org:kakfib50bci0
:END:
*** x_length and x_width
:PROPERTIES:
:ID:       org:rixkspb0wei0
:END:
#+BEGIN_SRC R :tangle R/0_x_length_and_width.r
  ##' Gets lengths of the object
  ##'
  ##' @param x input data (table)
  ##' @return Length (`nrow`) of the object. If it is atomic it returns its length.
  ##' @export
  x_length <- function(x) {
      if (is.atomic(x) || is.null(x)) {
          length(x)
      } else if(is.list(x)) {
          length(x[[1]])
      } else {
          nrow(x)
      }
  }




  ##' Gets width of the object
  ##'
  ##' @param x object (table)
  ##' @return Width (ncol) of the object. If it is atomic it is 1.
  ##' @export
  x_width <- function(x) {
      if (is.atomic(x)) {
          return(1)
      } else {
          return(ncol(x))
      }
  }
#+END_SRC

*** standardize_empty
:PROPERTIES:
:ID:       org:3971f8s0lei0
:END:
#+BEGIN_SRC R :tangle R/0_is_x_empty.r
  ##' Checks if all elements in vercor(s) are either "", NA, NULL or have zero length
  ##' @param x input data to check each vector
  ##' @param return_as_true_if_x_zero_length how to interpret zero lenth input. If TRUE then it returns TRUE. Otherwise NULL.
  ##' @return logical vector of the same length
  standardize_is_data_empty <- function(x
                                    , return_as_true_if_x_zero_length = FALSE) {
      if(length(x) == 0) {
          if(return_as_true_if_x_zero_length) {
              return(TRUE)
          } else {
              return(NULL)
          }
      }
      x_list_checks <-
          lapply(x, function(x) {
              if (length(x) == 0) TRUE else all(x == "" | is.na(x))
          })
      unlist(x_list_checks, recursive = FALSE)
  }


  ##' Removes elements that are either "", NA, NULL or have zero length
  ##' @param x vector
  ##' @return updated vector with empty elements removed
  ##' @export
  standardize_omit_empty <- function(x) {
      if(length(x) == 0) return(x)
      x[!sapply(standardize_is_data_empty(x), isTRUE)]
  }



  ## eval things if x empty otherwise return x
  standardize_eval_if_empty <- function(x, ..., env = parent.frame()) {
    if(standardize_is_data_empty(x))
      eval(..., envir = env)
    else x
  }
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_standardize_eval_if_empty.r

  standardize_is_data_empty <- nstandr:::standardize_is_data_empty
  standardize_omit_empty <- nstandr:::standardize_omit_empty
  standardize_eval_if_empty <- nstandr:::standardize_eval_if_empty

  expect_equal(list("INCORPORATED", NULL, NULL, NULL, NULL) |> standardize_is_data_empty()
             , c(FALSE, TRUE, TRUE, TRUE, TRUE))

  expect_equal(c(NA, "", 3,4, "wsd", NULL) |> standardize_is_data_empty()
             , c(TRUE, TRUE, FALSE, FALSE, FALSE))

  expect_equal(list("INCORPORATED", NULL, NULL, NULL, NULL) |> standardize_omit_empty()
             , list("INCORPORATED"))

  expect_equal((function() {
      a <- 5
      standardize_eval_if_empty("", a)
  })()
  , 5)

  expect_equal((function() {
      a <- 5
      standardize_eval_if_empty("not_empty", a)
  })()
  , "not_empty")

#+END_SRC





*** defactor
:PROPERTIES:
:ID:       org:x3j0f8s0lei0
:END:
#+BEGIN_SRC R :tangle R/0_defactor.r
  ##' Converts factor to character
  ##' @param x a vector
  ##' @param check.numeric check if vector is numeric. Default is TRUE. Takes longer with this check but avoids type conversion (numeric to character).
  ##' @return character vector
  defactor_vector <- function(x, check.numeric = FALSE) {
    if(is.factor(x) & check.numeric) {
      levs <- levels(x)
      ## check if levels are numeric (longer)
      ## https://stackoverflow.com/questions/3418128
      if(suppressWarnings(identical(levs
                                  , as.character(as.numeric(levs)))))
        as.numeric(levs)[x]
      else
        levs[x]
    }
    else if(is.factor(x))
      levels(x)[x]
    else x
  }


  ##' Defactor the object
  ##' 
  ##' Returns object of the same type without factors
  ##'
  ##' @param x an object
  ##' @param conv2dt What to convert to data.table
  ##' @param x_atomic_name Name to use as a col name if x is atomic
  ##' @inheritDotParams defactor_vector
  ##' @return object of the same type without factors
  ##' @import data.table
  ##' @export
  defactor <- function(x
                     , conv2dt = c("only.tables"
                                 , "all.but.atomic"
                                 , "all.but.lists"
                                 , "all"
                                 , "none")
                     , x_atomic_name = NULL
                     , ...) {
    conv2dt <-  match.arg(conv2dt)
    if(is.atomic(x)) {
        if(conv2dt %in% c("only.tables", "all.but.atomic", "none")) {
            defactor_vector(x, ...)
        } else {
            x <- data.table(defactor_vector(x, ...))
            if(!is.null(x_atomic_name)) names(x) <- x_atomic_name
            return(x)
        }
    } else if(class(x)[1] == "list")
        if((conv2dt %in% c("only.tables", "all.but.lists", "none")))
            lapply(x, defactor, conv2dt = "none", ...)
        else
            data.table(lapply(x, defactor, conv2dt = "none", ...))
    else if(conv2dt != "none")
      as.data.table(lapply(x, defactor_vector, ...))
    else if(is.matrix(x))
      as.matrix(lapply(x, defactor_vector, ...))
    else if(is.data.table(x))
      as.data.table(lapply(x, defactor_vector, ...))
    else if(is.data.frame(x))
      as.data.frame(lapply(x, defactor_vector, ...)
                  , stringsAsFactors = FALSE)
    else x
  }
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_defactor.r
  defactor_vector <- nstandr:::defactor_vector



  expect_equal(
  {
      set.seed(124)
      factor(sample(c("a", "b", "b"), 20, replace = TRUE)) |> defactor_vector()
  }
  , c("a", "b", "b", "b", "a", "b", "a", "b", "a", "b", "b", "b", 
  "b", "b", "b", "a", "b", "b", "b", "a")
  )



  expect_equal(
      {
          set.seed(124)
          data.frame(num = factor(sample(runif(5), 20, replace = TRUE))
                        , let = factor(sample(c("a", "b", "b"), 20, replace = TRUE))) |>
              defactor()
          }
  , structure(list(num = c("0.222722708247602", "0.408794660819694", 
  "0.0830154397990555", "0.515284994151443", "0.39688234962523", 
  "0.39688234962523", "0.408794660819694", "0.0830154397990555", 
  "0.408794660819694", "0.408794660819694", "0.39688234962523", 
  "0.222722708247602", "0.408794660819694", "0.515284994151443", 
  "0.515284994151443", "0.39688234962523", "0.39688234962523", 
  "0.39688234962523", "0.0830154397990555", "0.515284994151443"
  ), let = c("b", "b", "b", "a", "b", "b", "b", "a", "b", "a", 
  "a", "b", "b", "a", "b", "b", "b", "b", "a", "a")), row.names = c(NA, 
  -20L), class = c("data.table", "data.frame")))





  expect_equal(list(c(1,2,3), 4,5,6,7) |> 
               defactor(conv2dt = "all.but.atomic")
             , structure(list(V1 = list(c(1, 2, 3), 4, 5, 6, 7)), row.names = c(NA, 
                                                                                -5L), class = c("data.table", "data.frame")))



  expect_equal(list(c(1,2,3), 4,5,6,7) |> 
               defactor(conv2dt = "only.table")
             , list(c(1, 2, 3), 4, 5, 6, 7))



  expect_equal(list(c(1,2,3), 4,5,6,7) |> 
               defactor(conv2dt = "all")
             , structure(list(V1 = list(c(1, 2, 3), 4, 5, 6, 7)), row.names = c(NA, 
                                                                                -5L), class = c("data.table", "data.frame")))



  expect_equal(c(c(1,2,3), 4,5,6,7) |> 
               defactor(conv2dt = "only.table")
             , c(1, 2, 3, 4, 5, 6, 7))



  expect_equal(c(c(1,2,3), 4,5,6,7) |> 
               defactor(conv2dt = "all")
             , structure(list(V1 = c(1, 2, 3, 4, 5, 6, 7)), row.names = c(NA, 
                                                                          -7L), class = c("data.table", "data.frame")))




#+END_SRC

*** standardize_options
:PROPERTIES:
:ID:       org:p323mg11m9j0
:END:

#+BEGIN_SRC R :tangle R/0_standardize_options.r
  ##' Does nothing but stores (as its own default arguments) options that control vector handeling through standardization process. These options are available in most nstandr functions that accept `...` parameter.
  ##' 
  ##' @param col Column of interest (the one we need to standardize) in the `x` object (if it is data.frame like).
  ##' @param rows Logical vector to filter records of interest. Default is NULL which means do not filter records.
  ##' @param omitted_rows_value If `rows` parameter is set then merge `omitted_rows_value` with the results (filtered by `rows`). Either single string or a character vector of length `nrow(x)`. If NULL (the default) then original values of `col` are merged with results.
  ##' @param output_placement Where to inset retults (standardized vector) in the `x` object. Default options is 'replace_col' which overwrides the `col` in `x` with results. Other options:
  ##' - 'omit' :: do not write results back to table (usually used when `append_output_copy` is set for temporary values)
  ##' - 'prepend_to_col' :: prepend to `col`
  ##' - 'append_to_col' :: append to `col`
  ##' - 'prepend_to_x' :: prepend to `x` data.frame like object
  ##' - 'append_to_x' :: append to `x` data.frame like object
  ##' @param x_atomic_name If `x` is vector use this name for original column if it is in results. Default is "x". If `x` is table the name of `col` will be used.
  ##' @param output_col_name Use this name for the column with results (standardized values). Parts in curly brakeds are substitute strings. Options for substitutions are:
  ##' @eval format_col_name(return_docs = TRUE)
  ##' @param append_output_copy Whether to append a copy of result vector to `x` object
  ##' @param output_copy_col_name How the append copy wiil be named
  ##' 
  ##' @return It does nothing. Returns NULL silently.
  standardize_options <- function(col = 1
                              , rows = NULL
                              , omitted_rows_value = NULL
                              , output_placement = "replace_col"
                              , x_atomic_name = "x"
                              , output_col_name = "std{_col_name}"
                              , append_output_copy = FALSE
                              , output_copy_col_name = "std{_col_name}_copy{_procedure_index}{_procedure_name}") {
        ## do nothing
        invisible()
    }
#+END_SRC

*** check_standardize_options
:PROPERTIES:
:ID:       org:5aj0v1y0lbj0
:END:

#+BEGIN_SRC R :tangle R/0_check_standardize_options.r
  report_arg_checks <- function (collection
                               , which_call_to_report = -2L
                               , call_to_report = NULL) {
      checkmate::assertClass(collection, "AssertCollection")
      if (!collection$isEmpty()) {
          msgs <- paste("-", collection$getMessages())
          context <- "nstandr :: %i argument checks failed in '%s' call:"
          if(is.call(try(
              call <- sys.call(which_call_to_report)
            , silent = TRUE))) {
              call_to_report <- deparse1(call)
          }
          err = c("\n", strwrap(sprintf(context, length(msgs), call_to_report))
                , strwrap(msgs, indent = 4, exdent = 6))
          stop(simpleError(paste0(err, collapse = "\n"), call = sys.call(1L)))
      }
      invisible(TRUE)
  }

  check_col <- function(col, x
                      , which_call_to_report = -1L
                      , missing_ok = FALSE
                      , null_ok = FALSE) {
      assertion_fails <- checkmate::makeAssertCollection()
      checkmate::assert_multi_class(col, c("character", "integer", "numeric"), add = assertion_fails)
      if (is.character(col)) {
          checkmate::assert_multi_class(x, c("data.frame", "data.table"), add = assertion_fails)
          checkmate::assert_character(col
                                    , min.chars = 1
                                    , len = 1
                                    , any.missing = missing_ok
                                    , null.ok = null_ok
                                    , add = assertion_fails)
          checkmate::assert_choice(col
                                 , names(x)
                                 , null.ok = null_ok
                                 , add = assertion_fails)
      } else if(is.numeric(col)) {
          checkmate::assert_int(col
                              , lower = 1
                              , upper = x_width(x)
                              , na.ok = missing_ok
                              , null.ok = null_ok
                              , add = assertion_fails)
      }
      report_arg_checks(assertion_fails
                      , which_call_to_report)
  }






  check_x <- function(x, which_call_to_report = -1L) {
      assertion_fails <- checkmate::makeAssertCollection()
      checkmate::assert_multi_class(x, c("character", "data.frame", "data.table"), add = assertion_fails)
      report_arg_checks(assertion_fails
                      , which_call_to_report)
  }


  ##' Assumes that rows (if logical) are same length as x
  ##' @param rows either numeric of logical vector
  ##' @param x The object to standardize
  ##' @param null_ok Whether NULL is valid value
  ##' @param na_ok Whether NA is valid value
  ##' @param which_call_to_report When reporting issues which function call to indicate for reference
  ##' @return nothing
  check_rows <- function(rows, x
                       , which_call_to_report = -1L
                       , null_ok = TRUE
                       , na_ok = FALSE) {
      assertion_fails <- checkmate::makeAssertCollection()
      checkmate::assert_multi_class(rows
                                  , classes = c("logical", "numeric")
                                  , null.ok = null_ok
                                  , add = assertion_fails)
      if(is.logical(rows)) {
          checkmate::assert_logical(rows
                                  , any.missing = na_ok
                                  , len = x_length(x)
                                  , null.ok = null_ok
                                  , add = assertion_fails)
      } else if(is.numeric(rows)) {
          checkmate::assert_integerish(rows
                                     , any.missing = na_ok
                                     , min.len = 1
                                     , max.len = x_length(x)
                                     , unique = TRUE
                                     , lower = 1
                                     , upper = x_length(x)
                                     , null.ok = null_ok
                                     , add = assertion_fails)
      }
      report_arg_checks(assertion_fails
                      , which_call_to_report)
  }


  check_standardize_options <- function(dots
                                    , x
                                    , which_call_to_report = -1L
                                    , check_name_duplicates = FALSE) {
      ## check own arguments
      checkmate::assert_int(which_call_to_report)
      checkmate::assert_flag(check_name_duplicates)
      ## check standardize_options
      assertion_fails <- checkmate::makeAssertCollection()
      with(dots, {
          ## check x
          check_x(x, which_call_to_report)
          ## check 'col'
          if(!is.atomic(x)) {
              check_col(col, x, which_call_to_report)
          }
          ## check 'rows'
          check_rows(rows, x, which_call_to_report)
          ## check 'omitted_rows_value'
          if(length(omitted_rows_value) == 1) {
              checkmate::assert_string(
                             omitted_rows_value
                           , na.ok = TRUE
                           , add = assertion_fails)
          } else {
              checkmate::assert_character(
                             omitted_rows_value
                           , null.ok = TRUE
                           , len = x_length(x)
                           , add = assertion_fails)
          }
          ## check 'placement'
          checkmate::assert_choice(
                         output_placement
                       , choices = c(
                             "replace_col"
                           , "prepend_to_col"
                           , "append_to_col"
                           , "prepend_to_x"
                           , "append_to_x"
                           , "omit")
                       , add = assertion_fails)
          ## check 'output_col_name'
          checkmate::assert_string(
                         output_col_name
                       , add = assertion_fails)
          if(check_name_duplicates && !is.atomic(x)) {
              output_col_name_formated <-
                  infer_moving_target_from_names(names(x), col, output_col_name, output_placement)
              checkmate::assert_names(
                             output_col_name_formated
                           , type = "ids"
                           , what = "colnames"
                           , disjunct.from = names(x)
                           , add = assertion_fails)
          }
          ## check  x_atomic_name'
          checkmate::assert_string(
                         x_atomic_name
                       , add = assertion_fails)
          checkmate::assert_names(
                         x_atomic_name
                       , type = "ids"
                       , what = "colnames"
                       , add = assertion_fails)
          ## check 'output_col_name'
          checkmate::assert_string(
                         output_col_name
                       , add = assertion_fails)
          ## check if col_name + 'output_col_name' is distinct from names(x)
          if(check_name_duplicates && !is.atomic(x) && is.null(name)) {
              checkmate::assert_names(
                             paste0(names(x)[[col]], output_col_name)
                           , type = "ids"
                           , what = "colnames"
                           , disjunct.from = names(x)
                           , add = assertion_fails)
          }
          ## check 'append_output_copy'
          checkmate::assert_flag(
                         append_output_copy
                       , add = assertion_fails)
          ## check 'output_copy_col_name'
          checkmate::assert_string(
                         output_copy_col_name
                       , min.chars = 1
                       , add = assertion_fails)
      })
      report_arg_checks(assertion_fails
                      , which_call_to_report)
  }
  #+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_check_standardize_options.r
  require("data.table")

  check_standardize_options <- nstandr:::check_standardize_options
  get_dots <- nstandr:::get_dots
  standardize_options <- nstandr:::standardize_options


  testing_check_arguments <- function(x, ...) {
      dots <- get_dots(standardize_options
                     , search_calls_with_formals = c("x", "...")
                     , search_depth = 5L
                     , search_up_to_call = c("standardize", "nstandr::standardize"))
      check_standardize_options(dots, x)
      return(TRUE)
  }

  expect_true(testing_check_arguments(data.table(a = c(1,2), b = c("a", "b")), output_col_name = "c"))
  ## bad output_placement name
  expect_error(testing_check_arguments(data.table(a = c(1,2), b = c("a", "b")), output_placement = "omitted"))


  testing_check_arguments <- function(x, ...) {
      dots <- get_dots(standardize_options
                     , search_calls_with_formals = c("x", "...")
                     , search_depth = 5L
                     , search_up_to_call = c("standardize", "nstandr::standardize"))
      check_standardize_options(dots, x
                            , check_name_duplicates = TRUE)
      return(TRUE)
  }


  ## taken name
  expect_error(testing_check_arguments(data.table(a = c(1,2), b = c("a", "b")), output_col_name = "b"))
  ## testing append copy prefix (taken name)
  expect_error(testing_check_arguments(data.table(a = c(1,2), b = c("a", "b"), a_standardized = TRUE)))
  ## test rows
  expect_error(testing_check_arguments(data.table(a = c(1,2), b = c("a", "b")), rows = c(1,1)))
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_check_utils.r
  ## test col checks
  check_col <- nstandr:::check_col

  fun <- function(col, x) {
      check_col(col, x)
      return(x[[col]])
  }


  expect_error(fun(list("5"), c("1" = "1","3" = 5)))
  expect_error(fun("5", c("1" = "1","3" = 5)))
  expect_error(fun(4, c("1" = "1","3" = 5)))
  expect_error(fun(c(1,2), c("1" = "1","3" = 5)))
  expect_equal(fun(1, c("1" = "1","3" = 5)), "1")

  expect_error(fun(3, data.frame(a = 1, b = 2)))
  expect_equal(fun(2, data.frame(a = 1, b = 2)), 2)

  ## test rows check
  check_rows <- nstandr:::check_rows

  fun <- function(rows, x) {
      check_rows(rows, x)
      return(x[rows])
  }

  expect_error(fun(list("5"), c("1" = "1","3" = 5)))
  expect_error(fun("5", c("1" = "1","3" = 5)))
  expect_error(fun(4, c("1" = "1","3" = 5)))
  expect_error(fun(c(2,2), c("1" = "1","3" = 5))) # duplicates
  expect_equal(fun(c(1,2), c("1" = "1","3" = 5)), c("1" = "1","3" = 5))
  expect_equal(fun(2, c("1" = "1","3" = 5)), c("3" = "5"))







  ## test x checks
  check_x <- nstandr:::check_x

  expect_error(check_x(list(1,2,3)))
  expect_error(check_x(1))
  expect_equal(check_x(c("1", 2, 3)), TRUE)


  ## ## test
  ## test.col <- 2
  ## standardize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)))
  ## test.col <- 4
  ## standardize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)))
  ## test.col <- "drink"
  ## standardize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)))
  ## test.col <- "food"
  ## standardize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)))
  ## test.col <- NA
  ## standardize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)))
  ## test.col <- NULL
  ## standardize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)))
  ## test.col <- NULL
  ## standardize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE)
  ## test.col <- c("nu", "coffee")
  ## standardize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE)
  ## test.col <- c(1,2)
  ## standardize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE)
  ## test.col <- c(1,3,0)
  ## standardize.is.ok.col(test.col,  data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE, allow.negative = TRUE, allow.zero = TRUE)
  ## standardize.is.ok.col(test.col,  data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE, allow.negative = TRUE, allow.zero = TRUE, several.ok = FALSE)
  ## test.col <- -c(1,2)
  ## test.col <- c(1,-2)
  ## standardize.is.ok.col(test.col,  data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE, allow.negative = TRUE, allow.zero = TRUE)

  ## test.col <- c(1,3)
  ## standardize.is.ok.col(test.col,  data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE, allow.negative = TRUE, allow.zero = TRUE, ban.values = c(3,4,5))




  ## test
  ## test.arg <- FALSE
  ## standardize.is.ok.type(test.arg)
  ## test.arg <- c(1,2,3,4,NA)
  ## standardize.is.ok.type(test.arg)
  ## test.arg <- c(1,2,3,4,NA)
  ## standardize.is.ok.type(test.arg, type = "numeric")
  ## test.arg <- c(T,T,F,T,NA)
  ## standardize.is.ok.type(test.arg)
  ## test.arg <- c(NA, NA)
  ## standardize.is.ok.type(test.arg, type = "numeric")
  ## test.arg <- NULL
  ## standardize.is.ok.type(test.arg, type = "numeric")
  ## test.arg <- NA
  ## standardize.is.ok.type(test.arg)
  ## test.arg <- list(1,2,3,NULL)
  ## standardize.is.ok.type(test.arg, type = "list")
  ## test.arg <- list(1,2,3,NULL)
  ## standardize.is.ok.type(test.arg, type = c("list", "numeric"))




  ## ## test
  ## standardize.is.ok.dots(names(list(x.col = 4, x.col.update = FALSE))
  ##                      , names(formals("standardize.x"))[-c(1:2)] )

  ## standardize.is.ok.dots(names(list())
  ##                      , names(formals("standardize.x"))[-c(1:2)] )

  ## standardize.is.ok.dots(c(NA, NA, 1)
  ##                      , names(formals("standardize.x"))[-c(1:2)] )

  ## standardize.is.ok.dots(NULL
  ##                      , names(formals("standardize.x"))[-c(1:2)] )
#+END_SRC

*** get_standardize_options
:PROPERTIES:
:ID:       org:y3obsm80daj0
:END:

#+BEGIN_SRC R :tangle R/0_get_standardize_options.r
  ##' Gets `standardize_options` at point with consistent updates up through calling stack.
  ##'
  ##' Limited to max stack of 3 calls and calls that include at least `data` and `...` formals (`nstandr` functions specific) up to `.GlobalEnv` or `standardize` call.
  ##' 
  ##' @return Returns list of updated arguments specified in `standardize_options` function
  ##' 
  ##' 
  ##' @md 
  get_standardize_options <- function() {
      evalq({
          get_dots(standardize_options
                 , search_calls_with_formals = c("x", "...")
                 , search_depth = 500L
                 ## , search_up_to_call = c("standardize", "nstandr::standardize")
                 , skip_checks_for_parent_call = FALSE)
      }, envir = parent.frame())
  }


  get_col_and_rows <- function() {
      evalq({
          get_dots(standardize_options
                 , select_args = c("col", "rows")
                 , search_calls_with_formals = c("x", "...")
                 , search_depth = 500L
                 ## , search_up_to_call = c("standardize", "nstandr::standardize")
                 , skip_checks_for_parent_call = FALSE)
      }, envir = parent.frame())
  }

#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_get_standardize_options.r
  ## hack to make functions available in the environment
  standardize_options <- nstandr:::standardize_options
  ## I do not test get_standardize_options directly (and I will not use it in general) because it referes to the parent environment where internal functions are unknown

  expect_equal(nstandr:::get_dots(standardize_options
                                   , search_calls_with_formals = c("x", "...")
                                   , search_depth = 5L
                                   , search_up_to_call = c("standardize", "nstandr::standardize")
                                   , skip_checks_for_parent_call = FALSE)
             , as.list(formals("standardize_options")))

  standardize_test <- function (x, ...) nstandr:::get_dots(standardize_options
                                                          , search_calls_with_formals = c("x", "...")
                                                          , search_depth = 5L
                                                          , search_up_to_call = c("standardize", "nstandr::standardize")
                                                          , skip_checks_for_parent_call = FALSE)

  ## should update defauls
  expect_equal(standardize_test()$col, 1)
  expect_equal(standardize_test(col = 2)$col, 2)

  standardize_test <- \(x, col = 2, ...) nstandr:::get_dots(standardize_options
                                   , search_calls_with_formals = c("x", "...")
                                   , search_depth = 5L
                                   , search_up_to_call = c("standardize", "nstandr::standardize")
                                   , skip_checks_for_parent_call = FALSE)

  expect_equal(standardize_test()$col, 2)
  expect_equal(standardize_test(col = 3)$col, 3)

  ## Condkitioning on checking arguments (formals) in calls 

  ## should not update defauls (with skip_checks_for_parent_call = TRUE)
  standardize_test_1 <- \() nstandr:::get_dots(standardize_options
                                   , search_calls_with_formals = c("x", "...")
                                   , search_depth = 5L
                                   , search_up_to_call = c("standardize", "nstandr::standardize")
                                   , skip_checks_for_parent_call = FALSE)
  standardize_test_2 <- \(x, col = 123) standardize_test_1()
  expect_equal(standardize_test_2()$col, 1)

  standardize_test_1 <- \() nstandr:::get_dots(standardize_options
                                   , search_calls_with_formals = c("x", "...")
                                   , search_depth = 5L
                                   , search_up_to_call = c("standardize", "nstandr::standardize")
                                   , skip_checks_for_parent_call = FALSE)
  standardize_test_2 <- \(col = 123, ...) standardize_test_1()
  expect_equal(standardize_test_2()$col, 1)


  ## should not update defauls (with skip_checks_for_parent_call = FALSE)
  standardize_test <- \(x, col = 123) nstandr:::get_dots(standardize_options
                                   , search_calls_with_formals = c("x", "...")
                                   , search_depth = 5L
                                   , search_up_to_call = c("standardize", "nstandr::standardize")
                                   , skip_checks_for_parent_call = FALSE)
  expect_equal(standardize_test()$col, 1)

  standardize_test <- \(col = 123, ...) nstandr:::get_dots(standardize_options
                                   , search_calls_with_formals = c("x", "...")
                                   , search_depth = 5L
                                   , search_up_to_call = c("standardize", "nstandr::standardize")
                                   , skip_checks_for_parent_call = FALSE)
  expect_equal(standardize_test()$col, 1)




  ## should update defauls
  standardize_test <- \(x, col = 123, ...) {
      standardize_ <- \(x, ...) nstandr:::get_dots(standardize_options
                                   , search_calls_with_formals = c("x", "...")
                                   , search_depth = 5L
                                   , search_up_to_call = c("standardize", "nstandr::standardize")
                                   , skip_checks_for_parent_call = FALSE)
      standardize_() 
  }
  expect_equal(standardize_test()$col, 123)

  ## should not update defauls
  standardize_test <- \(x, col = 123, ...) {
      standardize <- \(x, ...) nstandr:::get_dots(standardize_options
                                   , search_calls_with_formals = c("x", "...")
                                   , search_depth = 5L
                                   , search_up_to_call = c("standardize", "nstandr::standardize")
                                   , skip_checks_for_parent_call = FALSE)
      standardize() 
  }
  expect_equal(standardize_test()$col, 1)
#+END_SRC

*** get_vector

#+BEGIN_SRC R :tangle R/0_get_vector.r
  ##' Gets vector by column and defactor if needed. Optionaly one can
  ##' provide a fallback_value which will be returned if col is not
  ##' specified.
  ##'
  ##' @param x Input data. Can be vector, data.frame or a data.table
  ##' @param col Column of interest in the input data `x`. The vector we
  ##'     would like to work with. Ignored if input `x` is a atomic
  ##'     vector.
  ##' @param rows Rows of interest
  ##' @param choices Optional set of choices that return value should be
  ##'     subset of. Do no check if it is NULL.
  ##' @param fallback_value If col is NULL then return this value (but
  ##'     see `fallback_value_supersedes` argument). Also check if it is
  ##'     a character vector and same lenght as x. If it is of length 1
  ##'     then replicate it to match x's length.
  ##' @param fallback_value_supersedes A bolean toggle. When set col is
  ##'     ignored when fallback_value is provided. Otherwise (the
  ##'     default) if col is provided then fallback_value is ignored.
  ##' @param fallback_value_any_missing Toggle check if missing values
  ##'     are allowed in fallback_value
  ##' @param fallback_value_ensure_length Toggle if fallback_value
  ##'     should we make it same length as `x`
  ##' @param check_x_col_rows Toggle wheather to use check_x, check_col,
  ##'     check_rows?
  ##' @param which_call_to_report Which call to report if argument
  ##'     checks fail.
  ##' @return A vector. Factors in imput `data` are converted to string.
  ##'
  ##' @md
  get_vector <- function(x, col
                       , rows = NULL
                       , choices = NULL
                       , fallback_value = NULL
                       , fallback_value_supersedes = FALSE
                       , fallback_value_any_missing = TRUE
                       , fallback_value_ensure_length = TRUE
                       , check_x_col_rows = TRUE
                       , which_call_to_report = -1L) {
      assertion_fails <- checkmate::makeAssertCollection()
      ## arg checks
      if (check_x_col_rows) check_x(x, which_call_to_report)
      checkmate::assert_flag(fallback_value_supersedes, add = assertion_fails)
      checkmate::assert_flag(fallback_value_any_missing, add = assertion_fails)
      checkmate::assert_flag(fallback_value_ensure_length, add = assertion_fails)
      ## get vector
      if ((fallback_value_supersedes || is.null(col))
          && !is.null(fallback_value)) {
          ## check choices
          if (!is.null(choices)) {
              checkmate::assert_subset(fallback_value
                                     , choices = choices
                                     , fmatch = TRUE
                                     , add = assertion_fails)
          }
          ## get fallback vector
          if (fallback_value_ensure_length &&
              length(fallback_value) == 1) {
              checkmate::assert_atomic_vector(
                             fallback_value
                           , any.missing = fallback_value_any_missing
                           , len = 1
                           , add = assertion_fails)
              v <- rep(fallback_value, x_length(x))
          } else {
              checkmate::assert_atomic_vector(
                             fallback_value
                           , any.missing = fallback_value_any_missing
                           , len = x_length(x)
                           , add = assertion_fails)
              v <- fallback_value
          }
      } else {
          ## get column
          if (is.atomic(x)) {
              v <- defactor(x)
          } else {
              if (check_x_col_rows) check_col(col, x, which_call_to_report)
              v <- defactor(x[[col]])
          }
          ## check choices
          if (!is.null(choices)) {
              checkmate::assert_subset(v
                                     , choices = choices
                                     , fmatch = TRUE
                                     , .var.name =
                                           paste0("x[[", checkmate::vname(col), "]]")
                                     , add = assertion_fails)
          }
      }
      ## select rows
      if (!is.null(rows)) {
          if (check_x_col_rows) check_rows(rows, x, which_call_to_report = which_call_to_report)
          v <- v[rows]
      }
      report_arg_checks(assertion_fails, which_call_to_report)
      return(v)
  }
  #+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_get_vector.r
  get_vector <- nstandr:::get_vector

  ## missing col
  expect_error(get_vector(c("a", "b", "c")))

  ## select rows
  expect_equal(
      get_vector(c("a", "b", "c"), 1, rows = c(1,3))
    , c("a", "c"))

  ## select col
  expect_equal(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(2, rows = c(1,3))
    , c("a", "c"))

  ## fallback
  expect_equal(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(2, rows = c(1,3), fallback_value = c("x"))
    , c("a", "c"))


  expect_equal(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(2, rows = c(1,3)
               , fallback_value = c("x")
               , fallback_value_supersedes = TRUE)
    , c("x", "x"))

  expect_equal(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(NULL, rows = c(1,3)
               , fallback_value = c("x"))
    , c("x", "x"))

  expect_equal(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(NULL, rows = c(1,3)
               , fallback_value = c("x", "y", "z"))
    , c("x", "z"))

  ## choises
  expect_error(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(NULL, rows = c(1,3)
               , fallback_value = c("x")
               , choices = "a"
               , fallback_value_supersedes = TRUE))

  expect_error(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(2, rows = c(1,3)
               , choices = "x"))

#+END_SRC

*** get_target & inset_target
:PROPERTIES:
:ID:       org:77wbsm80daj0
:END:
#+BEGIN_SRC R :tangle R/0_handel_target_naming_indexing.r
  ## naming col
  make_indexed_col_name <- function(col_name
                                  , x_names = NULL
                                  , index_init_val = 1L
                                  , index_separator = "_") {
      checkmate::assert_integer(index_init_val, len = 1)
      checkmate::assert_string(index_separator)
      if(is.null(x_names)) return(col_name)
      indexed_col_name_regex <- paste0("^", escape_regex(col_name), escape_regex(index_separator), "(\\d+)$")
      indexed_col_name_in_x_names <-
          stringi::stri_detect_regex(x_names, indexed_col_name_regex)
      if(any(indexed_col_name_in_x_names)) {
          index <- 
              stringi::stri_match_first_regex(x_names, indexed_col_name_regex)[,2] |>
              as.numeric() |>
              max(na.rm = TRUE)
          col_name <-
              paste0(col_name, index_separator, index + 1)
      } else if(col_name %in% x_names) {
          col_name <- 
              paste0(col_name, index_separator, index_init_val)
      } 
      return(col_name)
  }

  replace_fixed_if_string <- function(var, template = NULL) {
      var_name <- deparse1(substitute(var))
      var <- as.character(var)
      if(checkmate::test_string(var, min.chars = 1)) {
          if(is.null(template) || template == var) {
              return(var)
          } else {
              checkmate::assert_string(template, fixed = var_name)
              return(stringi::stri_replace_all_fixed(template, var_name, var))
          }
      } else {
          return("")
      }
  }


  format_col_name <- function(col_name_format
                            , col_name = NULL
                            , x_names = NULL
                            , return_docs = FALSE) {
      checkmate::assert_flag(return_docs)
      procedure_index <- get0("nstandr_standardize_procedure_index", envir = parent.frame())
      procedure_name <- get0("nstandr_standardize_procedure_name", envir = parent.frame())
      replacements_list <- list(
          "procedure_index" = list(
              doc = "replace '{procedure_index}' with a number of current standardization procedure is in the list of procedures"
            , val = replace_fixed_if_string(procedure_index))
        , "procedure_name" = list(
              doc = "replace '{procedure_name}' with name of current standardization procedure"
            , val = replace_fixed_if_string(procedure_name))
        , "_procedure_index" = list(
              doc = "replace '{_procedure_index}' with a number of current standardization procedure is in the list of procedures, prefixed with '_'"
            , val = replace_fixed_if_string(procedure_index, "_procedure_index"))
        , "_procedure_name" = list(
              doc = "replace '{procedure_name}' with name of current standardization procedure, prefixed with '_'"
            , val = replace_fixed_if_string(procedure_name, "_procedure_name"))
        , "_col_name" = list(
              doc = "replace '{_col_name}' with the name of 'col' argument (i.e., col with input value), prefixed with '_'"
            , val = replace_fixed_if_string(col_name, "_col_name"))
        , "col_name_" = list(
              doc = "replace '{col_name_}' with the name of 'col' argument (i.e., col with input value), suffixed with '_'"
            , val = replace_fixed_if_string(col_name, "col_name_"))
        , "col_name" = list(
              doc = "replace '{col_name}' with the name of 'col' argument (i.e., col with input value)"
            , val = replace_fixed_if_string(col_name))
        , "_index_suffix" = list(
              doc = "Adds unique suffix (increment index) if the column name already exist. E.g. the following format '{col_name}{_index_suffix}' for names(x) = c('V', 'V_9', 'V_41') and col = 2 (i.e. col_name = 'V_9' in this example) would result in a new column named 'V_42'"
            , val = "")
      )
      if(return_docs) {
          return(mapply(\(x, x_name) paste("*", x_name, "-", x$doc)
                      , replacements_list
                      , paste0("{", names(replacements_list), "}")))
      }
      ## check correctness of substitution names if provided
      replacements_in_col_name_format <- 
          stringi::stri_extract_all_regex(col_name_format
                                        , pattern = "\\{[^{}]*\\}"
                                        , omit_no_match = TRUE) |>
          unlist()
      if (length(replacements_in_col_name_format) > 0) {
          checkmate::assert_subset(replacements_in_col_name_format
                                 , choices = paste0("{", names(replacements_list), "}")
                                 , empty.ok = TRUE
                                 , fmatch = TRUE
                                 , .var.name = "*_col_name")
          col_name_formated <- 
              stringi::stri_replace_all_fixed(col_name_format
                                            , pattern = paste0("{", names(replacements_list), "}")
                                            , replacement = sapply(replacements_list, `[[`, "val")
                                            , vectorise_all = FALSE)
          if (stringi::stri_detect_fixed(col_name_format, "{_index_suffix}")) {
              ## ensure {_index_suffix} is at the end
              checkmate::assert_string(col_name_format, pattern = "\\{_index_suffix\\}$", .var.name = "*_col_name")
              col_name_formated <- make_indexed_col_name(col_name_formated, x_names)
          }
          return(col_name_formated)
      } else {
          return(col_name_format)
      }
  }

  get_col_as_name <- function(col, x_names) {
      if(is.numeric(col)) {
          x_names[col]
      } else {
          col
      }
  }



  ## infering col number
  get_col_as_number <- function(col, x_names) {
      if(is.character(col)) {
          which(x_names %in% col)
      } else {
          col
      }
  }

  infer_post_inset_col_from_pre_inset_col <- function(col, x_names, output_placement) {
      if(is.character(col)) {
          x_names %in% col
      } else {
          switch(
              output_placement
            , replace_col = col
            , append_to_col = col
            , prepend_to_col = col + 1
            , append_to_x = col
            , prepend_to_x = col + 1
            , omit = col)
      }
  }

  infer_if_post_inset_col_possible <- function(col, x_names, output_placement) {
      col <- get_col_as_number(col, x_names)
      switch(
          output_placement
        , replace_col = TRUE
        , append_to_col = ifelse(col == length(x_names), FALSE, TRUE)
        , append_to_x = ifelse(col == length(x_names), FALSE, TRUE)
        , prepend_to_x = ifelse(col == 1, FALSE, TRUE)
        , prepend_to_col = ifelse(col == 1, FALSE, TRUE)
        , omit = TRUE
      )
  }


  infer_moving_target_from_post_inset_col <- function(col, x_names, output_placement, as_name = FALSE) {
      col <- get_col_as_number(col, x_names)
      return_col <- switch(
          output_placement
        , replace_col = col
        , append_to_col = col + 1
        , prepend_to_col = col - 1
        , append_to_x = length(x_names)
        , prepend_to_x = 1
        , omit = NULL)
      if(as_name) {
          x_names[return_col]
      } else {
          return_col
      }
  }


  ## this assumes that nothing else was never added...
  infer_moving_target_from_pre_inset_col <- function(col, x_names, output_placement, as_name = FALSE) {
      col <- get_col_as_number(col, x_names)
      return_col <- switch(
          output_placement
        , replace_col = col
        , append_to_col = col + 1
        , prepend_to_col = col
        , append_to_x = length(x_names)
        , prepend_to_x = 1)
      if(as_name) {
          x_names[return_col]
      } else {
          return_col
      }
  }


  ## assume that other stuff is always append to x or col so inference will keep working
  infer_moving_target_from_names <- function(x_names
                                           , col
                                           , output_col_name
                                           , output_placement
                                           , return_null_for_new_col = FALSE
                                           , return_name_for_new_col = FALSE) {
      if(output_placement == "replace_col") {
          col_num <- get_col_as_number(col, x_names)
          return(col_num)
      }
      col_post_inset <- infer_post_inset_col_from_pre_inset_col(col, x_names, output_placement)
      if(infer_if_post_inset_col_possible(col_post_inset, x_names, output_placement)) {
          target_name_generated <-
              format_col_name(output_col_name, x_names[col_post_inset], x_names)
          if(target_name_generated %in% x_names) {
              ## case of subsequent calls
              col_num <- get_col_as_number(target_name_generated, x_names)
              return(col_num)
          }
      }
      if(return_null_for_new_col) return(NULL)
      if(return_name_for_new_col) {
          col_name <- get_col_as_name(col, x_names)
          col_name_formated <- format_col_name(output_col_name, col_name, x_names)
          return(col_name_formated)
      }
      col_num <- get_col_as_number(col, x_names)
      return(col_num)
  }

#+END_SRC

#+BEGIN_SRC R :tangle R/0_handel_target.r
  ##' Gets a target vector to standardize.
  ##'
  ##' @param x  Input data. Can be vector, data.frame or a data.table
  ##' @param return_null_for_new_col Return NULL if target in not yet created (inset)
  ##' @return A vector. Factors in imput `data` are converted to string.
  ##' @inheritDotParams standardize_options
  get_target <- function(x, return_null_for_new_col = FALSE, ...) {
      if(is.null(x)) return(NULL)
      with(dots <- get_standardize_options(), {
          ## check arguments
          check_standardize_options(dots, x)
          x_names <- if (is.atomic(x)) x_atomic_name else names(x)
          col <- infer_moving_target_from_names(x_names
                                              , col
                                              , output_col_name
                                              , output_placement
                                              , return_null_for_new_col)
          if(is.null(col)) return(NULL)
          get_vector(x, col, rows, check_x_col_rows = FALSE)
      })
  }




  ##' Insets target vector back to input object (`x`)
  ##' 
  ##' @param vector Character vector to inset into the `x` object
  ##' @param x Data to standardize. Character vector or data.frame or
  ##'     data.table
  ##' @param omitted_rows_value_for_new_col Alternative value
  ##'     `omitted_rows_value` to use in case we create new column in
  ##'     x. For example, it is use in insetting codes to avoid the
  ##'     default `omitted_rows_value` use initial `col` in which case
  ##'     codes will be mixed with input values
  ##' @param allow_na_in_vector Whether to allow NA in inset vector
  ##' @param which_call_to_report System call number (e.g., -2L) to
  ##'     include in report if arguments checks fails
  ##' @param return_only_target_col If toggled to TRUE then only return
  ##'     the vector to be inset (output_placement argument is ignored)
  ##' @return Data.table or character vector
  ##' @inheritDotParams standardize_options
  inset_target <- function(vector, x
                         , omitted_rows_value_for_new_col = NULL
                         , allow_na_in_vector = TRUE
                         , which_call_to_report = -5L
                         , return_only_target_col = FALSE
                         , ...) {
      checkmate::assert_flag(allow_na_in_vector)
      checkmate::assert_flag(return_only_target_col)
      vector <- defactor_vector(vector)
      with(dots <- get_standardize_options(), {
          ## check standardize_options
          check_standardize_options(dots, x)
          assertion_fails <- checkmate::makeAssertCollection()
          ## -----
          ## inset omitted_rows_value if needed
          ## -----
          checkmate::assert_multi_class(vector
                                      , classes = c("list", "character", "logical", "numeric")
                                      , add = assertion_fails)
          if(!is.null(rows)
             && ((is.logical(rows) && !all(rows))
                 || (is.numeric(rows) && !setequal(rows, 1:x_length(x))))) {
              ## check vector lenth
              getFromNamespace(paste0("assert_", class(vector)), "checkmate")(
                  vector
                , len = ifelse(is.numeric(rows), length(rows), sum(rows))
                , any.missing = allow_na_in_vector
                , add = assertion_fails
              )
              report_arg_checks(assertion_fails, which_call_to_report)
              ## process `omitted_rows_value`
              x_names <- if (is.atomic(x)) x_atomic_name else names(x)
              omitted_rows_value_col <-
                  infer_moving_target_from_names(
                      x_names
                    , col
                    , output_col_name
                    , output_placement
                    , return_null_for_new_col =
                          !is.null(omitted_rows_value_for_new_col))
              if(is.null(omitted_rows_value_col) &&
                 is.null(omitted_rows_value)) {
                  omitted_rows_value <- omitted_rows_value_for_new_col
              }
              omitted_rows_value <-
                  get_vector(x
                           , col = omitted_rows_value_col
                           , fallback_value = omitted_rows_value
                           , fallback_value_supersedes = TRUE
                           , check_x_col_rows = FALSE)
              ## inject ommited rows
              vector <- `[<-`(omitted_rows_value, rows, vector)
          } else {
              ## just check the vector length
              getFromNamespace(paste0("assert_", class(vector)), "checkmate")(
                  vector
                , len = x_length(x)
                , any.missing = allow_na_in_vector
                , add = assertion_fails
              )
              report_arg_checks(assertion_fails, which_call_to_report)
              if(is.numeric(rows)) {
                  ## case of permutations for same length
                  vector <- vector[rows]
              }
          }
          ## -----
          ## inset full vector
          ## -----
          if(return_only_target_col) {
              x <- vector
          } else if(output_placement != "omit") {
              if(is.atomic(x) && output_placement == "replace_col") {
                  ## just replace x if it is atomic
                  x <- vector
              } else {
                  x <- defactor(x, conv2dt = "all", x_atomic_name)
                  width_pre_inset <- x_width(x)
                  col_post_inset <- infer_post_inset_col_from_pre_inset_col(col, names(x), output_placement)
                  col_or_name_if_new <-
                      infer_moving_target_from_names(names(x)
                                                   , col
                                                   , output_col_name
                                                   , output_placement
                                                   , return_name_for_new_col = TRUE)
                  ## fuckin data.table syntax is so cryptic
                  ## [] at the end ensures that returned DT is printed
                  x[, (col_or_name_if_new) := vector][]
                  ## x[[col_or_name_if_new]] <- vector
                  ## now if we added new col
                  if(x_width(x) == width_pre_inset + 1) {
                      ## if new col was added place last col into target posision
                      target <- infer_moving_target_from_post_inset_col(col_post_inset, names(x), output_placement)
                      cols_nums <-
                          1:width_pre_inset |>
                          append(width_pre_inset + 1, after = target - 1)
                      data.table::setcolorder(x, cols_nums)
                  }
              }
          }
          ## -----
          ## apped copy
          ## -----
          if(append_output_copy & !return_only_target_col) {
              x <- defactor(x, conv2dt = "all", x_atomic_name)
              col_post_inset <- infer_post_inset_col_from_pre_inset_col(col, names(x), output_placement)
              append_output_copy_name <- 
                  format_col_name(col_name_format = output_copy_col_name
                                , col_name = names(x)[col_post_inset]
                                , x_names = names(x))
              checkmate::assert_names(append_output_copy_name, add = assertion_fails)
              report_arg_checks(assertion_fails, which_call_to_report)
              ## [] at the end ensures that returned DT is printed
              x[, (append_output_copy_name) := vector][]
          }
          report_arg_checks(assertion_fails, which_call_to_report)
          return(x)
      })
  }
#+END_SRC

Tests:
#+BEGIN_SRC R :tangle inst/tinytest/test_replace_fixed_if_string.r
  replace_fixed_if_string <- nstandr:::replace_fixed_if_string

  a <- NA
  expect_equal(replace_fixed_if_string(a, "df_a_sd"), "")
  expect_equal(replace_fixed_if_string(a), "")

  a <- "Hi!"
  expect_equal(replace_fixed_if_string(a, "df_a_sd"), "df_Hi!_sd")
  expect_equal(replace_fixed_if_string(a), "Hi!")
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_make_indexed_col_name.r
  make_indexed_col_name <- nstandr:::make_indexed_col_name

  expect_equal(make_indexed_col_name("a"), "a")

  expect_equal(make_indexed_col_name("a", "b"), "a")

  expect_equal(make_indexed_col_name("a", "a"), "a_1")

  expect_equal(make_indexed_col_name("a", "a", index_init_val = 0L), "a_0")

  expect_equal(make_indexed_col_name("a", "a_11"), "a_12")

  expect_equal(make_indexed_col_name("a", c(NA, "a", "a_41","a_11")), "a_42")
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_format_col_name.r
  format_col_name <- nstandr:::format_col_name

  ## format_col_name(return_docs = TRUE)

  expect_equal(format_col_name("lala")
             , "lala")

  expect_equal(format_col_name("lala", "a")
             , "lala")

  expect_equal(format_col_name("lala{_col_name}", "a")
             , "lala_a")

  expect_equal(format_col_name("lala{_col_name}{_index_suffix}", "a")
             , "lala_a")

  expect_equal(format_col_name("lala{_col_name}{_index_suffix}", "a", "lala")
             , "lala_a")

  expect_equal(format_col_name("lala{_col_name}{_index_suffix}", "a", "lala_a")
             , "lala_a_1")

  expect_equal(format_col_name("lala{_col_name}{_index_suffix}", "a", c("lala_a", "lala_a_41"))
             , "lala_a_42")

  expect_equal({
      nstandr_standardize_procedure_index <- 6
      nstandr_standardize_procedure_name <- "nber_replacement"
      "{col_name_}harmonizing{_procedure_index}" |>
          paste0("{_procedure_name}") |>
          format_col_name("col")
  }
  , "col_harmonizing_6_nber_replacement")

 #+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_infer_moving_target_from_names.r
  infer_moving_target_from_names <- nstandr:::infer_moving_target_from_names

  expect_equal(infer_moving_target_from_names(x_names = c("x", "std_x")
                                            , col = 1
                                            , output_col_name = "std{_col_name}"
                                            , output_placement = "append_to_col")
             , 2L)



  expect_null(infer_moving_target_from_names(x_names = c("name", "codes", "lala")
                                           , col = 1
                                           , output_col_name = "codes.new"
                                           , output_placement = "append_to_col"
                                           , return_null_for_new_col = TRUE))








#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_get_target.r
  require("data.table")

  get_target <- nstandr:::get_target

  expect_equal(
      data.table(x.pro.30 = list(c(1,2,3,4), 2,3,4)
               , y = c(7,8,9,0)
               , x.pro.5 = c(0,0,0,0)) |>
      get_target(rows = c(T,T,F,T))
    , list(c(1, 2, 3, 4), 2, 4))

  expect_equal(
      data.frame(c(1,2,3,4)
               , c("7","8","9","a")) |>
      get_target(col = 2
               , rows = c(T,T,F,T))
    , c("7", "8", "a"))


  ## test output_placement
  expect_equal(
      data.frame(x = c(1,2,3,4)
               , std_x = c("7","8","9","a")) |>
      get_target(col = 1
               , rows = c(T,T,F,T)
               , output_placement = "append_to_col")
    , c("7", "8", "a"))

  expect_equal(
      data.frame(x = c(1,2,3,4)
               , aaa = c("7","8","9","a")) |>
      get_target(col = 1
               , rows = c(T,T,F,T)
               , output_col_name = "aaa"
               , output_placement = "append_to_col")
    , c("7", "8", "a"))


  expect_equal(
  data.frame(x_standardized = c(1,2,3,4)
               , x = c("7","8","9","a")) |>
      get_target(col = 1
               , rows = c(T,T,F,T)
               , output_placement = "prepend_to_col")
  , c(1,2,4))


  ## testing atomic
  expect_equal(
   c("7","8","9","a") |>
      get_target(col = 1
               , rows = c(T,T,F,T)
               , output_placement = "prepend_to_col")
  , c("7", "8", "a"))

  expect_equal(
   c("7","8","9","a") |>
      get_target(col = 2
               , rows = c(T,T,F,T)
               , output_placement = "prepend_to_x")
    , c("7", "8", "a"))



  expect_equal(
      data.frame(x = c(1,2,3,4)
               , y = TRUE
               , std_x = c("7","8","9","a")) |>
      get_target(col = 1
               , rows = c(T,T,F,T)
               , output_placement = "append_to_x")
    , c("7", "8", "a"))


  expect_equal(
      data.frame(std_x = c(1,2,3,4)
               , y = TRUE
               , x = c("7","8","9","a")) |>
      get_target(col = 2
               , rows = c(T,T,F,T)
               , output_placement = "prepend_to_x")
    , c(1,2,4))
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_inset_target.r
  require("data.table")

  inset_target <- nstandr:::inset_target


  ## test vectors
  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , c("1",2,3,4,5))
    , c("a", "b", "c", "d", "e"))


  expect_equal(
      inset_target(c("a", "b",  "d", "e")
                 , c("1",2,3,4,5)
                 , rows = c(1,2,4,5))
    , c("a", "b", "3", "d", "e"))



      expect_equal(inset_target(c("a", "b",  "d", "e")
                              , c("1",2,3,4,5)
                              , output_placement = "prepend_to_col"
                              , rows = c(1,2,4,5))
                 , structure(list(std_x = c("a", "b", "3", "d", "e"), x = c("1", 
                                                                             "2", "3", "4", "5")), row.names = c(NA, -5L), class = c("data.table", 
                                                                                                                                     "data.frame")))





  ## test output_placement
  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j")))
    , data.table(c1 = c("a", "b", "c", "d", "e"), x = c("x", "y", "z", "i", "j")))

  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , output_placement = "prepend_to_col")
      , data.table(std_c1 = c("a", "b", "c", "d", "e"), c1 = c(1, 2, 3, 4, 5), x = c("x", "y", "z", "i", "j")))


  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , output_placement = "append_to_col")
    , data.table(c1 = c(1, 2, 3, 4, 5), std_c1 = c("a", 
                                                          "b", "c", "d", "e"), x = c("x", "y", "z", "i", "j")))


  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , output_placement = "append_to_x")
    , data.table(c1 = c(1, 2, 3, 4, 5), x = c("x", "y", "z", "i", 
                                              "j"), std_c1 = c("a", "b", "c", "d", "e")))

  ## test omited values

  expect_equal(
      inset_target(c("a", "b", "c")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(1, 2, 5)
                 , omitted_rows_value = NA)
  , structure(list(c1 = c("a", "b", NA, NA, "c"), x = c("x", "y", 
  "z", "i", "j")), row.names = c(NA, -5L), class = c("data.table", 
  "data.frame"))
  )

  expect_equal(
      inset_target(c("a", "b", "c")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(1, 2, 5)
                 , output_placement = "append_to_x"
                 , output_col_name = "codes.new"
                 , omitted_rows_value = NULL
                 )
  , structure(list(c1 = c(1, 2, 3, 4, 5), x = c("x", "y", "z", "i", 
  "j"), codes.new = c("a", "b", "3", "4", "c")), row.names = c(NA, 
  -5L), class = c("data.table", "data.frame"))
  )

  expect_equal(
      inset_target(c("a", "b", "c")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(1, 2, 5)
                 , output_placement = "append_to_x"
                 , output_col_name = "codes.new"
                 , omitted_rows_value = NULL
                 , omitted_rows_value_for_new_col = NA_character_
                 )
  , structure(list(c1 = c(1, 2, 3, 4, 5), x = c("x", "y", "z", "i", 
  "j"), codes.new = c("a", "b", NA, NA, "c")), row.names = c(NA, 
  -5L), class = c("data.table", "data.frame"))
  )



  ## case of all rows
  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(TRUE, TRUE, TRUE, TRUE, TRUE))
    , data.table(c1 = c("a", "b", "c", "d", "e"), x = c("x", "y", "z", "i", "j")))

  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(1, 2, 3, 4, 5))
    , data.table(c1 = c("a", "b", "c", "d", "e"), x = c("x", "y", "z", "i", "j")))


  expect_error(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(5, 5, 3, 4, 5)))


  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(3, 2, 1, 4, 5))
    , data.table(c1 = c("c", "b", "a", "d", "e"), x = c("x", "y", "z", "i", "j")))




  ## error for incorrect vector length
  expect_error(inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(TRUE, FALSE, TRUE, FALSE, TRUE)))

  ## subsetting rows
  expect_equal(
      inset_target(c("a", "b", "c")
                 , data.table(c1 = c("1",2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(TRUE, FALSE, TRUE, FALSE, TRUE))
    , data.table(c1 = c("a", "2", "b", "4", "c"), x = c("x", "y", "z", "i", "j")))


  expect_equal(
      inset_target(c("a", "b", "c")
                 , data.table(c1 = c("1",2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(1,3,5))
    , data.table(c1 = c("a", "2", "b", "4", "c"), x = c("x", "y", "z", "i", "j")))


  ## test returning only target column
  expect_equal(inset_target(c("a", "b", "c")
                          , data.table(c1 = c("1",2,3,4,5), x = c("x", "y", "z", "i", "j"))
                          , rows = c(1,3,5)
                          , return_only_target_col = TRUE)
             , c("a", "2", "b", "4", "c"))

  ## test atomic names
  expect_equal(
      inset_target(c("a", "b", "c")
                 , c("1",2,3,4,5)
                 , rows = c(1,3,5))
             , c("a", "2", "b", "4", "c"))


  expect_equal(inset_target(c("a", "b", "c")
                              , c("1",2,3,4,5)
                              , rows = c(1,3,5)
                              , output_placement = "prepend_to_col")
             , structure(list(std_x = c("a", "2", "b", "4", "c"), x = c("1", 
                                                                         "2", "3", "4", "5")), row.names = c(NA, -5L), class = c("data.table", 
                                                                                                                                 "data.frame")))

  ## test omited
#+END_SRC

*** inset_formals
:PROPERTIES:
:ID:       org:vdg1zja1ucj0
:END:

#+BEGIN_SRC R :tangle R/0_make_alias.r
  inset_formals <- function(formals_args, new_args) {
      checkmate::assert_subset(names(new_args)
                             , choices = names(formals_args)
                             , empty.ok = FALSE)
      for (i in 1:length(new_args)) {
          formals_args[names(new_args)[i]] <- new_args[i]
      }
      return(formals_args)
  }


  make_alias <- function(fun, ...) {
      .fun <- fun
      ## remove 1st and 2nd elemnts ('call' name and 'fun' arg)
      args <- as.list(sys.call())[-(1:2)]
      checkmate::assert_subset(names(args)
                             , choices = names(formals(.fun))
                             , empty.ok = FALSE)
      formals(.fun)[names(args)] <- args
      return(.fun)
  }

#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_inset_formals.r
  inset_formals <- nstandr:::inset_formals

  expect_equal(inset_formals(formals(mean), alist(x = something_unevaluated))
             , alist(x = something_unevaluated, ... = ))
#+END_SRC


** replace and detect functions
*** standardize_escape_regex
:PROPERTIES:
:ID:       org:uj31f8s0lei0
:END:

#+BEGIN_SRC R :tangle R/0_escape_patterns.r
  ##' Escapes special for regex characters
  ##' @param string character vector
  ##' @return character vector with all special to regex characters escaped
  ##'
  ##' @export
  escape_regex <- function(string) stringi::stri_replace_all_regex(string, "(\\W)", "\\\\$1")


  ##' Escapes special for different types of pattern
  ##' @param string character vector (patterns)
  ##' @param type How the characters in patterns should be 'escaped' for
  ##'     proper matching. The options are:
  ##' @param escape_fixed Whether to escape string for 'fixed' and
  ##'     'exact' types and just trimmed string for "trim_exact". Default is FALSE
  ##' @param return_docs Return character vector of documentation for
  ##'     each type (for using with roxygen2 documentations in many
  ##'     places)
  ##' @param return_choices Return character vector of available escape
  ##'     types
  ##' @return character vector with all special to regex characters
  ##'     escaped
  ##' @eval escape_regex_for_type(return_docs = TRUE)
  ##' @md
  escape_regex_for_type <- function(string
                                  , type
                                  , escape_fixed = FALSE
                                  , return_docs = FALSE
                                  , return_choices = FALSE) {
      types_specs <- list(
          list(type = "fixed"
             , docs = "Match pattern string as it is within the target vector"
             , func = \(string, escape_fixed) {
                 if(escape_fixed) escape_regex(string)
                 else string
             })
        , list(type = "begins"
             , docs = "Match pattern string as it is in the beggining of the target vector"
             , func = \(string, escape_fixed) {
                 paste0("^", escape_regex(string))
             })
        , list(type = "trim_begins"
             , docs = "Match pattern string as it is in the beginning of the target vector ignoring preceding white-spaces"
             , func = \(string, escape_fixed) {
                 paste0("^\\s*", escape_regex(string))
             })
        , list(type = "ends"
             , docs = "Match pattern string as it is in the end of the target vector"
             , func = \(string, escape_fixed) {
                 paste0(escape_regex(string), "$")
             })
        , list(type = "trim_ends"
             , docs = "Match pattern string as it is in the end of the target vector ignoring leading white-spaces"
             , func = \(string, escape_fixed) {
                 paste0(escape_regex(string), "\\s*$")
             })
        , list(type = "exact"
             , docs = "Match pattern string exactly (i.e., match equal strings)"
             , func = \(string, escape_fixed) {
                 if(escape_fixed) paste0("^", escape_regex(string), "$")
                 else string
             })
        , list(type = "trim_exact"
             , docs = "Match pattern string exactly (i.e., match equal strings) ignoring surrounding white-spaces"
             , func = \(string, escape_fixed) {
                 if(escape_fixed) paste0("^\\s*", escape_regex(string), "\\s*$")
                 else stringi::stri_trim_both(string)
             })
        , list(type = "regex"
             , docs = "Match regex pattern"
             , func = \(string, escape_fixed) {
                 string
             }))
      if(return_docs) {
          return(sapply(types_specs, \(x) paste("* ", x$type, " - ", x$docs)))
      }
      if(return_choices) {
          return(sapply(types_specs, `[[`, "type"))
      }
      types_funcs <- lapply(types_specs, `[[`, "func")
      names(types_funcs) <- lapply(types_specs, `[[`, "type")
      ## this will return the right func and call it
      do.call(switch, c(list(EXPR = type), types_funcs))(string, escape_fixed)
  }

  ##' Escapes special for regex characters conditionally
  ##' @param patterns character vector
  ##' @param escape_fixed Whether to escape strings for 'fixed' and
  ##'     'exact' types in case all types are the same
  ##'     (length(unique(types)) == 1). The "trim_exact" types get
  ##'     trimed if not escaped. Otherwise if types heterogenious
  ##' @param types character vector of the same length as `strings` with
  ##'     instructions whether and how to to escape regex
  ##'     characters. Options are:
  ##' @eval escape_regex_for_type(return_docs = TRUE)
  ##' @return string with all special to regex characters escaped
  escape_regex_for_types <- function(patterns, types, escape_fixed = FALSE) {
      choices <- escape_regex_for_type(return_choices = TRUE)
      if(length(types) == 1 || length(unique(types)) == 1) {
          type <- types[1]
          checkmate::assert_choice(type, choices, fmatch = TRUE)
          escape_regex_for_type(patterns, type, escape_fixed = escape_fixed)
      } else {
          checkmate::assert_subset(types, choices, fmatch = TRUE)
          mapply(\(p, t) escape_regex_for_type(p, t, escape_fixed = TRUE)
               , patterns , types
               , SIMPLIFY = TRUE)
      }
  }
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_escape_regex_for_types.r
  escape_regex_for_types <- nstandr:::escape_regex_for_types

  expect_equal(
      c("MSlab$", "TriloBit.?", "(^0-3)", "Ltd.", "lalala") |>
      escape_regex_for_types(c("regex", "fixed", "regex", "ends", "trim_exact"), escape_fixed = FALSE)
    , c(`MSlab$` = "MSlab$", `TriloBit.?` = "TriloBit\\.\\?", `(^0-3)` = "(^0-3)", Ltd. = "Ltd\\.$", lalala = "^\\s*lalala\\s*$")
  )

  expect_equal(
      c("MSlab$", "TriloBit.?", "(^0-3)", "Ltd.", "lalala") |>
      escape_regex_for_types(c("regex", "fixed", "regex", "ends", "trim_exact"))
    , c(`MSlab$` = "MSlab$", `TriloBit.?` = "TriloBit\\.\\?", `(^0-3)` = "(^0-3)", 
        Ltd. = "Ltd\\.$", lalala = "^\\s*lalala\\s*$")
  )
  #+END_SRC

#+BEGIN_SRC R
  ## alternative:
  ## escape.regex  <- function (string) {
  ##   gsub("([.|()\\^{}+$*?]|\\[|\\])", "\\\\\\1", string)
  ## }
#+END_SRC

*** replace_patterns
:PROPERTIES:
:ID:       org:xcpfib50bci0
:END:
:LOGBOOK:
- Reference from [[id:org:6chkzp10fbj0][Refactor replace_patterns]] on [2022-01-02 Sun 14:42]
:END:

#+BEGIN_SRC R :tangle R/1_replace_patterns.r
  replace_exact <- function(x
                          , patterns
                          , replacements) {
      if ((requireNamespace("fastmatch", quietly = TRUE))) {
          match <- fastmatch::fmatch
      }
      matches <- match(x, patterns)
      x[!is.na(matches)] <- replacements[matches][!is.na(matches)]
      return(x)
  }

  stri_replace_do <- function(str, arg_list) {
      do.call(stringi::stri_replace, c(list(str), arg_list))
  }

  replace_fixed_by_mode <- function(x
                                  , patterns
                                  , replacements
                                  , modes) {
      Reduce(stri_replace_do
               , Map(list
                   , fixed = patterns
                   , replacement = replacements
                   , mode = modes)
               , init = x)
  }

  replace_regex_by_mode <- function(x
                                  , patterns
                                  , replacements
                                  , modes) {
      Reduce(stri_replace_do
               , Map(list
                   , regex = patterns
                   , replacement = replacements
                   , mode = modes)
               , init = x)
  }



  ##' A wrapper for string replacement and cbinding some columns.
  ##'
  ##' Optionally matches only at the beginning or at the end of the
  ##' string.
  ##' 
  ##' @param x Vector or table to standardize.
  ##' @param patterns Accepts both vector or table. If patterns is a
  ##'     table can also include replacements column.
  ##' @param patterns_col If patterns is not a vector which column to
  ##'     use. Default is 1.
  ##' @param patterns_mode Mode of matching. Could be one of c("all",
  ##'     "first", "last"). The default is "all" (it is 2x faster than
  ##'     "first" and "last" because of handy stri_replace_all_*
  ##'     functions). Also possible to pass a vector (same length as
  ##'     patterns)
  ##' @param patterns_mode_col Column in patterns table with the mode of
  ##'     matching
  ##' @param patterns_type Type of pattern for matching. Default is
  ##'     "fixed" (calling
  ##'     code{\link[stringi]{stri_replace_all_fixed}}). Other options
  ##'     are:
  ##' @eval escape_regex_for_type(return_docs = TRUE)
  ##' @param patterns_type_col Column with the type of pattern in case
  ##'     when patterns should have different types
  ##' @param patterns_replacements_col If patterns is not a vector and
  ##'     includes replacements which column to use for
  ##'     replacements. Default is 2.
  ##' @param replacements If patterns does not have column with
  ##'     replacements provide it here.
  ##' @inheritDotParams standardize_options
  ##'
  ##' @return If nothing was indicated to cbind to results then it
  ##'     returns standardized vector. If something is needs to be cbind
  ##'     then it returns data.table
  ##' @export
  replace_patterns <- function(x
                              , patterns
                              , patterns_col = 1
                              , patterns_mode = "all"
                              , patterns_mode_col = NULL
                              , patterns_type = "fixed"
                              , patterns_type_col = NULL
                              , patterns_replacements_col = 2
                              , replacements = if(is.atomic(patterns)) "" else NULL
                              , ...) {
      ## get vectors and check arguments
      x_vector <- get_target(x)
      ## types (choices are checked in escape_regex_for_types)
      types_vector <- get_vector(patterns, patterns_type_col
                               , fallback_value = patterns_type)
      ## get patterns and escape regex if types are heterogeneous
      patterns_vector <-
          get_vector(patterns, patterns_col) |>
          escape_regex_for_types(types_vector)
      ## modes
      modes_vector <- get_vector(patterns, patterns_mode_col
                               , fallback_value = patterns_mode
                               , choices = c("all", "first", "last"))
      ## replacements
      replacements_vector <- get_vector(patterns, patterns_replacements_col
                                      , fallback_value = replacements
                                      , fallback_value_supersedes = TRUE)
      ## conditions are organized from fastest to slowest replace procedures
      if (all(types_vector == "exact") || all(types_vector == "trim_exact")) {
          if (all(types_vector == "trim_exact")) {
              x_vector <- stringi::stri_trim_both(x_vector)
          }
          x_vector <- replace_exact(x_vector
                                  , patterns_vector
                                  , replacements_vector)
      } else if (all(modes_vector == "all")) {
          if (all(types_vector == "fixed")) {
              x_vector <-
                  stringi::stri_replace_all_fixed(x_vector
                                                , patterns_vector
                                                , replacements_vector
                                                , vectorize_all = FALSE)
          } else {
              x_vector <-
                  stringi::stri_replace_all_regex(x_vector
                                                , patterns_vector
                                                , replacements_vector
                                                , vectorize_all = FALSE)
          }
      } else if (all(types_vector == "fixed")) {
          x_vector <- replace_fixed_by_mode(x_vector
                              , patterns_vector
                              , replacements_vector
                              , modes_vector)
      } else {
          x_vector <- replace_regex_by_mode(x_vector
                                          , patterns_vector
                                          , replacements_vector
                                          , modes_vector)
      }
      inset_target(x_vector, x)
  }
  #+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_replace_patterns.r
  require(data.table)
  ## Test replace_patterns

  expect_equal(
  replace_patterns(data.table(x.lala = c("lala MSlab MSlab"
                                        , "this company called TriloBit.? maybe"
                                        , "MS007lab, Ltd. Ltd.")
                             , x.rows = c(TRUE, TRUE, FALSE)
                             , harm = c(1,25,"MSlab"))
                  , patterns = c("MSlab", "TriloBit.?", "[0-3]+", "Ltd.")
                  , patterns_type = c("regex", "fixed", "regex", "ends")
                  , col = 1
                  , rows = c(TRUE, TRUE, FALSE)
                  , patterns_replacements_col = 1
                  , patterns_mode = "first")
  , data.table(x.lala = c("lala  MSlab", "this company called  maybe", 
                          "MS007lab, Ltd. Ltd."), x.rows = c(TRUE, TRUE, FALSE), harm = c("1", 
                                                                                          "25", "MSlab")))



  ## multy mode test
  expect_equal(
    replace_patterns(data.table(x.lala = c("lala MSlab MSlab"
                 , "this company called TriloBit.? maybe TriloBit.?"
                 , "MS007lab, Ltd. Ltd.")
           , x.rows = c(TRUE, FALSE, TRUE)
           , harm = c(1,25,"MSlab"))
            , patterns = c("MSlab", "TriloBit.?", "[0-3]+", "Ltd.")
                    , patterns_type = c("regex", "fixed", "regex", "fixed")
                    , col = 1
                    , x.rows = c(TRUE, FALSE, TRUE)
                    , patterns_replacements_col = 1
           , patterns_mode = c("last", "first", "all", "all"))[] 
  , data.table(x.lala = c("lala MSlab ", "this company called  maybe TriloBit.?", 
  "MS7lab,  "), x.rows = c(TRUE, FALSE, TRUE), harm = c("1", "25", 
  "MSlab")))




  ## patterns as table test
  expect_equal(
    replace_patterns(data.frame(x.lala = c("lala MSlab MSlab"
                 , "this company called TriloBit.? maybe TriloBit.?"
                 , "MS007lab, Ltd. Ltd.")
           , x.rows = c(TRUE, FALSE, TRUE)
           , harm = c(1,25,"MSlab"))
             , patterns =
                        data.frame(pats = c("MSlab", "TriloBit.?", "[0-3]+", "Ltd.")
                                 , type = c("regex", "fixed", "regex", "ends")
                                 , mode = c("all", "first", "all", "all")
                                 , replacements = c("MSMS", "TBTB", "NRNR", "COMP"))
                    , col = 1
                    , rows = c(TRUE, FALSE, TRUE)
                    , patterns_mode_col = 3
                    , patterns_type_col = "type" 
           , patterns_replacements_col = "replacements")
  , data.table(x.lala = c("lala MSMS MSMS", "this company called TriloBit.? maybe TriloBit.?", 
  "MSNRNR7lab, Ltd. COMP"), x.rows = c(TRUE, FALSE, TRUE), harm = c("1", 
                                                                    "25", "MSlab"))
  )


  ## test for all x.rows FALSE
  expect_equal(
      replace_patterns(data.frame(x.lala = c("lala MSlab MSlab"
                 , "this company called TriloBit.? maybe TriloBit.?"
                 , "MS007lab, Ltd. Ltd.")
           , x.rows = c(TRUE, FALSE, TRUE)
           , harm = c(1,25,"MSlab"))
             , patterns =
                        data.frame(pats = c("MSlab", "TriloBit.?", "[0-3]+", "Ltd.")
                                 , type = c("regex", "fixed", "regex", "ends")
                                 , mode = c("all", "first", "all", "all")
                                 , replacements = c("MSMS", "TBTB", "NRNR", "COMP"))
                    , patterns_type_col = "type"
                    , col = 1
                    , col.update = TRUE
                    , rows = c(FALSE, FALSE, FALSE)
                    , patterns_replacements_col = "replacements"
           , patterns_mode_col = 3)
  , data.table(x.lala = c("lala MSlab MSlab", "this company called TriloBit.? maybe TriloBit.?", 
  "MS007lab, Ltd. Ltd."), x.rows = c(TRUE, FALSE, TRUE), harm = c("1", 
  "25", "MSlab")))






#+END_SRC

testing performance of ~stri_replace_all_regex(vectorize_all = FALSE)~
#+BEGIN_SRC R
  ## Test for stri_replace_all_regex(vectorize_all = FALSE) timing vs for loop
  ## for loop ~2.5 times longer!!!
  system.time(stri_replace_all_regex(rep(words, 100)
                                   , paste0("^"
                                          , combn(letters, 2) %>%
                                            apply(2, paste, collapse = ""))
                                   , "!!"
                                   , vectorize_all = FALSE))

  system.time({
    str <- rep(words, 100)
    for (i in paste0("^"
                   , combn(letters, 2) %>%
                     apply(2, paste, collapse = ""))) {
      str %<>% stri_replace_all_regex(i, "!!", vectorize_all = TRUE)
    }
  })
#+END_SRC
*** detect_patterns
:PROPERTIES:
:ID:       org:bb21tpb0wei0
:END:

#+BEGIN_SRC R :tangle R/1_detect_patterns.r
  transpose_list_of_vectors <- function(l) {
      do.call(mapply, c(FUN = list(c), l, list(USE.NAMES = FALSE, SIMPLIFY = FALSE)))
  }

  and_rows <- function(rows_1, rows_2, x) {
      if(is.null(rows_1)) return(rows_2)
      if(is.null(rows_2)) return(rows_1)
      if(is.numeric(rows_1)) rows_1 <- 1:x_length(x) %in% rows_1
      if(is.numeric(rows_2)) rows_2 <- 1:x_length(x) %in% rows_2
      rows_1 & rows_2
  }

  or_rows <- function(rows_1, rows_2, x) {
      if(is.null(rows_1)) return(rows_1)
      if(is.null(rows_2)) return(rows_2)
      if(is.numeric(rows_1)) rows_1 <- 1:x_length(x) %in% rows_1
      if(is.numeric(rows_2)) rows_2 <- 1:x_length(x) %in% rows_2
      rows_1 | rows_2
  }

  #' Codes strings (e.g., organizational names) based on certain patterns
  #'
  #' @param x Vector or table to detect in.
  #' @param patterns Accepts both vector or table. If patterns it is table can also include replacements column.
  #' @param patterns_col If patterns is a table this specifies which column to use. Default is 1.
  #' @param patterns_codes_col If patterns is table which column to use as codes column. Default is 2.
  #' @param patterns_type Specifies kind(s) of patterns. Default is "fixed" (calling code{\link[stringi]{stri_replace_all_fixed}}). Other options are:
  #' @eval escape_regex_for_type(return_docs = TRUE)
  #' @param patterns_type_col Column in patterns table where you can specify types of patterns for each pattern. If set then `patterns.type` is ignored. Default is NULL.
  #' @param patterns_codes If provided use it as codes. Should be the same length as patterns. Default is NULL.
  #' @param output_codes_col_name If provided use it as a name for codes column (new if it does not exist or the one to update) in results.
  #' @param codes_omitted_rows_value If `rows` is set. Use this value to fill the omitted rows. When we update existing codes column Default is NULL which means that we use initial codes values for omitted rows. If there is no codes col to update omited rows will be filled with NA.
  #' @param no_match_code If provided code records that did not get any match with it. 
  #' @param merge_existing_codes Whether to merge newly detected codes with existing. Options are:
  #' @eval detect_patterns(return_merge_codes_description = TRUE)
  #' @param return_only_codes If toggled on then just return codes vector.
  #' @param return_only_first_detected_code If TRUE then return only codes for the first detected pattern. If FALSE return list of all matched codes. Default is TRUE. (Currently does affect performance)
  #' @param return_merge_codes_description Return description of choices for `merge_existing_codes` paramenter.
  #' @inheritDotParams standardize_options
  #' 
  #' @return The updated `x` table with codes column or just codes if `return_only_codes` is set.
  #'
  #' @export
  detect_patterns <- function(x
                            , patterns
                            , patterns_col = 1
                            , patterns_codes_col = 2
                            , patterns_type = "fixed"
                            , patterns_type_col = NULL
                            , patterns_codes = NULL
                            , output_codes_col_name = "{col_name_}coded"
                            , codes_omitted_rows_value = NULL
                            , no_match_code = NULL
                            , merge_existing_codes = "replace_all"
                            , return_only_codes = FALSE
                            , return_only_first_detected_code = FALSE
                            , return_merge_codes_description = FALSE 
                            , ...) {
      ## check some arguments that are not checked elsewhere
      merge_existing_codes_choices =
          c("replace_all" = "Replace everything (entire column) with new codes."
          , "replace_empty" = "Code only records (i.e., rows) for which existing codes are empty (i.e., empty string, NA, empty list)"
          , "append_to_existing" = "Merge with existing codes appending new ones to the end"
          , "prepend_to_existing" = "Merge with existing codes prepending new ones to the front")
      checkmate::assert_choice(merge_existing_codes
                             , choices = names(merge_existing_codes_choices))
      if(return_merge_codes_description) return(mapply(\(desc, name) paste("*", name, "-", desc)
                                                     , merge_existing_codes_choices
                                                     , names(merge_existing_codes_choices)))
      checkmate::assert_atomic(no_match_code, min.len = 0, max.len = 1)
      checkmate::assert_flag(return_only_codes)
      checkmate::assert_flag(return_only_first_detected_code)
      ## set rows and excule those that coded
      rows <- get_col_and_rows()$rows
      if(merge_existing_codes == "replace_empty") {
          ## why does it returns previous values without forcing x? magic?
          force(x)
          rows <- get_target(x
                           , rows = NULL
                           , output_col_name = output_codes_col_name
                           , output_placement = "append_to_x"
                           , return_null_for_new_col = TRUE) |>
              standardize_is_data_empty() |>
              and_rows(rows, x)
      }
      ## --------------------------------------------------------------------------------
      ## get vectors
      x_vector <- get_target(x, rows = rows)
      ## check if there is something to code
      if(length(x_vector) == 0) return(x)
      ## types (choices are checked in escape_regex_for_types)
      types_vector <- get_vector(patterns, patterns_type_col
                               , fallback_value = patterns_type)
      if(length(types_vector) == 0) return(x)
      ## get patterns excaped according to types.vector
      patterns_vector <-
          get_vector(patterns, patterns_col) |>
          escape_regex_for_types(types_vector)
      if(length(patterns_vector) == 0) return(x)
      ## get codes
      codes_vector <- get_vector(patterns, patterns_codes_col
                               , fallback_value = patterns_codes
                               , fallback_value_supersedes = TRUE)
      if(length(patterns_vector) == 0) return(x)
      ## --------------------------------------------------------------------------------
      ## detect and clean up
      x_inset_vector <-
          mapply(\(pattern, pattern_type, code)
              switch(pattern_type
                   , "fixed" = stringi::stri_detect_fixed(x_vector, pattern)
                   , "exact" = x_vector == pattern
                   , "trim_exact" = stringi::stri_trim_both(x_vector) == pattern
                   , stringi::stri_detect_regex(x_vector, pattern)
                     ) |> ifelse(code, NA)
               , patterns_vector
               , types_vector
               , codes_vector
               , SIMPLIFY = FALSE
               , USE.NAMES = FALSE) |>
          transpose_list_of_vectors() |>
          lapply(standardize_omit_empty)
      ## code unmached records if needed
      if(!is.null(no_match_code)) {
          x_inset_vector <- 
              ifelse(lapply(x_inset_vector, length) == 0
                   , no_match_code
                   , x_inset_vector)
      }
      ## check if only first detected code is needed
      if(return_only_first_detected_code) {
          x_inset_vector <-
              lapply(x_inset_vector
                   , \(x) if(length(x) > 1) x[1] else x)
      }     ## merge if there is something to merge with
      if(merge_existing_codes %in% c("append_to_existing", "prepend_to_existing")) {
          x_codes_vector <- get_target(x
                                     , rows = rows
                                     , output_col_name = output_codes_col_name
                                     , output_placement = "append_to_x"
                                     , return_null_for_new_col = TRUE)
          if(!is.null(x_codes_vector)) {
              if(merge_existing_codes == "prepend_to_existing") {
                  x_inset_vector <- mapply(c, x_codes_vector, x_inset_vector
                                         , SIMPLIFY = FALSE
                                         , USE.NAMES = FALSE)
              } else {
                  x_inset_vector <- mapply(c, x_inset_vector, x_codes_vector
                                         , SIMPLIFY = FALSE
                                         , USE.NAMES = FALSE)
              }
          }
      }
      x_inset_vector <- unlist_if_possible(x_inset_vector)
      ## append codes (if prepend allowed it will break target col inference)
      inset_target(x_inset_vector, x
                 , rows = rows
                 , output_placement = "append_to_x"
                 , output_col_name = output_codes_col_name
                 , omitted_rows_value = codes_omitted_rows_value
                 , omitted_rows_value_for_new_col = NA_character_
                 , return_only_target_col = return_only_codes)
  }

  #+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_detect_patterns.r
  ## Tests for detect_patterns
  library("data.table")

  ## testing x.rows
  expect_equal(
      detect_patterns(
          x = data.frame(
              name = c(
                  "MSlab Co.",
                  "IBM Corp.",
                  "Tilburg University"
              ),
              codes = c("", 3, NA),
              lala = 1
          ),
          patterns = c("Co.", "Corp.", "MS"),
          patterns_type = "ends",
          output_codes_col_name = "codes.new",
          patterns_codes_col = 1,
          merge_existing_codes = "append_to_existing",
          rows = c(FALSE, TRUE, FALSE)
      )
     , data.table(name = c("MSlab Co.", "IBM Corp.", "Tilburg University"), codes = c("", "3", NA), lala = c(1, 1, 1), codes.new = c(
          NA,
          "Corp.", NA
      ))
  )

  ## with codes.omitted.val = NA
  expect_equal(
      detect_patterns(
          x = data.frame(
              name = c(
                  "MSlab Co.",
                  "IBM Corp.",
                  "Tilburg University"
              ),
              codes = c("", 3, NA),
              lala = 1
          ),
          patterns = c("Co.", "Corp.", "MS"),
          patterns_type = "ends",
          codes_omitted_rows_value = "omitted",
          output_codes_col_name = "codes_new",
          patterns_codes_col = 1,
          merge_existing_codes = "append_to_existing",
          rows = c(FALSE, TRUE, FALSE)
      )
     , data.table(name = c("MSlab Co.", "IBM Corp.", "Tilburg University"), codes = c("", "3", NA), lala = c(1, 1, 1), codes_new = c("omitted", "Corp.", "omitted"))
  )

  ## testing x.rows again with x.codes.col
  expect_equal(
      detect_patterns(data.frame(
          name = c(
              "MSlab Co.",
              "IBM Corp.",
              "Tilburg University"
          ),
          codes = c("", 3, NA),
          lala = 1
      ),
      c("Co.", "Corp.", "MS"),
      patterns_type = "ends",
      patterns_codes_col = 1,
      output_codes_col_name = "codes",
      merge_existing_codes = "append_to_existing",
      rows = c(FALSE, TRUE, FALSE)
      )
     , structure(list(name = c("MSlab Co.", "IBM Corp.", "Tilburg University"), codes = list("", c("Corp.", "3"), NA_character_), lala = c(
          1,
          1, 1
      )), row.names = c(NA, -3L), class = c("data.table", "data.frame"))
  )

  ## same as about but for vector
  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      patterns = c("Co.", "Corp.", "MS"),
      patterns_type = "ends",
      patterns_codes = "ala",
      return_only_codes = FALSE
      )
     ,
      structure(list(x = c("MSlab Co.", "IBM Corp.", "Tilburg University"), x_coded = c("ala", "ala", NA)), row.names = c(NA, -3L), class = c("data.table", "data.frame"))
  )

  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      patterns = c("Co.", "Corp.", "MS"),
      patterns_type = "ends",
      patterns_codes = "ala",
      return_only_codes = TRUE
      ),
      c("ala", "ala", NA)
  )




  expect_equal(
      detect_patterns(
          data.frame(
              name = c(
                  "MSlab Co.",
                  "IBM Corp.",
                  "Tilburg University"
              ),
              codes = c("", 3, NA)
          ),
          patterns = "Corp.",
          patterns_type = "ends",
          return_only_codes = TRUE
      ),
      c(NA, "Corp.", NA)
  )






  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      data.table(c("Co.", "Co"),
          type = c("corp", "corp2"),
          some.extra.col = c(1, 2)
      ),
      return_only_first_detected_code = FALSE
      ),
      structure(list(x = c("MSlab Co.", "IBM Corp.", "Tilburg University"), x_coded = list(c("corp", "corp2"), "corp2", character(0))), row.names = c(
          NA,
          -3L
      ), class = c("data.table", "data.frame"))
  )





  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      patterns_codes = "single code",
      data.table(c("Co.", "Co"),
          some.extra.col = c(1, 2)
      )
      ),
      structure(list(x = c("MSlab Co.", "IBM Corp.", "Tilburg University"), x_coded = list(
          c("single code", "single code"), "single code",
          character(0)
      )), row.names = c(NA, -3L), class = c(
          "data.table",
          "data.frame"
      ))
  )

  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      data.table(c("Co.", "Co"),
          type = c(FALSE, TRUE),
          some.extra.col = c(1, 2)
      ),
      return_only_first_detected_code = TRUE
      ),
      structure(list(x = c("MSlab Co.", "IBM Corp.", "Tilburg University"), x_coded = c("FALSE", "TRUE", NA)), row.names = c(NA, -3L), class = c(
          "data.table",
          "data.frame"
      ))
  )




  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      data.frame(c("Co.", "Co"),
          type = c("corp", "corp2")
      ),
      return_only_first_detected_code = TRUE,
      patterns_type = "ends"
      ),
      structure(list(x = c("MSlab Co.", "IBM Corp.", "Tilburg University"), x_coded = c("corp", NA, NA)), row.names = c(NA, -3L), class = c("data.table", "data.frame"))
  )





  expect_equal(
      detect_patterns(c(
          "MSlab Co",
          "MS3lab Co",
          "MSlab8 Co.",
          "IBM Corp.",
          "Tilburg University",
          " TiU    "
      ),
      data.frame(c("Co", "IBM", "MS[^0-9]+", "TiU", "Univ\\w+"),
          code = c("corp", "ibm", "ms", "tiu", "univ"),
          type = c("ends", "begins", "regex", "trim_exact", "regex")
      ),
      return_only_first_detected_code = TRUE,
      patterns_type_col = 3
      ),
      structure(list(x = c(
          "MSlab Co", "MS3lab Co", "MSlab8 Co.",
          "IBM Corp.", "Tilburg University", " TiU    "
      ), x_coded = c(
          "corp",
          "corp", "ms", "ibm", "univ", NA
      )), row.names = c(NA, -6L), class = c(
          "data.table",
          "data.frame"
      ))
  )





  expect_equal(
      detect_patterns(c(
          "MSlab Co",
          "MS3lab Co",
          "MSlab8 Co.",
          "IBM Corp.",
          "Tilburg University",
          " TiU    "
      ),
      data.frame(c("Co", "IBM", "MS[^0-9]+", "TiU", "Univ\\w+"),
          code = c("corp", "ibm", "ms", "tiu", "univ"),
          type = c("ends", "begins", "regex", "trim_exact", "regex")
      ),
      patterns_type_col = 3
      ),
      structure(list(x = c(
          "MSlab Co", "MS3lab Co", "MSlab8 Co.",
          "IBM Corp.", "Tilburg University", " TiU    "
      ), x_coded = list(
          c("corp", "ms"), "corp", "ms", "ibm", "univ", character(0)
      )), row.names = c(
          NA,
          -6L
      ), class = c("data.table", "data.frame"))
  )

  ## testing adding to list

  expect_equal(
      detect_patterns(data.table(
          name = c(
              "MSlab Co.",
              "IBM Corp.",
              "Tilburg University"
          ),
          codes = list(
              c("cool firm", "best firm ever"),
              "cool firm",
              "univer"
          ),
          lala = c(1, 2, 3)
      ),
      patterns = c("Co.", "Corp.", "MS"),
      patterns_type = "ends",
      patterns_codes = "corporation",
      output_codes_col_name = "codes",
      merge_existing_codes = "append_to_existing",
      rows = c(FALSE, TRUE, FALSE)
      ),
      data.table(name = c("MSlab Co.", "IBM Corp.", "Tilburg University"), codes = list(c("cool firm", "best firm ever"), c("corporation", "cool firm"), "univer"), lala = c(1, 2, 3))
  )

  ## test all missmatches (all NAs call fall to logical class and cause errow on assesment)
  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      data.table(c("Coxx", "Corr"),
          type = c("corp", "corp2"),
          some.extra.col = c(1, 2)
      ),
      return_only_first_detected_code = FALSE
      ),
      structure(list(x = c("MSlab Co.", "IBM Corp.", "Tilburg University"), x_coded = c(NA_character_, NA_character_, NA_character_)), row.names = c(
          NA,
          -3L
      ), class = c("data.table", "data.frame"))
  )


  ## test unmatch codes
  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      data.table(c("Coxx", "Co."),
          type = c("corp", "corp2"),
          some.extra.col = c(1, 2)
      ),
      return_only_first_detected_code = FALSE,
      no_match_code = "no_match"
      ),
      structure(list(x = c("MSlab Co.", "IBM Corp.", "Tilburg University"), x_coded = c("corp2", "no_match", "no_match")), row.names = c(NA, -3L), class = c("data.table", "data.frame"))
  )


  ## test and_rows
  expect_equal(data.table(a = c("MSlab Co."
                              , "IBM Corp."
                              , "Tilburg University Co.")
                        , a_coded = c(NA, "existing corp code", NA)) |>
               detect_patterns(
                   data.table(c("Corp.", "Co.", "Uni")
                            , type = c("corp", "corp2", "Uni")
                            , some.extra.col = c(1, 2, 3))
                 , merge_existing_codes = "replace_empty"
                 , return_only_first_detected_code = FALSE
                 , rows = c( TRUE, TRUE, FALSE)
                 , no_match_code = "no_match")
             , structure(list(a = c("MSlab Co.", "IBM Corp.", "Tilburg University Co."  ), a_coded = c("corp2", "existing corp code", NA)), row.names = c(NA, -3L), class = c("data.table", "data.frame")))

#+END_SRC

** standardize

:PROPERTIES:
:ID:       org:ifb5ac70uai0
:END:

The default standardization procedures are the following (for now):

#+NAME: nstandr_default_procedures_table
| no | message                            | function.call                                    |
|----+------------------------------------+--------------------------------------------------|
|    | *Prepossessing*                    |                                                  |
|  1 | Cleaning spaces                    | 'standardize_squish_spaces', wrap_in_spaces = TRUE |
|    |                                    |                                                  |
|    | *Characters*                       |                                                  |
|  2 | Removing HTML codes                | 'standardize_dehtmlize'                          |
|  3 | Translating non-ASCII to ASCII     | 'standardize_toascii'                            |
|  4 | Upper casing                       | 'standardize_toupper'                            |
|    |                                    |                                                  |
|    | *Cleaning*                         |                                                  |
|  5 | Standardizing organizational names | 'cockburn_replace_punctuation'                   |
|  6 | Removing brackets                  | 'standardize_remove_brackets'                    |
|  7 | Cleaning spaces                    | 'standardize_squish_spaces'                      |

#+call: make-rds-patterns-table(data = nstandr_default_procedures_table, data.name = "nstandr_default_procedures_table", remove.single.quotes = "FALSE", data.dir = "data", add.to.rda = "R/sysdata.rda")


#+BEGIN_SRC R :tangle R/nstandr.r
  #' Standardizes organizational names. Takes either vector or column in the table.
  #' 
  #' @param x object (table)
  #' @param procedures Named list of procedures (closures) to apply to x. If we need to pass arguments to some of the procedures it can be done by specifying sub-list where the first element is procedure and the rest its arguments. Names of the list elements are used for progress messages. Procedures can also be passed as data.frame in which case it will be converted to list of procedures with `standardize_make_procedures_list` (see its help for the correct format of data.frame with procedures). Default is `nstandr_default_procedures_table`
  #' @param show_progress Whether to report progress percentage. Default is TRUE
  #' @param nrows_min_to_show_progress The minimum number of rows the x should have for automatic progress estimation. If x has less rows no progress will be shown. Default is 10^5
  #' @param progress_step_nrows If set it will divide the x into chunk of this amount of rows. Default is NULL.
  #' @param progress_step_in_percent Number of percents that represent one step in progress. Value should be between 0.1 and 50. Default is 1 which means it will try to chunk the x into 100 pieces.
  #' @param progress_message_use_names Should we use names from `procedures` list to report progress. Default is TRUE.
  #' @param quite Suppress all messages. Default is FALSE.
  #' @param save_intermediate_x_to_var For debuging of standartization procedures. Saves intermediate results to this variable. If procedures finish without errors then the variable will be removed.
  #' @inheritDotParams standardize_options
  #'
  #' @aliases make_standard_names make_std_names
  #' 
  #' @return standardized data
  #'
  #' @export
  standardize <- function(x
                      , procedures = nstandr_default_procedures_table
                      , show_progress = TRUE
                      , nrows_min_to_show_progress = 10^5
                      , progress_step_nrows = NULL
                      , progress_step_in_percent = 1
                      , progress_message_use_names = TRUE
                      , quite = FALSE
                      , save_intermediate_x_to_var = NULL
                      , ...) {
      checkmate::assert_string(save_intermediate_x_to_var, null.ok = TRUE)
      checkmate::assert_flag(show_progress)
      checkmate::assert_flag(quite)
      checkmate::assert_flag(progress_message_use_names)
      checkmate::assert_multi_class(procedures, classes = c("list", "data.frame"))
      if(is.data.frame(procedures)) {
          procedures <- standardize_make_procedures_list(procedures)
      }
      ## make format of the massages for procedures
      message_delimiter <- paste(c("\n", rep("-", 65), "\n"), collapse = "")
      message_init <- paste0("\nApplying standardization procedures:", message_delimiter)
      message_done  <- "\b\b\b\bDONE"
      progress_format <- "\b\b\b\b%3.0f%%"
      message_format <- "* %-60.60s...."
      message_fin <- paste0(message_delimiter, "Standardization is done!\n")
      ## ensure that x is either vector or data.table
      if(missing(x)) return(NULL)
      checkmate::assert_multi_class(x
                                  , classes = c("character"
                                              , "numeric"
                                              , "integer"
                                              , "logical"
                                              , "data.frame"
                                              , "data.table"))
      ## check progress_step_in_percent
      checkmate::assert_number(progress_step_in_percent, lower = 0.1, upper = 50)
      checkmate::assert_number(progress_step_nrows
                             , lower = x_length(x)/1000
                             , upper = x_length(x)/2
                             , null.ok = TRUE)
      x_len <- x_length(x)
      ## Set progress_step_nrows
      progress_step_nrows <-
          if (show_progress && !quite) {
              if(x_len < nrows_min_to_show_progress) {
                  NULL
              } else if(!is.null(progress_step_nrows)) {
                  progress_step_nrows
              } else {
                  round(x_len / (100 / progress_step_in_percent))
              }
          }
      ## Apply Procedures
      if(!quite) message(message_init)
      for(p in 1:length(procedures)) {
          ## get procedure function
          procedure_fun <- procedures[[p]][[1]]
          ## get procedure arguments (remove show_progressarg if it is there)
          procedure_args <- procedures[[p]][
              -c(1, which(names(procedures[[p]]) == "show_progress"))
          ]
          ## get procedure names
          procedure_name <- 
              if(standardize_is_data_empty(names(procedures)[p]) | !progress_message_use_names) {
                  procedure_fun
              } else {
                  names(procedures)[p]
              }
          ## Anounce Procedure Name
          if(!quite) packageStartupMessage(
                         sprintf(message_format, procedure_name)
                       , appendLF = FALSE)
          ## Check if we need report progress:
          ## progress is set & progress = FALSE is absent in the arguments
          if(!is.null(progress_step_nrows) &
             !isFALSE(procedures[[p]]["show_progress"][[TRUE]])) {
              ## check if we need to split..
              if(!isTRUE(class(x) == "list")) {
                  x <- standardize_x_split(x, progress_step_nrows)
              }
              ## set progress counter
              i <- 0; env <- environment()
              ## Apply procedure to list!
              x <- lapply(x, \(x_by) {
                  if(!is.null(save_intermediate_x_to_var))
                      assign(save_intermediate_x_to_var, x, pos = 1)
                  ## apply procedure fun with args
                  x_by <- do.call(procedure_fun
                                , c(list(x_by), procedure_args))
                  ## Increment progress counter
                  assign("i", i + 100 * progress_step_nrows / x_len, envir = env)
                  ## Anounce progress
                  packageStartupMessage(
                      sprintf(progress_format, i)
                    , appendLF = FALSE)
                  return(x_by)
              })
          } else {
              ## check if we need to rbindlist..
              if(isTRUE(class(x) == "list")) {
                  if(is.atomic(x[[1]])) {
                      x <- unlist(x, use.names = FALSE)
                  } else {
                      x <- rbindlist(x)
                  }
              }
              if(!is.null(save_intermediate_x_to_var))
                  assign(save_intermediate_x_to_var, x, pos = 1)
              ## Apply procedure fun with args!
              x <- do.call(procedure_fun, c(list(x), procedure_args))
          }
          ## Anounce DONE
          if(!quite) packageStartupMessage(message_done)
      }
      if(!quite) message(message_fin)
      ## return x
      if(isTRUE(class(x) == "list")) {
          if(is.atomic(x[[1]])) {
              x <- unlist(x, use.names = FALSE)
          } else {
              x <- rbindlist(x)
          }
      }
      ## remove intermediate saves if procedures finished without error
      remove
      if(!is.null(save_intermediate_x_to_var))
          rm(list = save_intermediate_x_to_var, pos = 1)
      return(x)
  }


  ## Alias

  #' @rdname standardize
  #' @export
  make_std_names <- standardize


  #' @rdname standardize
  #' @export
  make_standard_names <- standardize

#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_standardize.r
  dummy <- function(x, n) {
      for(i in 1:n) x <- sqrt(x)^2
      return(x)
  }

  ## note that do.call is not able to find functions by name so one need to pass it as a lambda

  expect_equal(
      standardize(as.numeric(1:10^2)
              , procedures =
                    list("Squaring stuff" = "sqrt"
                        ,list("abs", show_progress = FALSE)
                        ,list("log", base = 10)
                       , "My function" = list(dummy, 10^6, show_progress = TRUE))
              , nrows_min_to_show_progress = 1
              , progress_step_nrows = NULL
              , quite = TRUE)
  , c(0, 0.150514997831991, 0.238560627359831, 0.301029995663981, 
        0.349485002168009, 0.389075625191822, 0.422549020007129, 0.451544993495972, 
        0.477121254719662, 0.5, 0.520696342579113, 0.539590623023813, 
        0.556971676153418, 0.573064017839119, 0.588045629527841, 0.602059991327962, 
        0.615224460689137, 0.627636252551653, 0.639376800476415, 0.650514997831991, 
        0.66110964736696, 0.671211340411103, 0.680863918008797, 0.690105620855803, 
        0.698970004336019, 0.707486673985409, 0.715681882079494, 0.72357901567111, 
        0.731198998949478, 0.738560627359831, 0.745680846917136, 0.752574989159953, 
        0.759256969938944, 0.765739458521128, 0.772034022175138, 0.778151250383644, 
        0.784100862033497, 0.789891798308405, 0.79553230351325, 0.801029995663981, 
        0.806391928359868, 0.81162464519895, 0.816734227789793, 0.821726338243094, 
        0.826606256887672, 0.831378915840787, 0.836048928967859, 0.840620618687793, 
        0.845098040014257, 0.849485002168009, 0.853785088048968, 0.8580016718174, 
        0.862137934800395, 0.866196879911484, 0.870181344747122, 0.8740940135031, 
        0.877937427836246, 0.881713996781469, 0.885426005821072, 0.889075625191822, 
        0.892664917505384, 0.896195844749127, 0.899670274726791, 0.903089986991944, 
        0.906456678321428, 0.909771967770934, 0.913037401350413, 0.916254456353118, 
        0.919424545368627, 0.922549020007128, 0.925629174359538, 0.928666248215634, 
        0.931661430060228, 0.934615859865488, 0.93753063169585, 0.940406796140396, 
        0.943245362586241, 0.94604730134524, 0.948813545645221, 0.951544993495972, 
        0.954242509439325, 0.956906926191858, 0.959539046188037, 0.962139643030941, 
        0.964709462857146, 0.967249225621784, 0.969759626309309, 0.972241336075084, 
        0.974695003322457, 0.977121254719662, 0.979520696160547, 0.981893913672778, 
        0.984241474276968, 0.986563926799849, 0.988861802644424, 0.991135616519784, 
        0.993385867133122, 0.995613037846247, 0.997817597298775, 1))



  expect_equal(c("žŸong-ÂÃÇÈÏa\n\u00b5 &oacute;\u00b5<p>,  INt LTD &AMP; Co;  "
               , "<br> the $ (&AMP; C&oacute;MP comPANY) Ïotta"
               , "Tempshield Cryo-Protection™"
               , "Ábcdêãçoàúü"
               , "Polgen Sp. z o.o. <U+0096> Sp. K."
               , "Polgen Sp. z o.o. – Sp. K."
               , "Jerome® <br>"
               , "Controlled Environments®  Magazine"
               , "a\n\u00b5\u00b5"
               , "fa\xE7ile"
               , "fa\xc3\xa7ile"
               , "MSlab CO. CO., LTD."
               , "MSlab, A \\SOCIETE ANONYME\\"
               , "S.A.S. University Co., {PE}, Ltd. (Europe)"
               , "Analytical Technologies Limited"
               , "Anasys Instruments Corporation"
               , "C4 Control de Contaminacion Ltda"
               , "Crescent Scientific Pvt Ltd."
               , "Daigger & Co., Inc."
               , "Dell Inc."
               , "Deltalab. S.L.U."
               , "DLAB Scientific Co.,Ltd."
               , "ebro Electronic GmbH und Co. KG"
               , "Ecom spol. s r.o., s.r.o., akc. spol."
               , "G.A.S. mbH"
               , "Glassco Laboratory Equipments PVT LTD"
               , "Lhasa Limited"
               , "rose plastic USA, LLLP"
               , "a;sdkfjsdlkfj;laswee\'\" asdf Co.") |>
               standardize(quite = TRUE)
             , c("ZYONG AACEIA U OU INT LTD & CO", "THE & COMP COMPANY IOTTA", 
                 "TEMPSHIELD CRYO PROTECTION", "ABCDEACOAUU", "POLGEN SP Z OO SP K", 
                 "POLGEN SP Z OO SP K", "JEROME", "CONTROLLED ENVIRONMENTS MAGAZINE", 
                 "A UU", "FAILE", "FACILE", "MSLAB CO CO LTD", "MSLAB A SOCIETE ANONYME", 
                 "SAS UNIVERSITY CO PE LTD EUROPE", "ANALYTICAL TECHNOLOGIES LIMITED", 
                 "ANASYS INSTRUMENTS CORPORATION", "C4 CONTROL DE CONTAMINACION LTDA", 
                 "CRESCENT SCIENTIFIC PVT LTD", "DAIGGER & CO INC", "DELL INC", 
                 "DELTALAB SLU", "DLAB SCIENTIFIC COLTD", "EBRO ELECTRONIC GMBH & CO KG", 
                 "ECOM SPOL S RO SRO AKC SPOL", "GAS MBH", "GLASSCO LABORATORY EQUIPMENTS PVT LTD", 
                 "LHASA LIMITED", "ROSE PLASTIC USA LLLP", "ASDKFJSDLKFJLASWEE\" ASDF CO"
                 ))


#+END_SRC

* Magerman, et al. (2006) - Standardization Procedure

Notes:
[[id:org:zy6j0m20vai0][Magerman, Van Looy & Song, 2006 - Name harmonisation]]
# Pdf: [[zotero://select/items/1_IT9A958K][Magerman et al., 2006 - Data Production Methods for Harmonized Patent Statistics: Patentee Name Standardization]]

direct link:
[[file:C:\Users\svlasov\Zotero\storage\PHAJ4WAB\Magerman et al. - 2006 - Data Production Methods for Harmonized Patent Stat.pdf]]

Magerman, T., Van Looy, B., Song, X., European Commission, & Eurostat. (2006). Data production methods for harmonised patent statistics patentee name harmonisation.

Full text: https://core.ac.uk/download/pdf/34432497.pdf

** Characters
:PROPERTIES:
:ID:       org:qwne4v20zai0
:END:

Patterns used to identify characters to clean
| pattern | regex   | procedure                  |
|---------+---------+----------------------------|
| %{%}%   | {.+}    | propriety coded characters |
| %[0%]%  | \[0.+\] | propriety coded characters |
| %(%)%   | \(.+\)  | propriety coded characters |
| %&%;%   | &.+;    | sgml coded characters      |
| %<%>%   | <.+>    | html coded characters      |

The function below can be used to detect candidates for characters that need to be cleaned based on the table above.

#+BEGIN_SRC R :tangle R/magerman.r
  ##' @eval attr(magerman_detect_characters, "@title")
  ##' @inherit detect_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso detect_patterns
  ##'
  ##' @md
  ##' @export
  magerman_detect_characters <- make_alias(detect_patterns
                                         , patterns =
                                               c("\\{.+\\}", "propriety coded characters {xxx}"
                                               , "\\[0.+\\]", "propriety coded characters [0xxx]"
                                               , "\\(.+\\)", "propriety coded characters (xxx)"
                                               , "&.+;", "sgml coded characters"
                                               , "<.+>", "html coded characters") |>
                                               matrix(byrow = TRUE, ncol = 2) |>
                                               data.frame()
                                         , patterns_type = "regex"
                                         , output_codes_col_name = "characters_cleaning_candidates")

  attr(magerman_detect_characters, "@title") <-
      "Detect candidates for characters that need to be cleaned"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_detect_characters.r

  expect_equal(
      magerman_detect_characters("Chip &AMP; Dayle (lala) [0x2345] {abs} ops html <br>")
    , structure(list(x = "Chip &AMP; Dayle (lala) [0x2345] {abs} ops html <br>", 
                     characters_cleaning_candidates = list(c("propriety coded characters {xxx}", 
                                                             "propriety coded characters [0xxx]", "propriety coded characters (xxx)", 
                                                             "sgml coded characters", "html coded characters"))), row.names = c(NA, 
                                                                                                                                -1L), class = c("data.table", "data.frame")))


#+END_SRC

*** magerman.remove.html.codes
:PROPERTIES:
:ID:       org:b6l29ts0lei0
:END:

#+BEGIN_SRC R :tangle R/magerman.r
  ##' @eval attr(magerman_remove_html_codes, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_remove_html_codes <- make_alias(replace_patterns
                                         , patterns = "<BR>"
                                         , replacements = " ")


  attr(magerman_remove_html_codes, "@title") <-
      "Removes html codes"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_remove_html_codes.r
  expect_equal(
      magerman_remove_html_codes("bla bla <BR>")
    , "bla bla  "
  )
  #+END_SRC

*** magerman.replace.sgml.characters
:PROPERTIES:
:ID:       org:xsagib50bci0
:END:

Table 7: SGML codes and their ASCII/ANSI equivalent
#+NAME: magerman_patterns_sgml_characters
| sgml.code | replacement.character |
|-----------+-----------------------|
| &AMP;     | &                     |
| &OACUTE;  | Ó                     |
| &SECT;    | §                     |
| &UACUTE;  | Ú                     |
| &#8902;   | ' '                   |
| &BULL;    | .                     |
| &EXCL;    | !                     |

#+call: make-rds-patterns-table(data = magerman_patterns_sgml_characters, data.name = "magerman_patterns_sgml_characters")

#+BEGIN_SRC R :tangle R/magerman.r
  ##' @eval attr(magerman_replace_sgml_characters, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_replace_sgml_characters <- make_alias(replace_patterns
                                               , patterns = magerman_patterns_sgml_characters)

  attr(magerman_replace_sgml_characters, "@title") <-
      "Replaces sgml characters"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_replace_sgml_characters.r
   test.df <-
  data.frame( a = 
  c("&AMP;&OACUTE;&SECT; 02937lkjfas;ldjf  &UACUTE;&#8902;&BULL; sdlfkjhhhh ;laskdjf&EXCL;"
  ,   "&AMP;&OACUTE;&SECT; 02937lkjfas;ldjf  &UACUTE;&#8902;&BULL; sdlfkjhhhh ;laskdjf&EXCL;")
  , b = c("swe"
  , "w3r"))

  expect_equal(magerman_replace_sgml_characters(test.df)
  , structure(list(a = c("&Ó§ 02937lkjfas;ldjf  Ú . sdlfkjhhhh ;laskdjf!", 
  "&Ó§ 02937lkjfas;ldjf  Ú . sdlfkjhhhh ;laskdjf!"), b = c("swe", 
  "w3r")), row.names = c(NA, -2L), class = c("data.table", "data.frame")))
#+END_SRC

*** magerman.replace.proprietary.characters
:PROPERTIES:
:ID:       org:zvfgib50bci0
:END:

Table 8: Proprietary character codes and their ASCII/ANSI equivalent
#+NAME: magerman_patterns_proprietary_characters
| proprietary.coded.character | replacement.character |
|-----------------------------+-----------------------|
| {UMLAUT OVER (A)}           | Ä                     |
| {UMLAUT OVER (E)}           | Ë                     |
| {UMLAUT OVER (O)}           | Ö                     |
| {UMLAUT OVER (U)}           | Ü                     |
| {UMLAUT OVER (N)}           | N                     |
| {UMLAUT OVER (R)}           | R                     |
| {UMLAUT OVER (Z)}           | Z                     |
| {ACUTE OVER (A)}            | Á                     |
| {ACUTE OVER (E)}            | É                     |
| {ACUTE OVER (T)}            | T                     |
| {ACUTE OVER (V)}            | V                     |
| {GRAVE OVER (B)}            | B                     |
| {GRAVE OVER (R)}            | R                     |
| {OVERSCORE (A)}             | A                     |
| {OVERSCORE (D)}             | D                     |
| {OVERSCORE (E)}             | E                     |
| {OVERSCORE (O)}             | O                     |
| {OVERSCORE (U)}             | U                     |
| {DOT OVER (A)}              | A                     |
| {DOT OVER (E)}              | E                     |
| {DOT OVER (U)}              | U                     |
| {HAECK OVER (C)}            | C                     |
| {HAECK OVER (S)}            | S                     |


#+call: make-rds-patterns-table(data = magerman_patterns_proprietary_characters, data.name = "magerman_patterns_proprietary_characters")


#+BEGIN_SRC R :tangle R/magerman.r

  ##' @eval attr(magerman_replace_proprietary_characters, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_replace_proprietary_characters <- make_alias(replace_patterns
                                                      , patterns = magerman_patterns_proprietary_characters)

  attr(magerman_replace_proprietary_characters, "@title") <-
      "Replaces proprietary characters"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_replace_proprietary_characters.r
  expect_equal("&AMP;&OACUTE;&SECT; {UMLAUT OVER (E)} sdlfkjhhhh ;laskdjf&EXCL;" |>
               magerman_replace_proprietary_characters()
             , "&AMP;&OACUTE;&SECT; Ë sdlfkjhhhh ;laskdjf&EXCL;")
#+END_SRC
*** magerman.replace.accented.characters
:PROPERTIES:
:ID:       org:u6lgib50bci0
:END:

Table 9: Accented characters and their unaccented equivalent
#+NAME: magerman_patterns_accented_characters
| character | unaccented.equivalent | code |
|-----------+-----------------------+------|
| À         | A                     |  192 |
| Á         | A                     |  193 |
| Â         | A                     |  194 |
| Ã         | A                     |  195 |
| Ä         | A                     |  196 |
| Å         | A                     |  197 |
| Æ         | AE                    |  198 |
| Ç         | C                     |  199 |
| È         | E                     |  200 |
| É         | E                     |  201 |
| Ê         | E                     |  202 |
| Ë         | E                     |  203 |
| Ì         | I                     |  204 |
| Í         | I                     |  205 |
| Î         | I                     |  206 |
| Ï         | I                     |  207 |
| Ñ         | N                     |  209 |
| Ò         | O                     |  210 |
| Ó         | O                     |  211 |
| Ô         | O                     |  212 |
| Õ         | O                     |  213 |
| Ö         | O                     |  214 |
| Ù         | U                     |  217 |
| Ú         | U                     |  218 |
| Û         | U                     |  219 |
| Ü         | U                     |  220 |
| Ý         | Y                     |  221 |
| Ÿ         | Y                     |  159 |

#+call: make-rds-patterns-table(data = magerman_patterns_accented_characters, data.name = "magerman_patterns_accented_characters")

#+BEGIN_SRC R :tangle R/magerman.r
  ##' @eval attr(magerman_replace_accented_characters, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_replace_accented_characters <- make_alias(replace_patterns
                                                   , patterns = magerman_patterns_accented_characters)

  attr(magerman_replace_accented_characters, "@title") <-
      "Replaces accented characters"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_replace_accented_characters.r

  expect_equal("ŠŒŽšœžŸ¥µÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýÿ" |>
               magerman_replace_accented_characters()
             , "ŠŒŽšœžY¥µAAAAAAAECEEEEIIIIÐNOOOOOØUUUUYßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýÿ")

  ## somewhat works:
  ## [1] "ŠŒŽšœžY¥µAAAAAAAECEEEEIIIIÐNOOOOOØUUUUYßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýÿ"

#+END_SRC

*** magerman.remove.special.characters
:PROPERTIES:
:ID:       org:lppgib50bci0
:END:

Here one probably need to add smart quotes as well...

#+BEGIN_SRC R :tangle R/magerman.r
  ##' @eval attr(magerman_remove_special_characters, "@title")
  ##' @description Removes everything that is not: A-Z; 0-9; “-“; “+”; “’”; “””; “#”;
  ##' “*”;“@”; “!”; “?”; “/”; “&”; “(“; “)”; “:”; “;”; “,”; “.”; “ “
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_remove_special_characters <- make_alias(replace_patterns
                                                 , patterns = "[^A-Z0-9\\-+'\"#*;@!?/&():;,. ]"
                                                 , patterns_type = "regex")

  attr(magerman_remove_special_characters, "@title") <-
      "Removes special characters"
#+END_SRC


#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_remove_special_characters.r
  expect_equal("LK \tD©𝍎 ၍\tF:'\";092834!@#$%^&*()_+-\n\t" |>
               magerman_remove_special_characters()
             , "LK D F:'\";092834!@#&*()+-")

#+END_SRC

** Punctuation
:PROPERTIES:
:ID:       org:jftgib50bci0
:END:
*** magerman.remove.double.spaces
:PROPERTIES:
:ID:       org:7zm5vw215ei0
:END:
#+BEGIN_SRC R :tangle R/magerman.r
  ##' @eval attr(magerman_remove_double_spaces, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_remove_double_spaces <- make_alias(replace_patterns
                                            , patterns = "\\s+"
                                            , replacements = " "
                                            , patterns_type = "regex")

  attr(magerman_remove_double_spaces, "@title") <-
      "Removes double spaces"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_remove_double_spaces.r
  expect_equal("  a   string with   many      douple    spaces      " |>
               magerman_remove_double_spaces()
             , " a string with many douple spaces ")
#+END_SRC

*** magerman.remove.double.quotation.marks.*
:PROPERTIES:
:ID:       org:4ir5vw215ei0
:END:
#+BEGIN_SRC R :tangle R/magerman.r
  ##' @eval attr(magerman_remove_double_quotation_marks_irregularities, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_remove_double_quotation_marks_irregularities <- make_alias(replace_patterns
                                                                    , patterns = c("^\"\"\\s(.*)\"$", "^\"(.*)\\s\"\"$")
                                                                    , replacements = c("\"\"$1\"", "\"$1\"\"")
                                                                    , patterns_type = "regex")

  attr(magerman_remove_double_quotation_marks_irregularities, "@title") <-
      "Removes double quotation irregularities"
#+END_SRC


#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_remove_double_quotation_marks_irregularities.r
    expect_equal(c("\"\" Merry  \"Cristmas\" Love\"\""
                 , "\"\"Merry \"\"Cristmas\"\" Love \"\"") |>
                 magerman_remove_double_quotation_marks_irregularities()
               , c("\"\"Merry  \"Cristmas\" Love\"\""
                 , "\"\"Merry \"\"Cristmas\"\" Love\"\""))
#+END_SRC

#+BEGIN_SRC R :tangle R/magerman.r
  ##' @eval attr(magerman_remove_double_quotation_marks_beginning_end, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_remove_double_quotation_marks_beginning_end <- make_alias(replace_patterns
                                                                   , patterns = "^\"\"((?:(?!\"\").)*)\"\"$"
                                                                   , replacements = "$1"
                                                                   , patterns_type = "regex")

  attr(magerman_remove_double_quotation_marks_beginning_end, "@title") <-
      "Removes double quotation irregularities"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_remove_double_quotation_marks_beginning_end.r
  expect_equal(c("\"\"Merry  \"Cristmas\" Love\"\"" # delete quotes here
               , "\"\"Merry \"\"Cristmas\"\" Love\"\""  # do not delete here
                 ) |>
               magerman_remove_double_quotation_marks_beginning_end()
             , c("Merry  \"Cristmas\" Love"
               , "\"\"Merry \"\"Cristmas\"\" Love\"\""))
#+END_SRC

*** magerman.remove.non.alphanumeric.*
:PROPERTIES:
:ID:       org:2az5vw215ei0
:END:
#+BEGIN_SRC R :tangle R/magerman.r
  ##' @eval attr(magerman_remove_non_alphanumeric_at_the_beginning, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_remove_non_alphanumeric_at_the_beginning <- make_alias(replace_patterns
                                                                , patterns = "^[^A-Z0-9\"@('#!*/]+"
                                                                , patterns_type = "regex")

  attr(magerman_remove_non_alphanumeric_at_the_beginning, "@title") <-
      "Removes non alphanumeric characters"


  ##' @eval attr(magerman_remove_non_alphanumeric_at_the_end, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_remove_non_alphanumeric_at_the_end <- make_alias(replace_patterns
                                                          , patterns = "[^A-Z0-9.'\")]+$"
                                                          , patterns_type = "regex")

  attr(magerman_remove_non_alphanumeric_at_the_end, "@title") <-
      "Removes non alphanumeric characters"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_remove_non_alphanumeric_at_the_end.r
  expect_equal(c("MSLab Co. :"
               , "MSLab Co.++"
               , "MSLab Co.*&^") |>
               magerman_remove_non_alphanumeric_at_the_end()
             , c("MSLab Co.", "MSLab Co.", "MSLab Co."))

  expect_equal(c("_MSLab Co."
               , "?MSLab Co."
               , ".-:MSLab Co.") |>
               magerman_remove_non_alphanumeric_at_the_beginning()
             , c("MSLab Co.", "MSLab Co.", "MSLab Co."))

#+END_SRC


*** magerman.replace.comma.period.irregularities.*
:PROPERTIES:
:ID:       org:5khizmx01ei0
:END:

Patterns used to identify comma and period irregularities.

| pattern      | table | procedure                                              |
|--------------+-------+--------------------------------------------------------|
| %,[! ]%      |    10 | Patterns with comma not followed by space              |
| % ,%         |    11 | Patterns with comma preceded by space                  |
| %[!A-Z0-9].% |    12 | Patterns with period not preceded by a letter or digit |


The function below is the generalization for replacement of the above punctuation irregularities. This procedure is not a part of Margerman procedures.

#+BEGIN_SRC R :tangle R/magerman.r

  ##' @eval attr(magerman_detect_comma_period_irregularities, "@title")
  ##' @inherit detect_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso detect_patterns
  ##'
  ##' @md
  ##' @export
  magerman_detect_comma_period_irregularities <- make_alias(detect_patterns
                                                          , patterns = c(",([^\\s])", "Patterns with comma not followed by space"
                                                                       , "\\s,", "Patterns with comma preceded by space"
                                                                       , "([^A-Za-z0-9])\\.", "Patterns with period not preceded by a letter or digit") |>
                                                                matrix(byrow = TRUE, ncol = 2) |>
                                                                data.frame()
                                                          , patterns_type = "regex"
                                                          , output_codes_col_name = "comma.period.irregularities.candidates")

  attr(magerman_detect_comma_period_irregularities, "@title") <-
      "Detects comma period irregularities"



  ##' @eval attr(magerman_replace_comma_period_irregularities_all, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_replace_comma_period_irregularities_all <- make_alias(replace_patterns
                                                               , patterns = c(",([^\\s])", ", $1"
                                                                            , "\\s,", ","
                                                                            , "([^A-Za-z0-9])\\.", "$1") |>
                                                                     matrix(byrow = TRUE, ncol = 2) |>
                                                                     data.frame()
                                                               , patterns_type = "regex")

  attr(magerman_replace_comma_period_irregularities_all, "@title") <-
      "Replaces comma period irregularities"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_replace_comma_period_irregularities_all.r
  expect_equal("A sentence with .irregular punctuation ,like commas , and periods ." |>
               magerman_replace_comma_period_irregularities_all()
             , "A sentence with irregular punctuation, like commas, and periods ")
      #+END_SRC

Table 10: Patterns with comma not followed by space
#+name: magerman_patterns_comma_followed_by_space
| PATTERN      | REPLACE WITH | type  |
|--------------+--------------+-------|
| ' CO.,LTD.'  | ' CO., LTD.' | fixed |
| ' CO.,LTD'   | ' CO., LTD'  | fixed |
| ' CO,. LTD.' | ' CO., LTD.' | fixed |
| ' CO.,INC.'  | ' CO., INC.' | fixed |
| ',LTD.'      | ', LTD.'     | fixed |
| ',LTD'       | ', LTD'      | ends  |
| ',INC.'      | ', INC.'     | fixed |
| ',INC'       | ', INC'      | ends  |
| ',LLC.'      | ', LLC.'     | fixed |
| ',LLC'       | ', LLC'      | ends  |
| ',L.L.C.'    | ', L.L.C.'   | fixed |
| ',S.A.R.L.'  | ', S.A.R.L.' | fixed |
| ',S.A.'      | ', S.A.'     | fixed |
| ' CO,LTD'    | ' CO, LTD'   | ends  |
| ' CO,KG.'    | ' CO, KG.'   | fixed |
| ' CO.,KG'    | ' CO., KG'   | ends  |
| ',GMBH.'     | ', GMBH.'    | fixed |
| ',GMBH'      | ', GMBH'     | ends  |
| ',PLC'       | ', PLC'      | ends  |
| ',S.R.L.'    | ', S.R.L.'   | fixed |

#+call: make-rds-patterns-table(data = magerman_patterns_comma_followed_by_space, data.name = "magerman_patterns_comma_followed_by_space")


Table 11: Patterns with comma preceded by space
#+name: magerman_patterns_comma_preceded_by_space
| PATTERN     | REPLACE WITH | type  |
|-------------+--------------+-------|
| ' , INC.'   | ', INC.'     | fixed |
| ' , LTD.'   | ', LTD.'     | fixed |
| ' , L.L.C.' | ', L.L.C.'   | fixed |
| ' , LLC'    | ', LLC'      | ends  |
| ' , S.P.A.' | ', S.P.A.'   | fixed |
| ' , S.A.'   | ', S.A.'     | fixed |

#+call: make-rds-patterns-table(data = magerman_patterns_comma_preceded_by_space, data.name = "magerman_patterns_comma_preceded_by_space")


Table 12: Patterns with period not preceded by a letter or digit
#+name: magerman_patterns_periods
| PATTERN              | REPLACE WITH        | type  |
|----------------------+---------------------+-------|
| ', INC,.'            | ', INC.'            | ends  |
| ' CORP,.'            | ' CORP.'            | ends  |
| ' CO,.'              | ' CO.'              | ends  |
| ' COMPANY,. LIMITED' | ' COMPANY, LIMITED' | ends  |
| ' INC..'             | ' INC.'             | fixed |
| ' S.A..'             | ' S.A.'             | fixed |
| ' PTY. .LIMITED'     | ' PTY. LIMITED'     | fixed |
| ' CO.. INC.'         | ' CO. INC.'         | fixed |
| ', INC..'            | ', INC.'            | ends  |
| ' CO.. LTD.'         | ' CO. LTD.'         | ends  |
| ' A/.S'              | ' A/S'              | fixed |
| ' N..V'              | ' N.V'              | ends  |
| ' LTD..'             | ' LTD.'             | ends  |
| ' CO., LTD,.'        | ' CO., LTD.'        | ends  |
| ' CO., LTD..'        | ' CO., LTD.'        | ends  |
| ' CO.., LTD.'        | ' CO., LTD.'        | ends  |
| ' P.L.C..'           | ' P.L.C.'           | ends  |

#+call: make-rds-patterns-table(data = magerman_patterns_periods, data.name = "magerman_patterns_periods")


#+BEGIN_SRC R :tangle R/magerman.r
  ##' @eval attr(magerman_replace_comma_period_irregularities, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_replace_comma_period_irregularities <- make_alias(replace_patterns
                                                           , patterns = list(magerman_patterns_comma_followed_by_space
                                                                           , magerman_patterns_comma_preceded_by_space
                                                                           , magerman_patterns_periods) |>
                                                                 data.table::rbindlist()
                                                           , patterns_type_col = 3)

  attr(magerman_replace_comma_period_irregularities, "@title") <-
      "Replaces comma period irregularities"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_replace_comma_period_irregularities.r
  expect_equal(c("MSlab ,INC. ,LTD"
               , "MSlab ,LTD Universe") |>
               magerman_replace_comma_period_irregularities()
               , c("MSlab, INC. , LTD", "MSlab ,LTD Universe"))
#+END_SRC

** Legal Form
:PROPERTIES:
:ID:       org:1p73p3j04cj0
:END:
"It has to be stressed that the objective is not to maximize the total number of matches (at the cost of introducing mismatches) but to minimize the number of mismatches given a reasonable number of matches."

They assumed that the last word in organizational name more likely represents leagan form (see p. 33)

As suggested by the authors all ending words in the dataset of organization names must be examened, especially those with hight occurence number.

Table 14: Last words identified as legal form indications
| LAST WORD (CLEANED) | LEGAL FORM                                       |
|---------------------+--------------------------------------------------|
| INC                 | Incorporated                                     |
| LTD                 | Limited                                          |
| LIMITED             | Limited                                          |
| GMBH                | Gesellschaft mit beschränkter Haftung            |
| SA                  | Société Anonyme, Sociedad Anónima, …             |
| KG                  | Kommanditgesellschaft                            |
| LLC                 | Limited Liability Company                        |
| AG                  | Aktiengesellschaft                               |
| SPA                 | Società Per Azioni                               |
| SRL                 | Società a Responsabilità Limitata                |
| BV                  | Besloten vennootscha                             |
| INCORPORATED        | Incorporated                                     |
| AS                  | Aktieselskab, Akciová Společnost                 |
| MBH                 | Gesellschaft mit beschränkter Haftung            |
| A                   | Société Anonyme, Società Per Azioni, …           |
| KAISHA              | Kabushiki Kaisha                                 |
| ANONYME             | Société Anonyme                                  |
| C                   | Pulic Limited Company, Limited Liability Company |
| L                   | Società a Responsabilità Limitata                |
| OY                  | Osakeyhtiö                                       |
| NV                  | Naamloze Vennootschap                            |
| AKTIENGESELLSCHAFT  | Aktiengesellschaft                               |
| PLC                 | Public Limited Company                           |
| SARL                | Société à responsabilité limitée                 |
| H                   | Gesellschaft mit beschränkter Haftung            |

*** Table: Legal form at the end
:PROPERTIES:
:ID:       org:34rhib50bci0
:END:

Table below represents all words at the end that can be "safely" removed or replaced. The order of replacement or detection is important.

Appendix 2: All search and replace statements for all legal forms to be removed at the end of a name
#+NAME: magerman_patterns_legal_form_end
| "remove"                                           | "replace"                    | "legal.form"       |
|----------------------------------------------------+------------------------------+--------------------|
| ' MFG. COMPANY INC.'                               | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. COMPANY, INC.'                              | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. CO. INC.'                                   | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. CO., INC.'                                  | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG CO., INC.'                                   | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG CO, INC'                                     | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. CO. INC'                                    | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG CO. INC.'                                    | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG., CO., INC.'                                 | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. CO., INC'                                   | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. CO, INC.'                                   | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. CO, INC'                                    | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ', CO., INC.'                                      | ' COMPANY'                   | 'INCORPORATED'     |
| ', CO. INC.'                                       | ' COMPANY'                   | 'INCORPORATED'     |
| ', CO., INC'                                       | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO., INC.'                                       | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO. INC.'                                        | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO., INC'                                        | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO, INC.'                                        | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO. INC'                                         | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO, INC'                                         | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO.. INC.'                                       | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO INC'                                          | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO. (INC.)'                                      | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO INC.'                                         | ' COMPANY'                   | 'INCORPORATED'     |
| ', MFG., INC.'                                     | ' MANUFACTURING'             | 'INCORPORATED'     |
| ', MFG. INC.'                                      | ' MANUFACTURING'             | 'INCORPORATED'     |
| ' MFG., INC.'                                      | ' MANUFACTURING'             | 'INCORPORATED'     |
| ' MFG. INC.'                                       | ' MANUFACTURING'             | 'INCORPORATED'     |
| ' MFG, INC.'                                       | ' MANUFACTURING'             | 'INCORPORATED'     |
| ' MFG., INC'                                       | ' MANUFACTURING'             | 'INCORPORATED'     |
| ' MFG INC.'                                        | ' MANUFACTURING'             | 'INCORPORATED'     |
| ', LTD., INC.'                                     | ''                           | 'INCORPORATED'     |
| ', LTD. INC.'                                      | ''                           | 'INCORPORATED'     |
| ' LTD., INC.'                                      | ''                           | 'INCORPORATED'     |
| ' LTD. INC.'                                       | ''                           | 'INCORPORATED'     |
| ' LTD, INC.'                                       | ''                           | 'INCORPORATED'     |
| ' LTD INC.'                                        | ''                           | 'INCORPORATED'     |
| ', INTL., INC.'                                    | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ', INT’L., INC.'                                   | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ', INT’L. INC.'                                    | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INTL., INC.'                                     | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INT’L., INC.'                                    | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INT’L. INC.'                                     | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INT’L, INC.'                                     | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INT’L INC.'                                      | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INTL, INC.'                                      | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INTL. INC.'                                      | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' CORP. INC.'                                      | ' CORPORATION'               | 'INCORPORATED'     |
| ' CORP., INC.'                                     | ' CORPORATION'               | 'INCORPORATED'     |
| ' CORP., INC'                                      | ' CORPORATION'               | 'INCORPORATED'     |
| ', INC.'                                           | ''                           | 'INCORPORATED'     |
| ', INC'                                            | ''                           | 'INCORPORATED'     |
| ', INC..'                                          | ''                           | 'INCORPORATED'     |
| '; INC.'                                           | ''                           | 'INCORPORATED'     |
| ', INC/'                                           | ''                           | 'INCORPORATED'     |
| ', IN.C'                                           | ''                           | 'INCORPORATED'     |
| ' INC.'                                            | ''                           | 'INCORPORATED'     |
| ' INC'                                             | ''                           | 'INCORPORATED'     |
| ', MFG. CO., LTD.'                                 | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ', MFG., CO., LTD.'                                | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' (MFG) CO., LTD.'                                 | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' (MFG.) CO., LTD.'                                | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG. CO., LTD.'                                  | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG. CO., LTD'                                   | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG CO., LTD.'                                   | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG CO., LTD'                                    | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG. CO. LTD.'                                   | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG., CO., LTD.'                                 | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG., CO. LTD.'                                  | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG, CO., LTD.'                                  | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG CO. LTD.'                                    | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG. CO. LTD'                                    | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG CO. LTD'                                     | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG., CO., LTD'                                  | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG. CO, LTD.'                                   | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG CO LTD'                                      | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG CO LTD.'                                     | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG. CO. LTD..'                                  | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' M.F.G. CO., LTD.'                                | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' INT. CO., LTD.'                                  | ' INTERNATIONAL COMPANY'     | 'LIMITED'          |
| ' INT. CO. LTD.'                                   | ' INTERNATIONAL COMPANY'     | 'LIMITED'          |
| ' INT., CO., LTD.'                                 | ' INTERNATIONAL COMPANY'     | 'LIMITED'          |
| ' INT’L CO., LTD.'                                 | ' INTERNATIONAL COMPANY'     | 'LIMITED'          |
| ' CO. CO., LTD.'                                   | ' COMPANY'                   | 'LIMITED'          |
| ' CO CO., LTD.'                                    | ' COMPANY'                   | 'LIMITED'          |
| ' CO., CO. LTD.'                                   | ' COMPANY'                   | 'LIMITED'          |
| ' CO., CO., LTD.'                                  | ' COMPANY'                   | 'LIMITED'          |
| ', CO., LTD.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ', CO. LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ', CO., LTD'                                       | ' COMPANY'                   | 'LIMITED'          |
| ', CO, LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ', CO. LTD'                                        | ' COMPANY'                   | 'LIMITED'          |
| ', CO LTD.'                                        | ' COMPANY'                   | 'LIMITED'          |
| ', CO, LTD'                                        | ' COMPANY'                   | 'LIMITED'          |
| ', CO.. LTD.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO. LTD.'                                        | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LTD'                                        | ' COMPANY'                   | 'LIMITED'          |
| ' CO, LTD.'                                        | ' COMPANY'                   | 'LIMITED'          |
| ' CO. LTD'                                         | ' COMPANY'                   | 'LIMITED'          |
| ' CO LTD.'                                         | ' COMPANY'                   | 'LIMITED'          |
| ' CO, LTD'                                         | ' COMPANY'                   | 'LIMITED'          |
| ' CO LTD'                                          | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LT.D.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO.. LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO. L.T.D.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO; LTD.'                                        | ' COMPANY'                   | 'LIMITED'          |
| ' CO., L.T.D.'                                     | ' COMPANY'                   | 'LIMITED'          |
| ' CO,, LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO.., LTD.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO.?, LTD.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO; LTD'                                         | ' COMPANY'                   | 'LIMITED'          |
| ' CO:, LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LTD..'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO.; LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO,, LTD'                                        | ' COMPANY'                   | 'LIMITED'          |
| ' CO.; LTD'                                        | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LTD,.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LT.D'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO.., LTD'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO,., LTD.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO: LTD'                                         | ' COMPANY'                   | 'LIMITED'          |
| ' CO. PTY. LTD.'                                   | ' COMPANY'                   | 'LIMITED'          |
| ' CO. PTY LTD'                                     | ' COMPANY'                   | 'LIMITED'          |
| ' CO. PTY LTD.'                                    | ' COMPANY'                   | 'LIMITED'          |
| ' CO PTY LTD'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO PTY LTD.'                                     | ' COMPANY'                   | 'LIMITED'          |
| ' CO., PTY. LTD.'                                  | ' COMPANY'                   | 'LIMITED'          |
| ' CO., PTY., LTD.'                                 | ' COMPANY'                   | 'LIMITED'          |
| ' CO., PTY LTD.'                                   | ' COMPANY'                   | 'LIMITED'          |
| ' (INT’L) PTY. LTD.'                               | ' (INTERNATIONAL)'           | 'LIMITED'          |
| ' (INTL.) PTY. LTD.'                               | ' (INTERNATIONAL)'           | 'LIMITED'          |
| ' MFG. PTY. LTD.'                                  | ' MANUFACTURING'             | 'LIMITED'          |
| ' MFG. PTY. LTD'                                   | ' MANUFACTURING'             | 'LIMITED'          |
| ' (QLD) PTY. LTD'                                  | ''                           | 'LIMITED'          |
| ' (QLD.) PTY. LTD.'                                | ''                           | 'LIMITED'          |
| ' QLD PTY LTD.'                                    | ''                           | 'LIMITED'          |
| ' (QLD) PTY LTD'                                   | ''                           | 'LIMITED'          |
| ' (QLD) PTY. LTD.'                                 | ''                           | 'LIMITED'          |
| ' (QLD) PTY LTD.'                                  | ''                           | 'LIMITED'          |
| ' (VIC) PTY., LTD.'                                | ''                           | 'LIMITED'          |
| ' (VIC) PTY LTD.'                                  | ''                           | 'LIMITED'          |
| ' (VIC) PTY. LTD.'                                 | ''                           | 'LIMITED'          |
| ' (VIC) PTY LTD'                                   | ''                           | 'LIMITED'          |
| ' (VIC.) PTY. LTD.'                                | ''                           | 'LIMITED'          |
| ' (S.A.) PTY LTD'                                  | ''                           | 'LIMITED'          |
| ' (SA) PTY LTD'                                    | ''                           | 'LIMITED'          |
| ' S.A. (PTY) LTD.'                                 | ''                           | 'LIMITED'          |
| ', PTY. LTD.'                                      | ''                           | 'LIMITED'          |
| ', PTY LTD'                                        | ''                           | 'LIMITED'          |
| ', PTY., LTD.'                                     | ''                           | 'LIMITED'          |
| ', PTY LTD.'                                       | ''                           | 'LIMITED'          |
| ', PTY, LTD.'                                      | ''                           | 'LIMITED'          |
| ', PTY, LTD'                                       | ''                           | 'LIMITED'          |
| ' PTY. LTD.'                                       | ''                           | 'LIMITED'          |
| ' PTY LTD'                                         | ''                           | 'LIMITED'          |
| ' PTY., LTD.'                                      | ''                           | 'LIMITED'          |
| ' PTY LTD.'                                        | ''                           | 'LIMITED'          |
| ' PTY, LTD.'                                       | ''                           | 'LIMITED'          |
| ' PTY, LTD'                                        | ''                           | 'LIMITED'          |
| ' PTY. LTD'                                        | ''                           | 'LIMITED'          |
| ' (PTY) LTD'                                       | ''                           | 'LIMITED'          |
| ' (PTY) LTD.'                                      | ''                           | 'LIMITED'          |
| ' PTY., LTD'                                       | ''                           | 'LIMITED'          |
| ' (PTY.) LTD.'                                     | ''                           | 'LIMITED'          |
| ' PTY: LTD.'                                       | ''                           | 'LIMITED'          |
| ' (PTY.) LTD'                                      | ''                           | 'LIMITED'          |
| ' (PTY), LTD.'                                     | ''                           | 'LIMITED'          |
| ' CO. PTE. LTD.'                                   | ' COMPANY'                   | 'LIMITED'          |
| ' CO. (PTE) LTD.'                                  | ' COMPANY'                   | 'LIMITED'          |
| ' CO. PTE LTD'                                     | ' COMPANY'                   | 'LIMITED'          |
| ' CO., PTE. LTD.'                                  | ' COMPANY'                   | 'LIMITED'          |
| ' (S) PTE LTD.'                                    | ''                           | 'LIMITED'          |
| ' (S) PTE LTD'                                     | ''                           | 'LIMITED'          |
| ' (S) PTE. LTD.'                                   | ''                           | 'LIMITED'          |
| ' (S), PTE., LTD.'                                 | ''                           | 'LIMITED'          |
| ', PTE., LTD.'                                     | ''                           | 'LIMITED'          |
| ', PTE. LTD.'                                      | ''                           | 'LIMITED'          |
| ', PTE LTD'                                        | ''                           | 'LIMITED'          |
| ', PTE LTD.'                                       | ''                           | 'LIMITED'          |
| ', PTE, LTD.'                                      | ''                           | 'LIMITED'          |
| ' PTE., LTD.'                                      | ''                           | 'LIMITED'          |
| ' PTE. LTD.'                                       | ''                           | 'LIMITED'          |
| ' PTE LTD'                                         | ''                           | 'LIMITED'          |
| ' PTE LTD.'                                        | ''                           | 'LIMITED'          |
| ' PTE, LTD.'                                       | ''                           | 'LIMITED'          |
| ' PTE. LTD'                                        | ''                           | 'LIMITED'          |
| ' (PTE) LTD.'                                      | ''                           | 'LIMITED'          |
| ' (PTE) LTD'                                       | ''                           | 'LIMITED'          |
| ' PTE, LTD'                                        | ''                           | 'LIMITED'          |
| ', CORP. LTD.'                                     | ' CORPORATION'               | 'LIMITED'          |
| ' CORP. LTD.'                                      | ' CORPORATION'               | 'LIMITED'          |
| ' CORP., LTD.'                                     | ' CORPORATION'               | 'LIMITED'          |
| ' CORP, LTD.'                                      | ' CORPORATION'               | 'LIMITED'          |
| ' CORP., LTD'                                      | ' CORPORATION'               | 'LIMITED'          |
| ' CORP. LTD'                                       | ' CORPORATION'               | 'LIMITED'          |
| ' MFG LTD.'                                        | ' MANUFACTURING'             | 'LIMITED'          |
| ' MFG., LTD.'                                      | ' MANUFACTURING'             | 'LIMITED'          |
| ' MFG. LTD.'                                       | ' MANUFACTURING'             | 'LIMITED'          |
| ' MFG., LTD'                                       | ' MANUFACTURING'             | 'LIMITED'          |
| ' CO., INC. LTD.'                                  | ' COMPANY'                   | 'LIMITED'          |
| ' CO., INC., LTD.'                                 | ' COMPANY'                   | 'LIMITED'          |
| ', INC., LTD'                                      | ''                           | 'LIMITED'          |
| ', INC., LTD.'                                     | ''                           | 'LIMITED'          |
| ', INC. LTD.'                                      | ''                           | 'LIMITED'          |
| ' INC., LTD'                                       | ''                           | 'LIMITED'          |
| ' INC., LTD.'                                      | ''                           | 'LIMITED'          |
| ' INC. LTD.'                                       | ''                           | 'LIMITED'          |
| ' INC. LTD'                                        | ''                           | 'LIMITED'          |
| ' INC, LTD.'                                       | ''                           | 'LIMITED'          |
| ' INT’L LTD.'                                      | ' INTERNATIONAL'             | 'LIMITED'          |
| ' INT’L. LTD.'                                     | ' INTERNATIONAL'             | 'LIMITED'          |
| ' INT’L., LTD.'                                    | ' INTERNATIONAL'             | 'LIMITED'          |
| ' INT''L LTD.'                                     | ' INTERNATIONAL'             | 'LIMITED'          |
| ' INTL. LTD.'                                      | ' INTERNATIONAL'             | 'LIMITED'          |
| ' INT., LTD.'                                      | ' INTERNATIONAL'             | 'LIMITED'          |
| ' INT. LTD.'                                       | ' INTERNATIONAL'             | 'LIMITED'          |
| ' KABUSHIKI KAISHA, LTD.'                          | ''                           | 'LIMITED'          |
| ', LTD.'                                           | ''                           | 'LIMITED'          |
| ', LTD'                                            | ''                           | 'LIMITED'          |
| ', LTD..'                                          | ''                           | 'LIMITED'          |
| ', L.T.D.'                                         | ''                           | 'LIMITED'          |
| ' (LTD.)'                                          | ''                           | 'LIMITED'          |
| ' LTD.'                                            | ''                           | 'LIMITED'          |
| ' LTD'                                             | ''                           | 'LIMITED'          |
| ' LTD..'                                           | ''                           | 'LIMITED'          |
| ' L.T.D.'                                          | ''                           | 'LIMITED'          |
| ' (LTD)'                                           | ''                           | 'LIMITED'          |
| ', LTD/'                                           | ''                           | 'LIMITED'          |
| ' & C. S.P.A.'                                     | ' & COMPANY'                 | 'SPA'              |
| ' & C. SPA'                                        | ' & COMPANY'                 | 'SPA'              |
| ' & C SPA'                                         | ' & COMPANY'                 | 'SPA'              |
| ' & C., S.P.A.'                                    | ' & COMPANY'                 | 'SPA'              |
| ' & C. S.P.A'                                      | ' & COMPANY'                 | 'SPA'              |
| ' & C. -S.P.A.'                                    | ' & COMPANY'                 | 'SPA'              |
| ' CO. S.P.A.'                                      | ' COMPANY'                   | 'SPA'              |
| ' CO. SPA'                                         | ' COMPANY'                   | 'SPA'              |
| ' CO., S.P.A.'                                     | ' COMPANY'                   | 'SPA'              |
| ', S.P.A.'                                         | ''                           | 'SPA'              |
| ', SPA'                                            | ''                           | 'SPA'              |
| ', S.P.A'                                          | ''                           | 'SPA'              |
| ' - S.P.A'                                         | ''                           | 'SPA'              |
| ' -S.P.A.'                                         | ''                           | 'SPA'              |
| ', SPA.'                                           | ''                           | 'SPA'              |
| ' S.P.A.'                                          | ''                           | 'SPA'              |
| ' SPA'                                             | ''                           | 'SPA'              |
| ' S.P.A'                                           | ''                           | 'SPA'              |
| ' SPA.'                                            | ''                           | 'SPA'              |
| ' S.P.A..'                                         | ''                           | 'SPA'              |
| ' S.PA.'                                           | ''                           | 'SPA'              |
| ' S-P.A.'                                          | ''                           | 'SPA'              |
| ' (S.P.A.)'                                        | ''                           | 'SPA'              |
| ' SP.A.'                                           | ''                           | 'SPA'              |
| ' SPA’'                                            | ''                           | 'SPA'              |
| ' & C. S.R.L.'                                     | ' & COMPANY'                 | 'SRL'              |
| ' & C. SRL'                                        | ' & COMPANY'                 | 'SRL'              |
| ' & C. S.R.L'                                      | ' & COMPANY'                 | 'SRL'              |
| ' E C. S.R.L.'                                     | ' & COMPANY'                 | 'SRL'              |
| ' & C S.R.L.'                                      | ' & COMPANY'                 | 'SRL'              |
| ' CO. S.R.L.'                                      | ' COMPANY'                   | 'SRL'              |
| ' LTD. SRL'                                        | ''                           | 'SRL'              |
| ' L.T.D. S.R.L.'                                   | ''                           | 'SRL'              |
| ', S.R.L.'                                         | ''                           | 'SRL'              |
| ' - S.R.L.'                                        | ''                           | 'SRL'              |
| ', S.R.L'                                          | ''                           | 'SRL'              |
| ', SRL'                                            | ''                           | 'SRL'              |
| ', SRL.'                                           | ''                           | 'SRL'              |
| ', S.RL'                                           | ''                           | 'SRL'              |
| ' S.R.L.'                                          | ''                           | 'SRL'              |
| ' S.R.L'                                           | ''                           | 'SRL'              |
| ' SRL'                                             | ''                           | 'SRL'              |
| ' SRL.'                                            | ''                           | 'SRL'              |
| ' S.RL'                                            | ''                           | 'SRL'              |
| ' -S.R.L.'                                         | ''                           | 'SRL'              |
| ' .S.R.L.'                                         | ''                           | 'SRL'              |
| ' SR.L.'                                           | ''                           | 'SRL'              |
| ' S.RL.'                                           | ''                           | 'SRL'              |
| ' S.ß.R.L.'                                        | ''                           | 'S.ß.R.L.'         |
| ' S.ß.R.L'                                         | ''                           | 'S.ß.R.L.'         |
| ' CO. PTY. LIMITED'                                | ' COMPANY'                   | 'LIMITED'          |
| ' CO. PTY LIMITED'                                 | ' COMPANY'                   | 'LIMITED'          |
| ' CO PTY LIMITED'                                  | ' COMPANY'                   | 'LIMITED'          |
| ' CO. (PTY) LIMITED'                               | ' COMPANY'                   | 'LIMITED'          |
| ', PTY. LIMITED'                                   | ''                           | 'LIMITED'          |
| ', PTY, LIMITED'                                   | ''                           | 'LIMITED'          |
| ' PTY. LIMITED'                                    | ''                           | 'LIMITED'          |
| ' PTY, LIMITED'                                    | ''                           | 'LIMITED'          |
| ' PTY LIMITED'                                     | ''                           | 'LIMITED'          |
| ' (PTY) LIMITED'                                   | ''                           | 'LIMITED'          |
| ' PTY., LIMITED'                                   | ''                           | 'LIMITED'          |
| ' PTY. LIMITED.'                                   | ''                           | 'LIMITED'          |
| ' PTY. .LIMITED'                                   | ''                           | 'LIMITED'          |
| ' (PTY.) LIMITED'                                  | ''                           | 'LIMITED'          |
| ' CO., LIMITED'                                    | ' COMPANY'                   | 'LIMITED'          |
| ' CO. LIMITED'                                     | ' COMPANY'                   | 'LIMITED'          |
| ' CO. LIMITED.'                                    | ' COMPANY'                   | 'LIMITED'          |
| ' CO LIMITED'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO, LIMITED'                                     | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LIMITED.'                                   | ' COMPANY'                   | 'LIMITED'          |
| ' CO. (NZ) LIMITED'                                | ' COMPANY'                   | 'LIMITED'          |
| ' (NZ) LIMITED'                                    | ''                           | 'LIMITED'          |
| ' (N.Z.) LIMITED'                                  | ''                           | 'LIMITED'          |
| ' NZ LIMITED'                                      | ''                           | 'LIMITED'          |
| ' (H.K.) LIMITED'                                  | ''                           | 'LIMITED'          |
| ' (H.K) LIMITED'                                   | ''                           | 'LIMITED'          |
| ' (HK) LIMITED'                                    | ''                           | 'LIMITED'          |
| ' HK LIMITED'                                      | ''                           | 'LIMITED'          |
| ' (IP) LIMITED'                                    | ''                           | 'LIMITED'          |
| ' (I.P.) LIMITED'                                  | ''                           | 'LIMITED'          |
| ' I.P. LIMITED'                                    | ''                           | 'LIMITED'          |
| ' IP LIMITED'                                      | ''                           | 'LIMITED'          |
| ' ( IP) LIMITED'                                   | ''                           | 'LIMITED'          |
| ' (I.P) LIMITED'                                   | ''                           | 'LIMITED'          |
| ' (PTE) LIMITED'                                   | ''                           | 'LIMITED'          |
| ' PTE LIMITED'                                     | ''                           | 'LIMITED'          |
| ' PTE. LIMITED'                                    | ''                           | 'LIMITED'          |
| ' PTE, LIMITED'                                    | ''                           | 'LIMITED'          |
| ' (BVI) LIMITED'                                   | ''                           | 'LIMITED'          |
| ' (B.V.I.) LIMITED'                                | ''                           | 'LIMITED'          |
| ' (BVIØ) LIMITED'                                  | ''                           | 'LIMITED'          |
| ' (N.I.) LIMITED'                                  | ''                           | 'LIMITED'          |
| ' (NI) LIMITED'                                    | ''                           | 'LIMITED'          |
| ' NI LIMITED'                                      | ''                           | 'LIMITED'          |
| ', LIMITED.'                                       | ''                           | 'LIMITED'          |
| ', LIMITED'                                        | ''                           | 'LIMITED'          |
| ' LIMITED.'                                        | ''                           | 'LIMITED'          |
| ' LIMITED'                                         | ''                           | 'LIMITED'          |
| ' (PROPRIETARY LIMITED)'                           | ''                           | 'LIMITED'          |
| '(PROPRIETARY LIMITED)'                            | ''                           | 'LIMITED'          |
| ' CIE, S. A.'                                      | ' COMPAGNIE'                 | 'SA'               |
| ' CIE S. A.'                                       | ' COMPAGNIE'                 | 'SA'               |
| ' FRANCE S. A.'                                    | ' FRANCE'                    | 'SA'               |
| ' (FRANCE) S. A.'                                  | ' (FRANCE)'                  | 'SA'               |
| ' S. P. A.'                                        | ''                           | 'SPA'              |
| ' S P A'                                           | ''                           | 'SPA'              |
| ' U. CO. GMBH'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' UND CO. GMBH'                                    | ' & COMPANY'                 | 'GMBH'             |
| ' CO. GMBH'                                        | ' COMPANY'                   | 'GMBH'             |
| ' + CO., GMBH'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' + CO GMBH'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' CO., GMBH'                                       | ' COMPANY'                   | 'GMBH'             |
| ' CO. (GMBH)'                                      | ' COMPANY'                   | 'GMBH'             |
| ' CO., (GMBH)'                                     | ' COMPANY'                   | 'GMBH'             |
| ' CO GMBH'                                         | ' COMPANY'                   | 'GMBH'             |
| ' &CO. GMBH'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' CO, GMBH'                                        | ' COMPANY'                   | 'GMBH'             |
| ' CIE. GMBH'                                       | ' COMPANY'                   | 'GMBH'             |
| ' CIE, GMBH'                                       | ' COMPANY'                   | 'GMBH'             |
| ' CIE GMBH'                                        | ' COMPANY'                   | 'GMBH'             |
| ', GMBH'                                           | ''                           | 'GMBH'             |
| ', GMBH.'                                          | ''                           | 'GMBH'             |
| ' GMBH'                                            | ''                           | 'GMBH'             |
| ' G.M.B.H.'                                        | ''                           | 'GMBH'             |
| ' GMBH.'                                           | ''                           | 'GMBH'             |
| ' -GMBH'                                           | ''                           | 'GMBH'             |
| ' GESELLSCHAFT MIT BE- SCHRAENKTER HAFTUNG (GMBH)' | ''                           | 'GMBH'             |
| ' (GMBH)'                                          | ''                           | 'GMBH'             |
| ' G.M.B.H'                                         | ''                           | 'GMBH'             |
| ' G.MBH'                                           | ''                           | 'GMBH'             |
| ' G.M.BH'                                          | ''                           | 'GMBH'             |
| ' MFG. CORPORATION'                                | ' MANUFACTURING CORPORATION' | 'GMBH'             |
| ' ET CIE. S.A.'                                    | ' & COMPAGNIE'               | 'SA'               |
| ' ET CIE, S.A.'                                    | ' & COMPAGNIE'               | 'SA'               |
| ' ET CIE (SA)'                                     | ' & COMPAGNIE'               | 'SA'               |
| ' ET CIE S.A.'                                     | ' & COMPAGNIE'               | 'SA'               |
| ' ET. CIE S.A.'                                    | ' & COMPAGNIE'               | 'SA'               |
| ' ET CIE., S.A.'                                   | ' & COMPAGNIE'               | 'SA'               |
| ' CIE. S.A.'                                       | ' COMPAGNIE'                 | 'SA'               |
| ' CIE (S.A.)'                                      | ' COMPAGNIE'                 | 'SA'               |
| ' CIE S.A.'                                        | ' COMPAGNIE'                 | 'SA'               |
| ' CIE, S.A.'                                       | ' COMPAGNIE'                 | 'SA'               |
| ' CIE, SA'                                         | ' COMPAGNIE'                 | 'SA'               |
| ' CI.E. SA'                                        | ' COMPAGNIE'                 | 'SA'               |
| ' CIE SA'                                          | ' COMPAGNIE'                 | 'SA'               |
| ' ET CO. S.A.'                                     | ' & COMPANY'                 | 'SA'               |
| ' ET CO S.A.'                                      | ' & COMPANY'                 | 'SA'               |
| ' ET CO. SA'                                       | ' & COMPANY'                 | 'SA'               |
| ' CO., S.A.'                                       | ' COMPANY'                   | 'SA'               |
| ' CO. S.A.'                                        | ' COMPANY'                   | 'SA'               |
| ' CO SA'                                           | ' COMPANY'                   | 'SA'               |
| ' CO. SA'                                          | ' COMPANY'                   | 'SA'               |
| ' Y CIA., S.A.'                                    | ' & COMPANIA'                | 'SA'               |
| ' Y CIA. S.A.'                                     | ' & COMPANIA'                | 'SA'               |
| ' Y CIA S.A.'                                      | ' & COMPANIA'                | 'SA'               |
| ' Y CIA, S.A.'                                     | ' & COMPANIA'                | 'SA'               |
| ' CIA, S.A.'                                       | ' COMPANIA'                  | 'SA'               |
| ' CIA. S.A.'                                       | ' COMPANIA'                  | 'SA'               |
| ' CIA., S.A.'                                      | ' COMPANIA'                  | 'SA'               |
| ' CIA S.A.'                                        | ' COMPANIA'                  | 'SA'               |
| ', INC. S.A.'                                      | ''                           | 'SA'               |
| ', INC., SA.'                                      | ''                           | 'SA'               |
| ' INC. S.A.'                                       | ''                           | 'SA'               |
| ' INC., SA.'                                       | ''                           | 'SA'               |
| ' INC., S.A.'                                      | ''                           | 'SA'               |
| ' MFG. CY, S.A.'                                   | ' MANUFACTURING COMPANY'     | 'SA'               |
| ' CY, S.A.'                                        | ' COMPANY'                   | 'SA'               |
| ' MANUFACTURIN CY, S.A.'                           | ' MANUFACTURING COMPANY'     | 'SA'               |
| ' CY S.A.'                                         | ' COMPANY'                   | 'SA'               |
| ', S.A.'                                           | ''                           | 'SA'               |
| ', SA'                                             | ''                           | 'SA'               |
| ', S.A'                                            | ''                           | 'SA'               |
| ', S,A.'                                           | ''                           | 'SA'               |
| ', SA.'                                            | ''                           | 'SA'               |
| ' S.A.'                                            | ''                           | 'SA'               |
| ' SA'                                              | ''                           | 'SA'               |
| ' S.A'                                             | ''                           | 'SA'               |
| ' S,A.'                                            | ''                           | 'SA'               |
| ' SA.'                                             | ''                           | 'SA'               |
| ' (S.A.)'                                          | ''                           | 'SA'               |
| ' (SA)'                                            | ''                           | 'SA'               |
| ' (S.A)'                                           | ''                           | 'SA'               |
| ' S..A.'                                           | ''                           | 'SA'               |
| ' S.A..'                                           | ''                           | 'SA'               |
| ' -SA'                                             | ''                           | 'SA'               |
| ' S,A'                                             | ''                           | 'SA'               |
| ' -S.A.'                                           | ''                           | 'SA'               |
| ' .S.A'                                            | ''                           | 'SA'               |
| ' S-A.'                                            | ''                           | 'SA'               |
| ' S/A'                                             | ''                           | 'SA'               |
| ' S/A.'                                            | ''                           | 'SA'               |
| ' E C.'                                            | ' & COMPANY'                 | ''                 |
| ' P. L. C.'                                        | ''                           | 'PLC'              |
| ' P L C'                                           | ''                           | 'PLC'              |
| ' P. L. C'                                         | ''                           | 'PLC'              |
| ', L. L. C.'                                       | ''                           | 'LLC'              |
| ', L L C'                                          | ''                           | 'LLC'              |
| ' L L C.'                                          | ''                           | 'LLC'              |
| ' L L C'                                           | ''                           | 'LLC'              |
| ' & C.'                                            | ' COMPANY'                   | ''                 |
| ' & C'                                             | ' COMPANY'                   | ''                 |
| ' S. R. L.'                                        | ''                           | 'SRL'              |
| ' S.R L.'                                          | ''                           | 'SRL'              |
| ' S.R. L.'                                         | ''                           | 'SRL'              |
| ' GES. M. B. H.'                                   | ''                           | 'GMBH'             |
| ' GESELLSCHAFT M. B. H.'                           | ''                           | 'GMBH'             |
| ' CO. PLC'                                         | ' COMPANY'                   | 'PLC'              |
| ' CO., PLC'                                        | ' COMPANY'                   | 'PLC'              |
| ' CO., P.L.C.'                                     | ' COMPANY'                   | 'PLC'              |
| ' CO. P.L.C.'                                      | ' COMPANY'                   | 'PLC'              |
| ', PLC'                                            | ''                           | 'PLC'              |
| ', PLC.'                                           | ''                           | 'PLC'              |
| ', P.L.C.'                                         | ''                           | 'PLC'              |
| ', P.L.C'                                          | ''                           | 'PLC'              |
| ' PLC'                                             | ''                           | 'PLC'              |
| ' PLC.'                                            | ''                           | 'PLC'              |
| ' P.L.C.'                                          | ''                           | 'PLC'              |
| ' P.L.C'                                           | ''                           | 'PLC'              |
| ' PL.C'                                            | ''                           | 'PLC'              |
| ' P.L.C..'                                         | ''                           | 'PLC'              |
| ' (PLC)'                                           | ''                           | 'PLC'              |
| ' ET CIE (SARL)'                                   | ' & COMPAGNIE'               | 'SARL'             |
| ' CIE, SARL'                                       | ' COMPAGNIE'                 | 'SARL'             |
| ' CIE S.A.R.L.'                                    | ' COMPAGNIE'                 | 'SARL'             |
| ' CIE SARL'                                        | ' COMPAGNIE'                 | 'SARL'             |
| ', SARL'                                           | ''                           | 'SARL'             |
| ', S.A.R.L.'                                       | ''                           | 'SARL'             |
| ', (SARL)'                                         | ''                           | 'SARL'             |
| ', S.A.R.L'                                        | ''                           | 'SARL'             |
| ' SARL'                                            | ''                           | 'SARL'             |
| ' S.A.R.L.'                                        | ''                           | 'SARL'             |
| ' (SARL)'                                          | ''                           | 'SARL'             |
| ' S.A.R.L'                                         | ''                           | 'SARL'             |
| ' (S.A.R.L.)'                                      | ''                           | 'SARL'             |
| ' (S.A.R.L)'                                       | ''                           | 'SARL'             |
| ' SARL.'                                           | ''                           | 'SARL'             |
| ' S.A.R:L'                                         | ''                           | 'SARL'             |
| ' S.AR.L.'                                         | ''                           | 'SARL'             |
| ' -SARL'                                           | ''                           | 'SARL'             |
| ' ( SARL)'                                         | ''                           | 'SARL'             |
| ' (SARL.)'                                         | ''                           | 'SARL'             |
| ' + CO AKTIENGESELL-SCHAFT'                        | ' & COMPANY'                 | 'AG'               |
| ' + CO. AKTIENGESELL-SCHAFT'                       | ' & COMPANY'                 | 'AG'               |
| ' CO. AKTIENGESELLSCHAFT'                          | ' COMPANY'                   | 'AG'               |
| ' CO AKTIENGESELLSCHAFT'                           | ' COMPANY'                   | 'AG'               |
| 'CO.,AKTIENGESELL-SCHAFT'                          | ' COMPANY'                   | 'AG'               |
| 'A.G.AKTIENGESELL-SCHAFT'                          | ''                           | 'AG'               |
| ' AG AKTIENGESELLSCHAFT'                           | ''                           | 'AG'               |
| 'CIE.AKTIENGESELL-SCHAFT'                          | ' COMPAGNIE'                 | 'AG'               |
| ' CIE AKTIENGESELLSCHAFT'                          | ' COMPAGNIE'                 | 'AG'               |
| ', AKTIENGESELLSCHAFT'                             | ''                           | 'AG'               |
| ' AKTIENGESELLSCHAFT'                              | ''                           | 'AG'               |
| ' AKTIENGESELL-SCHAFT'                             | ''                           | 'AG'               |
| ' AKTIEN-GESELLSCHAFT'                             | ''                           | 'AG'               |
| ' EN CO. N.V.'                                     | ' & COMPANY'                 | 'NV'               |
| ' EN CO. NV'                                       | ' & COMPANY'                 | 'NV'               |
| ' CO. N.V.'                                        | ' COMPANY'                   | 'NV'               |
| ' CO N.V.'                                         | ' COMPANY'                   | 'NV'               |
| ' N.A. N.V.'                                       | ''                           | 'NV'               |
| ' (NA) N.V.'                                       | ''                           | 'NV'               |
| ' (NA) NV'                                         | ''                           | 'NV'               |
| ' (N.A.) N.V.'                                     | ''                           | 'NV'               |
| ', INC. N.V.'                                      | ''                           | 'NV'               |
| ', INC. (NV)'                                      | ''                           | 'NV'               |
| ' INC. NV.'                                        | ''                           | 'NV'               |
| ' INC. N.V.'                                       | ''                           | 'NV'               |
| ' CORP. N.V.'                                      | ' CORPORATION'               | 'NV'               |
| ', N.V.'                                           | ''                           | 'NV'               |
| ', NV'                                             | ''                           | 'NV'               |
| ', N.V'                                            | ''                           | 'NV'               |
| ', NV.'                                            | ''                           | 'NV'               |
| ', N..V.'                                          | ''                           | 'NV'               |
| ' N.V.'                                            | ''                           | 'NV'               |
| ' NV'                                              | ''                           | 'NV'               |
| ' N.V'                                             | ''                           | 'NV'               |
| ' NV.'                                             | ''                           | 'NV'               |
| ' N..V'                                            | ''                           | 'NV'               |
| ' N,V.'                                            | ''                           | 'NV'               |
| ', LTD. OY'                                        | ''                           | 'OY'               |
| ' LTD. OY'                                         | ''                           | 'OY'               |
| ' LTD OY'                                          | ''                           | 'OY'               |
| ' LTD. OY.'                                        | ''                           | 'OY'               |
| ' LTD., OY'                                        | ''                           | 'OY'               |
| ' INC. OY'                                         | ''                           | 'OY'               |
| ', OY.'                                            | ''                           | 'OY'               |
| ', OY'                                             | ''                           | 'OY'               |
| ', O.Y.'                                           | ''                           | 'OY'               |
| ' O.Y.'                                            | ''                           | 'OY'               |
| ' OY.'                                             | ''                           | 'OY'               |
| ' OY'                                              | ''                           | 'OY'               |
| ' S.A. SOCIETE ANONYME'                            | ''                           | 'SA'               |
| ' SA SOCIETE ANONYME'                              | ''                           | 'SA'               |
| ', S.A. (SOCIETE ANONYME)'                         | ''                           | 'SA'               |
| ' S.A. (SOCIETE ANONYME)'                          | ''                           | 'SA'               |
| ' SA (SOCIETE ANONYME)'                            | ''                           | 'SA'               |
| ' S.A., SOCIETE ANONYME'                           | ''                           | 'SA'               |
| ' SA, SOCIETE ANONYME'                             | ''                           | 'SA'               |
| ' SA, (SOCIETE ANONYME)'                           | ''                           | 'SA'               |
| ' ET CIE (SOCIETE ANONY-ME)'                       | ' & COMPAGNIE'               | 'SA'               |
| ' ET CIE SOCIETE ANONYME'                          | ' & COMPAGNIE'               | 'SA'               |
| ' ET CIE, SOCIETE ANONYME'                         | ' & COMPAGNIE'               | 'SA'               |
| ' CIE (SOCIETE ANONYME)'                           | ' COMPAGNIE'                 | 'SA'               |
| ' CIE SOCIETE ANONYME'                             | ' COMPAGNIE'                 | 'SA'               |
| ' CIE. (SOCIETE ANONYME)'                          | ' COMPAGNIE'                 | 'SA'               |
| ' CIE, SOCIETE ANONYME'                            | ' COMPAGNIE'                 | 'SA'               |
| ' CIE. SOCIETE ANONYME'                            | ' COMPAGNIE'                 | 'SA'               |
| ', SOCIETE ANONYME'                                | ''                           | 'SA'               |
| ' (SOCIETE ANONYME)'                               | ''                           | 'SA'               |
| ' SOCIETE ANONYME'                                 | ''                           | 'SA'               |
| ', SOCIETE, ANONYME'                               | ''                           | 'SA'               |
| ' (SOCIETE ANONYME'                                | ''                           | 'SA'               |
| ', A \'SOCIETE ANONYME\''                          | ''                           | 'SA'               |
| ' ( SOCIETE ANONYME)'                              | ''                           | 'SA'               |
| ' (FRENCH SOCIETE ANONY-ME)'                       | ''                           | 'SA'               |
| ' (A FRENCH SOCIETE ANONY-ME)'                     | ''                           | 'SA'               |
| ' A \'SOCIETE ANONYME\''                           | ''                           | 'SA'               |
| ' (SOIETE ANONYME)'                                | ''                           | 'SA'               |
| ' (STE ANONYME)'                                   | ''                           | 'SA'               |
| ' S.A. SOICIETE ANONYME'                           | ''                           | 'SA'               |
| ', SOCIETEY ANONYME'                               | ''                           | 'SA'               |
| '(SOCI E/ TE ANONYME)'                             | ''                           | 'SA'               |
| '(SOCIET E ANONYME'                                | ''                           | 'SA'               |
| '(SOCIETETE ANONYME)'                              | ''                           | 'SA'               |
| ' (SOCI ET E ANONYME)'                             | ''                           | 'SA'               |
| ' (SCIETE ANONYME)'                                | ''                           | 'SA'               |
| '( SOCIETE ANONYME)'                               | ''                           | 'SA'               |
| '(SOCIETE ANONYME)'                                | ''                           | 'SA'               |
| 'SOCIETE ANONYME'                                  | ''                           | 'SA'               |
| ' MFG. CO. A/S'                                    | ' MANUFACTURING COMPANY'     | 'AS'               |
| ' MFG CO. A/S'                                     | ' MANUFACTURING COMPANY'     | 'AS'               |
| ' CO. A/S'                                         | ' COMPANY'                   | 'AS'               |
| ' CO. AS'                                          | ' COMPANY'                   | 'AS'               |
| ' CO., A/S'                                        | ' COMPANY'                   | 'AS'               |
| ' CO. A./S'                                        | ' COMPANY'                   | 'AS'               |
| ', LTD. A.S.'                                      | ''                           | 'AS'               |
| ', LTD. A/S'                                       | ''                           | 'AS'               |
| ' LTD. A.S'                                        | ''                           | 'AS'               |
| ' LTD. A/S'                                        | ''                           | 'AS'               |
| ' LTD. AS'                                         | ''                           | 'AS'               |
| ' LTD., A/S'                                       | ''                           | 'AS'               |
| ', A.S.'                                           | ''                           | 'AS'               |
| ', A/S'                                            | ''                           | 'AS'               |
| ', AS'                                             | ''                           | 'AS'               |
| ', A.S'                                            | ''                           | 'AS'               |
| ' A/S'                                             | ''                           | 'AS'               |
| ' A.S.'                                            | ''                           | 'AS'               |
| ' AS'                                              | ''                           | 'AS'               |
| ' A.S'                                             | ''                           | 'AS'               |
| ' A/S/'                                            | ''                           | 'AS'               |
| ' AS.'                                             | ''                           | 'AS'               |
| ' A-S'                                             | ''                           | 'AS'               |
| ' A/S.'                                            | ''                           | 'AS'               |
| ' A//S'                                            | ''                           | 'AS'               |
| ' /AS'                                             | ''                           | 'AS'               |
| ' CO., INCORPORATED'                               | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO. INCORPORATED'                                | ' COMPANY'                   | 'INCORPORATED'     |
| ', INCORPORATED.'                                  | ''                           | 'INCORPORATED'     |
| ', INCORPORATED'                                   | ''                           | 'INCORPORATED'     |
| ' INCORPORATED.'                                   | ''                           | 'INCORPORATED'     |
| ' INCORPORATED'                                    | ''                           | 'INCORPORATED'     |
| ' (INCORPORATED)'                                  | ''                           | 'INCORPORATED'     |
| ' PLC A BRITISH PUBLIC LIMI-TED COMPANY'           | ''                           | 'PLC'              |
| ', PUBLIC LIMITED COM-PANY'                        | ''                           | 'PLC'              |
| ', PUBLIC. LIMITED COM-PANY'                       | ''                           | 'PLC'              |
| ' A PUBLIC LIMITED COM-PANY'                       | ''                           | 'PLC'              |
| ' PUBLIC LIMITED COMPANY'                          | ''                           | 'PLC'              |
| ' LTD., A LIMITED COMPANY'                         | ''                           | 'PLC'              |
| ', A LIMITED COMPANY'                              | ''                           | 'LIMITED'          |
| ' PUBIC LIMITED COMPANY'                           | ''                           | 'PLC'              |
| ' PUPLIC LIMITED COMPANY'                          | ''                           | 'PLC'              |
| ' (SARL) LIMITED COMPANY'                          | ''                           | 'SARL'             |
| ' S.R.L., AN ITALIAN LIMITEDCOMPANY'               | ''                           | 'SRL'              |
| ' N.V. A DUTCH LIMITED COM-PANY'                   | ''                           | 'NV'               |
| ' LIMITED, COMPANY'                                | ''                           | 'LIMITED'          |
| ' (LIMITED COMPANY)'                               | ''                           | 'LIMITED'          |
| ' LIMITED COMPANY'                                 | ''                           | 'LIMITED'          |
| ' AND COMPANY'                                     | ' & COMPANY'                 | ''                 |
| ' AND COMPANY.'                                    | ' & COMPANY'                 | ''                 |
| ' MFG., COMPANY'                                   | ' MANUFACTURING COMPANY'     | ''                 |
| ' MFG. COMPANY'                                    | ' MANUFACTURING COMPANY'     | ''                 |
| ', MFG. CO.'                                       | ' MANUFACTURING COMPANY'     | ''                 |
| ' MFG. CO.'                                        | ' MANUFACTURING COMPANY'     | ''                 |
| ' MFG. CO'                                         | ' MANUFACTURING COMPANY'     | ''                 |
| ' MFG, CO.'                                        | ' MANUFACTURING COMPANY'     | ''                 |
| ' MFG., CO.'                                       | ' MANUFACTURING COMPANY'     | ''                 |
| ' M.F.G. CO.'                                      | ' MANUFACTURING COMPANY'     | ''                 |
| ' MFG CO.'                                         | ' MANUFACTURING COMPANY'     | ''                 |
| ', LTD. CO.'                                       | ''                           | 'LIMITED'          |
| ', LTD., CO.'                                      | ''                           | 'LIMITED'          |
| ' LTD., CO.'                                       | ''                           | 'LIMITED'          |
| ' LTD, CO.'                                        | ''                           | 'LIMITED'          |
| ' LTD., CO'                                        | ''                           | 'LIMITED'          |
| ' GMBH U. CO.'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH U CO.'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH U. CO'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH. U. CO'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH. U. CO.'                                    | ' & COMPANY'                 | 'GMBH'             |
| ' U. CO.'                                          | ' & COMPANY'                 | ''                 |
| ' GMBH AND CO.'                                    | ' & COMPANY'                 | 'GMBH'             |
| ' AG AND CO.'                                      | ' & COMPANY'                 | 'AG'               |
| ' AND CO.'                                         | ' & COMPANY'                 | ''                 |
| ' CO. (GMBH CO.)'                                  | ' COMPANY'                   | 'GMBH'             |
| ' GMBH &CO..'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH +CO.'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH+ CO.'                                       | ' & COMPANY'                 | 'GMBH'             |
| ', GMBH CO.'                                       | ' COMPANY'                   | 'GMBH'             |
| ' GMBH CO.'                                        | ' COMPANY'                   | 'GMBH'             |
| ' PUBLIC LIMITED CO.'                              | ''                           | 'PLC'              |
| ' N.V. A DUTCH LIMITED CO'                         | ''                           | 'NV'               |
| ' LIMITED CO.'                                     | ''                           | 'LIMITED'          |
| ' LIMITED., CO.'                                   | ''                           | 'LIMITED'          |
| ' GMBH UND CO.'                                    | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH UND CO'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' AKTIENGESELLSCHAFT UNDCO.'                       | ' & COMPANY'                 | 'AG'               |
| ' UND CO.'                                         | ' & COMPANY'                 | ''                 |
| ' IND., CO.'                                       | ' INDUSTRAL COMPANY'         | ''                 |
| ' IND. CO.'                                        | ' INDUSTRAL COMPANY'         | ''                 |
| ' AG+ CO.'                                         | ' & COMPANY'                 | 'AG'               |
| ' AG CO.'                                          | ' COMPANY'                   | 'AG'               |
| ' INC., CO.'                                       | ' COMPANY'                   | 'AG'               |
| ' INC, CO.'                                        | ' COMPANY'                   | 'AG'               |
| ', & CO.'                                          | ' & COMPANY'                 | 'AG'               |
| ', AG & CO.'                                       | ' & COMPANY'                 | 'AG'               |
| ' AG & CO.'                                        | ' & COMPANY'                 | 'AG'               |
| ' AG & CO'                                         | ' & COMPANY'                 | 'AG'               |
| ' AG + CO'                                         | ' & COMPANY'                 | 'AG'               |
| ' AG + CO.'                                        | ' & COMPANY'                 | 'AG'               |
| ' A.G. & CO.'                                      | ' & COMPANY'                 | 'AG'               |
| ' AKTIENGESELLSCHAFT &CO.'                         | ' & COMPANY'                 | 'AG'               |
| ' & CO., GMBH & CO.'                               | ' & COMPANY'                 | 'GMBH'             |
| ' & CIE, GMBH & CO.'                               | ' & COMPANY'                 | 'GMBH'             |
| ' & CO., (GMBH & CO)'                              | ' & COMPANY'                 | 'GMBH'             |
| ' & CO., (GMBH & CO.).'                            | ' & COMPANY'                 | 'GMBH'             |
| ' & CO., (GMBH & CO.)'                             | ' & COMPANY'                 | 'GMBH'             |
| ' & CO. GMBH & CO.'                                | ' & COMPANY'                 | 'GMBH'             |
| ' + CO., GMBH & CO'                                | ' & COMPANY'                 | 'GMBH'             |
| ' & CO. (GMBH & CO)'                               | ' & COMPANY'                 | 'GMBH'             |
| ' & CO. (GMBH & CO.)'                              | ' & COMPANY'                 | 'GMBH'             |
| ' & CO (GMBH & CO.)'                               | ' & COMPANY'                 | 'GMBH'             |
| ' & CO (GMBH & CO)'                                | ' & COMPANY'                 | 'GMBH'             |
| ' & CO. (GMBH) & CO.)'                             | ' & COMPANY'                 | 'GMBH'             |
| ' & CIE. GMBH. & CO.'                              | ' & COMPANY'                 | 'GMBH'             |
| ' KG (GMBH & CO.)'                                 | ' & COMPANY'                 | 'KG'               |
| ' K.G. (GMBH & CO)'                                | ' & COMPANY'                 | 'KG'               |
| ' KG (GMBH & CO)'                                  | ' & COMPANY'                 | 'KG'               |
| ' KG. (GMBH & CO)'                                 | ' & COMPANY'                 | 'KG'               |
| ' KG (GMBH) & CO)'                                 | ' & COMPANY'                 | 'KG'               |
| ' KG (GMBH + CO.)'                                 | ' & COMPANY'                 | 'KG'               |
| ', GMBH & CO.'                                     | ' & COMPANY'                 | 'GMBH'             |
| ', GMBH & CO'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH & CO.'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH & CO'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' (GMBH & CO.)'                                    | ' & COMPANY'                 | 'GMBH'             |
| ' (GMBH & CO)'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' KOMMANDITGES. (GMBH +CO.)'                       | ' & COMPANY'                 | 'KG'               |
| ' GMBH. & CO.'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH + CO.'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH + CO'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' G.M.B.H. & CO.'                                  | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH. & CO'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH. + CO.'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' G.M.B.H. & CO'                                   | ' & COMPANY'                 | 'GMBH'             |
| ' (GMBH. & CO.)'                                   | ' & COMPANY'                 | 'GMBH'             |
| ' GBMH + CO.'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GBMH & CO.'                                      | ' & COMPANY'                 | 'GMBH'             |
| ', GESELLSCHAFT M.B.H. &CO.'                       | ' & COMPANY'                 | 'GMBH'             |
| ' GESELLSCHAFT M.B.H. &CO.'                        | ' & COMPANY'                 | 'GMBH'             |
| ' GESELLSCHAFT M.B.H. &CO'                         | ' & COMPANY'                 | 'GMBH'             |
| ' GES. M.B.H. & CO.'                               | ' & COMPANY'                 | 'GMBH'             |
| ' GESELLSCHAFT MBH & CO'                           | ' & COMPANY'                 | 'GMBH'             |
| ' GESELLSCHAFT MBH & CO.'                          | ' & COMPANY'                 | 'GMBH'             |
| ' GESELLSCHAFT M.B.H &CO.'                         | ' & COMPANY'                 | 'GMBH'             |
| ' MBH & CO.'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' MBH + CO.'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' MBH. & CO.'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' M.B.H. & CO.'                                    | ' & COMPANY'                 | 'GMBH'             |
| ' MBH & CO'                                        | ' & COMPANY'                 | 'GMBH'             |
| ' + CO.'                                           | ' & COMPANY'                 | ''                 |
| ' + CO'                                            | ' & COMPANY'                 | ''                 |
| ', CO.'                                            | ' COMPANY'                   | ''                 |
| ', CO'                                             | ' COMPANY'                   | ''                 |
| ' CO.'                                             | ' COMPANY'                   | ''                 |
| ' CO'                                              | ' COMPANY'                   | ''                 |
| ', MFG. CORP.'                                     | ' MANUFACTURING CORPORATION' | ''                 |
| ' (MFG.) CORP.'                                    | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG. CORP.'                                      | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG., CORP.'                                     | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG CORP.'                                       | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG. CORP'                                       | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG, CORP.'                                      | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG., CORP'                                      | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG CORP'                                        | ' MANUFACTURING CORPORATION' | ''                 |
| ' INT’L CORP.'                                     | ' INTERNATIONAL CORPORATION' | ''                 |
| ' INT’L. CORP'                                     | ' INTERNATIONAL CORPORATION' | ''                 |
| ' INT’L. CORP.'                                    | ' INTERNATIONAL CORPORATION' | ''                 |
| ' INTL. CORP.'                                     | ' INTERNATIONAL CORPORATION' | ''                 |
| ', CORP.'                                          | ' CORPORATION'               | ''                 |
| ', CORP'                                           | ' CORPORATION'               | ''                 |
| ' CORP.'                                           | ' CORPORATION'               | ''                 |
| ' CORP'                                            | ' CORPORATION'               | ''                 |
| ' GMBH CO. KG'                                     | ' COMPANY'                   | 'KG'               |
| ' GMBH. CO., KG'                                   | ' COMPANY'                   | 'KG'               |
| ' GMBH CO., K.G.'                                  | ' COMPANY'                   | 'KG'               |
| ' GMBH CO., KG'                                    | ' COMPANY'                   | 'KG'               |
| ' GMBH CO, KG'                                     | ' COMPANY'                   | 'KG'               |
| ' GMBH +CO. KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH& CO. KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH &CO KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' GMBH+ CO. KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH &CO. KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH+ CO KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' GMBH +CO KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' + CIE., GMBH U. CO. KG'                          | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H. U. CO. KG'                   | ' & COMPANY'                 | 'KG'               |
| ' GES.M.B.H. U. CO. KG'                            | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H U. CO. KG'                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH U. CO. KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH U. CO. KG.'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMBH U. CO KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' MBH U. CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GMBH UND CO. KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMBH UND CO KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH UND CO. KG.'                                | ' & COMPANY'                 | 'KG'               |
| ' M.B.H. UND CO. KG.'                              | ' & COMPANY'                 | 'KG'               |
| ' M.B.H. UND CO. KG'                               | ' & COMPANY'                 | 'KG'               |
| ' UND CO. KG'                                      | ' & COMPANY'                 | 'KG'               |
| ' UND CO. KG.'                                     | ' & COMPANY'                 | 'KG'               |
| ', GMBH AND CO. KG.'                               | ' & COMPANY'                 | 'KG'               |
| ' GMBH AND CO. KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMBH AND CO., KG'                                | ' & COMPANY'                 | 'KG'               |
| ' AG AND CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GMB& O CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GES. M.B.H. &CO. KG.'                            | ' & COMPANY'                 | 'KG'               |
| ' AG CO. KG'                                       | ' COMPANY'                   | 'KG'               |
| ' & CO. GMBH & CO. KG'                             | ' & COMPANY'                 | 'KG'               |
| ' & CO, GMBH & CO KG'                              | ' & COMPANY'                 | 'KG'               |
| ' & GMBH & CO. KG'                                 | ' & COMPANY'                 | 'KG'               |
| ', GMBH & CO. KG'                                  | ' & COMPANY'                 | 'KG'               |
| ', GMBH & CO, KG'                                  | ' & COMPANY'                 | 'KG'               |
| ', GMBH & CO KG'                                   | ' & COMPANY'                 | 'KG'               |
| ', GMBH & CO. KG.'                                 | ' & COMPANY'                 | 'KG'               |
| ', GMBH & CO., KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO., KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO. KG.'                                  | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H. & CO. KG'                    | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT MBH & CO. KG'                       | ' & COMPANY'                 | 'KG'               |
| ' GES. M.B.H. & CO. KG'                            | ' & COMPANY'                 | 'KG'               |
| ' GMBH. & CO. KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO., KG.'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO. K.G.'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO K.G.'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO KG.'                                   | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT MBH & CO., KG'                      | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H. & CO. KG.'                   | ' & COMPANY'                 | 'KG'               |
| ' GES.M.B.H. & CO. KG'                             | ' & COMPANY'                 | 'KG'               |
| ' GES.M.B.H & CO. KG'                              | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO, KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GMBH. & CO., KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' G.M.B.H. & CO. KG'                               | ' & COMPANY'                 | 'KG'               |
| ' GES.M.B.H. & CO KG'                              | ' & COMPANY'                 | 'KG'               |
| ' GMBH. & CO. KG.'                                 | ' & COMPANY'                 | 'KG'               |
| ' & CO. (GMBH & CO. KG)'                           | ' & COMPANY'                 | 'KG'               |
| ' (GMBH & CO.) KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' GES.M. B. H & CO. KG'                            | ' & COMPANY'                 | 'KG'               |
| ' GNBH & CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GES.M.B.H. & CO. KG.'                            | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO, KG.'                                  | ' & COMPANY'                 | 'KG'               |
| ' GES.MBH & CO. KG'                                | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H. & CO. K.G.'                  | ' & COMPANY'                 | 'KG'               |
| ' GES.M.H. & CO KG.'                               | ' & COMPANY'                 | 'KG'               |
| ' GESMBH & CO. KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H. &'                           | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H & CO. KG.'                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO., K.G.'                                | ' & COMPANY'                 | 'KG'               |
| ' (GMBH & CO. KG)'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMGH & CO., KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT MBH & CO KG'                        | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO: KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H & CO. KG'                     | ' & COMPANY'                 | 'KG'               |
| ' GBMH & CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' (GMBH & CO KG)'                                  | ' & COMPANY'                 | 'KG'               |
| ' G.M.B.H & CO., K.G.'                             | ' & COMPANY'                 | 'KG'               |
| ' M.B.H. & CO. K.G.'                               | ' & COMPANY'                 | 'KG'               |
| ' MBH & CO., KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' MBH + CO. KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H & CO., KG'                    | ' & COMPANY'                 | 'KG'               |
| ' MBH & CO KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' M.B.H. & CO KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH + CO KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH + CO. KG.'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH + CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GMBH + CO., KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' AG & CO. KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' AG & CO., KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' AG & CO. K.G.'                                   | ' & COMPANY'                 | 'KG'               |
| ' A.G. & CO. K.G.'                                 | ' & COMPANY'                 | 'KG'               |
| ' AG + CO. KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' AKTIENGESELLSCHAFT & CO. KG'                     | ' & COMPANY'                 | 'KG'               |
| ' AG & CO. KG.'                                    | ' & COMPANY'                 | 'KG'               |
| ' AG & CO KG'                                      | ' & COMPANY'                 | 'KG'               |
| ' B.V. & CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' KG & CO. KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' MBH & CO. KG.'                                   | ' & COMPANY'                 | 'KG'               |
| ' MBH & CO. KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' M.B.H. & CO. KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' MBH & CO., KG.'                                  | ' & COMPANY'                 | 'KG'               |
| ' & CO. KG'                                        | ' & COMPANY'                 | 'KG'               |
| ' & CO KG'                                         | ' & COMPANY'                 | 'KG'               |
| ' & CO. KG.'                                       | ' & COMPANY'                 | 'KG'               |
| ' & CO., KG'                                       | ' & COMPANY'                 | 'KG'               |
| ' & CO, KG'                                        | ' & COMPANY'                 | 'KG'               |
| ' & CO. K.G.'                                      | ' & COMPANY'                 | 'KG'               |
| ' & CO KG.'                                        | ' & COMPANY'                 | 'KG'               |
| ' + CO. KG'                                        | ' & COMPANY'                 | 'KG'               |
| ' + CO. KG.'                                       | ' & COMPANY'                 | 'KG'               |
| ' + CO KG'                                         | ' & COMPANY'                 | 'KG'               |
| '-GMBH & CO. KG'                                   | '-GESELLSCHAFT & COMPANY'    | 'KG'               |
| ' KG'                                              | ' KG'                        | 'KG'               |
| ' KG.'                                             | ' KG'                        | 'KG'               |
| ' K.G.'                                            | ' KG'                        | 'KG'               |
| ', CO., LLC'                                       | ' COMPANY'                   | 'LLC'              |
| ', CO. L.L.C.'                                     | ' COMPANY'                   | 'LLC'              |
| ' MFG., CO., LLC'                                  | ' MANUFACTURING COMPANY'     | 'LLC'              |
| ' CO., LLC'                                        | ' COMPANY'                   | 'LLC'              |
| ' CO., L.L.C.'                                     | ' COMPANY'                   | 'LLC'              |
| ' CO. LLC'                                         | ' COMPANY'                   | 'LLC'              |
| ' CO. L.L.C.'                                      | ' COMPANY'                   | 'LLC'              |
| ' CO, LLC'                                         | ' COMPANY'                   | 'LLC'              |
| ' CO., LLC.'                                       | ' COMPANY'                   | 'LLC'              |
| ' CO L.L.C.'                                       | ' COMPANY'                   | 'LLC'              |
| ' CO LLC'                                          | ' COMPANY'                   | 'LLC'              |
| ', INC. LLC'                                       | ' COMPANY'                   | 'LLC'              |
| ', INC., L.L.C.'                                   | ' COMPANY'                   | 'LLC'              |
| ', INC., LLC'                                      | ' COMPANY'                   | 'LLC'              |
| ', INC. L.L.C.'                                    | ' COMPANY'                   | 'LLC'              |
| ' INC, LLC'                                        | ' COMPANY'                   | 'LLC'              |
| ' INC., LLC'                                       | ' COMPANY'                   | 'LLC'              |
| ' MFG., LLC'                                       | ''                           | 'LLC'              |
| ' MFG., L.L.C.'                                    | ''                           | 'LLC'              |
| ' MFG, LLC'                                        | ''                           | 'LLC'              |
| ' MFG, LLC.'                                       | ''                           | 'LLC'              |
| ', LLC'                                            | ''                           | 'LLC'              |
| ', LLC.'                                           | ''                           | 'LLC'              |
| ', L.L.C.'                                         | ''                           | 'LLC'              |
| ', L.L.C'                                          | ''                           | 'LLC'              |
| ', LL.C.'                                          | ''                           | 'LLC'              |
| ', L.LC.'                                          | ''                           | 'LLC'              |
| ', L.L.C..'                                        | ''                           | 'LLC'              |
| ' L.L.C.'                                          | ''                           | 'LLC'              |
| ' LLC.'                                            | ''                           | 'LLC'              |
| ' LLC'                                             | ''                           | 'LLC'              |
| ' (LLC)'                                           | ''                           | 'LLC'              |
| ' L.L.C'                                           | ''                           | 'LLC'              |
| ' L.LC.'                                           | ''                           | 'LLC'              |
| ' LL.C'                                            | ''                           | 'LLC'              |
| ' CO. B.V.'                                        | ' COMPANY'                   | 'BV'               |
| ' CO., B.V.'                                       | ' COMPANY'                   | 'BV'               |
| ' CO, B.V.'                                        | ' COMPANY'                   | 'BV'               |
| ' CO B.V.'                                         | ' COMPANY'                   | 'BV'               |
| ', B.V.'                                           | ''                           | 'BV'               |
| ', BV'                                             | ''                           | 'BV'               |
| ', B.V'                                            | ''                           | 'BV'               |
| ' B.V.'                                            | ''                           | 'BV'               |
| ' BV.'                                             | ''                           | 'BV'               |
| ' BV'                                              | ''                           | 'BV'               |
| ' B.V'                                             | ''                           | 'BV'               |
| ', OY AB'                                          | ''                           | 'AB'               |
| ' OY, AB'                                          | ''                           | 'AB'               |
| ' OY AB'                                           | ''                           | 'AB'               |
| ' CO. AB'                                          | ' COMPANY'                   | 'AB'               |
| ' CO AB'                                           | ' COMPANY'                   | 'AB'               |
| ' CO A.B.'                                         | ' COMPANY'                   | 'AB'               |
| ' CO., AB'                                         | ' COMPANY'                   | 'AB'               |
| ' AKTIEBOLAG (AB)'                                 | ''                           | 'AB'               |
| ' AKTIEBOLG (AB)'                                  | ''                           | 'AB'               |
| ', A/B'                                            | ''                           | 'AB'               |
| ', AB'                                             | ''                           | 'AB'               |
| ', A.B.'                                           | ''                           | 'AB'               |
| ' AB'                                              | ''                           | 'AB'               |
| ' A.B.'                                            | ''                           | 'AB'               |
| ' AB.'                                             | ''                           | 'AB'               |
| ' A/B'                                             | ''                           | 'AB'               |
| ' GMBH & CO AG'                                    | ' & COMPANY'                 | 'AG'               |
| ' GMBH & CO. AG'                                   | ' & COMPANY'                 | 'AG'               |
| ' GMBH & CO., AG'                                  | ' & COMPANY'                 | 'AG'               |
| ' AG & CO AG'                                      | ' & COMPANY'                 | 'AG'               |
| ' + CO. AG'                                        | ' & COMPANY'                 | 'AG'               |
| ' CO. AG'                                          | ' COMPANY'                   | 'AG'               |
| ' CO., AG'                                         | ' COMPANY'                   | 'AG'               |
| ' CO. AG.'                                         | ' COMPANY'                   | 'AG'               |
| ' CO AG'                                           | ' COMPANY'                   | 'AG'               |
| ' CO. A.G.'                                        | ' COMPANY'                   | 'AG'               |
| ' CO., A.G.'                                       | ' COMPANY'                   | 'AG'               |
| ' + CIE AG'                                        | ' & COMPANY'                 | 'AG'               |
| ' CIE. AG'                                         | ' COMPANY'                   | 'AG'               |
| ' CIE AG'                                          | ' COMPANY'                   | 'AG'               |
| ' CIE. A.-G.'                                      | ' COMPANY'                   | 'AG'               |
| ' CIE. AG.'                                        | ' COMPANY'                   | 'AG'               |
| ' AKTIENGESELLSCHAFT AG'                           | ''                           | 'AG'               |
| ' AKTIENGESELLSCHAFT, AG'                          | ''                           | 'AG'               |
| ', AG'                                             | ''                           | 'AG'               |
| ', A.G.'                                           | ''                           | 'AG'               |
| ', A.G'                                            | ''                           | 'AG'               |
| ', AG.'                                            | ''                           | 'AG'               |
| ' AG'                                              | ''                           | 'AG'               |
| ' A.G.'                                            | ''                           | 'AG'               |
| ' AG.'                                             | ''                           | 'AG'               |
| ' A.-G.'                                           | ''                           | 'AG'               |
| ' (AG)'                                            | ''                           | 'AG'               |
| ' A/G'                                             | ''                           | 'AG'               |
| ' + CO. GESELLSCHAFT MBH'                          | ' & COMPANY'                 | 'GMBH'             |
| ' CO. GESELLSCHAFT M.B.H.'                         | ' COMPANY'                   | 'GMBH'             |
| ' CO., GESELLSCHAFT MBH'                           | ' COMPANY'                   | 'GMBH'             |
| ' CO. GESELLSCHAFT MBH'                            | ' COMPANY'                   | 'GMBH'             |
| ' CO., GESELLSCHAFT M.B.H.'                        | ' COMPANY'                   | 'GMBH'             |
| ' CO GESELLSCHAFT M.B.H.'                          | ' COMPANY'                   | 'GMBH'             |
| ', GESELLSCHAFT M.B.H.'                            | ''                           | 'GMBH'             |
| ', GESELLSCHAFT M.B.H'                             | ''                           | 'GMBH'             |
| ', GESELLSCHAFT MBH'                               | ''                           | 'GMBH'             |
| ', GES. M.B.H.'                                    | ''                           | 'GMBH'             |
| ', GES, M.B.H'                                     | ''                           | 'GMBH'             |
| ' GES. M.B.H.'                                     | ''                           | 'GMBH'             |
| ' GES,, M.B.H.'                                    | ''                           | 'GMBH'             |
| ' GES M.B.H.'                                      | ''                           | 'GMBH'             |
| ' GES. M.B.H'                                      | ''                           | 'GMBH'             |
| ' GES. MBH'                                        | ''                           | 'GMBH'             |
| ' GES M.B.H'                                       | ''                           | 'GMBH'             |
| ' UND CO. MBH'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' UND CO MBH'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' CO. MBH'                                         | ' COMPANY'                   | 'GMBH'             |
| ', M.B.H.'                                         | ''                           | 'GMBH'             |
| ', MBH'                                            | ''                           | 'GMBH'             |
| ' M.B.H.'                                          | ''                           | 'GMBH'             |
| ' MBH'                                             | ''                           | 'GMBH'             |
| ' MBH.'                                            | ''                           | 'GMBH'             |
| ' M.B.H'                                           | ''                           | 'GMBH'             |
| ' KABUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' YUEN KASHA'                                      | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSK KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHKA KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSH KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KUBUSHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABSHK KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABSHK KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KAUBSHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KASBUSHK KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHH KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSKK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABSUHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KAUSHK KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUHSK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KAUBUSHK KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KBUSHK KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KANUSHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHKK KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KASHA KASHA'                                     | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHHK KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSK KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSBK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABSHUK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHKA KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHKO KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KABSUSHK KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' YUUEN KASHA'                                     | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUHK KASHA'                                    | ' KOGYO'                     | 'KABUSHIKI KAISHA' |
| ' KOYOKABUSHK KASHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHL KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHUKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KAGUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHISKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUBSHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUKSHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABURHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSAHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUISHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' JABUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' AKBUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' BABUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' BUSHIKI KAISHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' DABUSHIKI KAISHA'                                | ' DENKI'                     | 'KABUSHIKI KAISHA' |
| ' DENKIKABUSHIKI KAISHA'                           | ''                           | 'KABUSHIKI KAISHA' |
| ' FABUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABHUSHIKI KAISHA'                               | ' HATSUDOKI'                 | 'KABUSHIKI KAISHA' |
| ' HATSUDOKIKABUSHIKI KAISHA'                       | ''                           | 'KABUSHIKI KAISHA' |
| ' KABSUBSHIKI KAISHA'                              | ' JIDOSHA'                   | 'KABUSHIKI KAISHA' |
| ' JIDOSHAKABUSHIKI KAISHA'                         | ' JUKOGYO'                   | 'KABUSHIKI KAISHA' |
| ' JUKOGYOKABUSHIKI KAISHA'                         | ''                           | 'KABUSHIKI KAISHA' |
| ' KABAHIKI KAISHA'                                 | ''                           | 'KABUSHIKI KAISHA' |
| ' KABASHIKA KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABASIKI KAISHA'                                 | ''                           | 'KABUSHIKI KAISHA' |
| ' KABBUSHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABHSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABISHA KAISHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIKIKI KAISHA'                              | ''                           | 'KABUSHIKI KAISHA' |
| ' KAKUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KATUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KEBUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KEBUSKIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KAIBUSHIKI KAISHA'                               | ' KOGYO'                     | 'KABUSHIKI KAISHA' |
| ' KOGYOOKABUSHIKI KAISHA'                          | ''                           | 'KABUSHIKI KAISHA' |
| ' KAIBSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' LABUSHIKI KAISHA'                                | ' SHOKUHIN'                  | 'KABUSHIKI KAISHA' |
| ' SHOKUHINKABUSHIKI KAISHA'                        | ' KOGYO'                     | 'KABUSHIKI KAISHA' |
| ' KOGYOLKABUSHIKI KAISHA'                          | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHISHI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIHIKI KAISHA'                              | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIKE KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIKHI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIKII KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIKIK KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIKU KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIMI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KAISHUSHIKI KAISHA'                              | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHINKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIBI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHKIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHUSHIKI KAISHA'                             | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSIHI KAISHA'                                 | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSSHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSYIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUUSHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABYSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KAHUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHINI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |

#+call: make-rds-patterns-table(data = magerman_patterns_legal_form_end, data.name = "magerman_patterns_legal_form_end"))

*** Table: Legal form in the middle

#+NAME: magerman_patterns_legal_form_middle
| KEYWORD             | Replace       | LEGAL |
|---------------------+---------------+-------|
| ' GMBH & CO. K.G. ' | ' & COMPANY ' | GMBH  |
| ' GMBH & CO. KG. '  | ' & COMPANY ' | GMBH  |
| ' GMBH & CO. KG '   | ' & COMPANY ' | GMBH  |
| ' GMBH & CO.K.G. '  | ' & COMPANY ' | GMBH  |
| ' GMBH & CO.KG '    | ' & COMPANY ' | GMBH  |
| ' GMBH & CO KG '    | ' & COMPANY ' | GMBH  |
| ' GMBH + CO. KG '   | ' & COMPANY ' | GMBH  |
| ' GMBH & CO. '      | ' & COMPANY ' | GMBH  |
| ' GMBH & CO '       | ' & COMPANY ' | GMBH  |
| ' GMBH & CO.,'      | ' & COMPANY ' | GMBH  |
| ' GMBH & CO,'       | ' & COMPANY ' | GMBH  |
| ' GMBH + CO. '      | ' & COMPANY ' | GMBH  |
| ' GMBH + CO '       | ' & COMPANY ' | GMBH  |
| ' GMBH + CO.,'      | ' & COMPANY ' | GMBH  |
| ' GMBH + CO,'       | ' & COMPANY ' | GMBH  |
| ' GMBH,'            | ' '           | GMBH  |
| ' GMBH '            | ' '           | GMBH  |

#+call: make-rds-patterns-table(data = magerman_patterns_legal_form_middle, data.name = "magerman_patterns_legal_form_middle"))

*** Detect and replace legal forms
:PROPERTIES:
:ID:       org:yrvizmx01ei0
:END:

"The search and replace statements were executed in three groups: firstly, a group of 1,060 statements to remove legal forms at the end of a name (see Appendix 2); then a group of 1 statement to remove legal forms at the beginning of a name (remove 1216 occurrences of “KABUSHIKI KAISHA” at the beginning of a name); and finally, a group of 17 statements to remove legal forms anywhere in a name (see Table 18)." (p. 39)

"In a group, all search and replace statements are executed in a singular and not a cumulative approach.

If a name contains a legal form indication at the beginning and the end of a name, or anywhere in the name, only the legal form indication occurring at the end of the name is standardized and moved to a different field.

As the replacements and removals in the search and replace statements can lead to names ending with irregular punctuation characters, all occurrences of “-”; “;“; “:”; “,” and “&” are removed at the end of a name by executing an update query on the data.

plus trim..."

#+BEGIN_SRC R :tangle R/magerman.r
  ##' @eval attr(magerman_detect_legal_form_end, "@title")
  ##' @inherit detect_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso detect_patterns
  ##'
  ##' @md
  ##' @export
  magerman_detect_legal_form_end <- make_alias(detect_patterns
                                             , patterns = magerman_patterns_legal_form_end
                                             , patterns_type = "ends"
                                             , patterns_codes_col = 3
                                             , return_only_codes = FALSE
                                             , return_only_first_detected_code = TRUE
                                             , patterns_codes = NULL
                                             , no_match_code = NULL
                                             , merge_existing_codes = "replace_empty"
                                             , output_codes_col_name = "{col_name_}legal_form")

  attr(magerman_detect_legal_form_end, "@title") <-
      "Detects legal form"






  ##' @eval attr(magerman_replace_legal_form_end, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_replace_legal_form_end <- make_alias(replace_patterns
                                              , patterns = magerman_patterns_legal_form_end
                                              , patterns_type = "ends")

  attr(magerman_replace_legal_form_end, "@title") <-
      "Replaces legal form"






  ##' @eval attr(magerman_detect_legal_form_beginning, "@title")
  ##' @inherit detect_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso detect_patterns
  ##'
  ##' @md
  ##' @export
  magerman_detect_legal_form_beginning <- make_alias(detect_patterns
                                                   , patterns = data.table(pattern = "KABUSHIKI KAISHA"
                                                                         , legal.form = "KAISHA")
                                                   , patterns_type = "begins"
                                                   , merge_existing_codes = "replace_empty"
                                                   , return_only_first_detected_code = TRUE
                                                   , output_codes_col_name = "{col_name_}legal_form")

  attr(magerman_detect_legal_form_beginning, "@title") <-
      "Detects legal form"







  ##' @eval attr(magerman_replace_legal_form_beginning, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_replace_legal_form_beginning <- make_alias(replace_patterns
                                                    , patterns = "KABUSHIKI KAISHA"
                                                    , patterns_type = "begins")

  attr(magerman_replace_legal_form_beginning, "@title") <-
      "Replaces legal form"







  ##' @eval attr(magerman_detect_legal_form_middle, "@title")
  ##' @inherit detect_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso detect_patterns
  ##'
  ##' @md
  ##' @export
  magerman_detect_legal_form_middle <- make_alias(detect_patterns
                                                , patterns = magerman_patterns_legal_form_middle
                                                , patterns_codes_col = 3
                                                , patterns_type = "fixed"
                                                , return_only_first_detected_code = TRUE
                                                , merge_existing_codes = "replace_empty"
                                                , output_codes_col_name = "{col_name_}legal_form")

  attr(magerman_detect_legal_form_middle, "@title") <-
      "Detects legal form"




  ##' @eval attr(magerman_replace_legal_form_middle, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_replace_legal_form_middle <- make_alias(replace_patterns
                                                 , patterns = magerman_patterns_legal_form_middle
                                                 , patterns_type = "fixed")

  attr(magerman_replace_legal_form_middle, "@title") <-
      "Replace legal form"



  ##' @eval attr(magerman_detect_legal_form, "@title")
  ##' @param x table
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##'
  ##' @export
  magerman_detect_legal_form <- function(x, ...) {
      x |>
          magerman_detect_legal_form_end() |>
          magerman_detect_legal_form_beginning() |>
          magerman_detect_legal_form_middle()
  }


  attr(magerman_detect_legal_form, "@title") <-
      "Detect legal form"

  ##' @eval attr(magerman_remove_legal_form, "@title")
  ##' @param x table
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##'
  ##' @export
  magerman_remove_legal_form <- function(x, ...) {
      legal_form_end_rows <-
          magerman_detect_legal_form_end(x
                                       , merge_existing_codes = "replace_all"
                                       , return_only_codes = TRUE
                                       , patterns_codes = TRUE
                                       , no_match_code = FALSE)
      x |>
          magerman_replace_legal_form_beginning(rows = !legal_form_end_rows) |>
          magerman_replace_legal_form_middle(rows = !legal_form_end_rows) |>
          magerman_replace_legal_form_end()        
  }

  attr(magerman_remove_legal_form, "@title") <- "Removes legal form"



  ##' @eval attr(magerman_remove_legal_form_and_clean, "@title")
  ##' @param x table
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' 
  ##' @export
  magerman_remove_legal_form_and_clean <- function(x, ...) {
      x |>
          magerman_remove_legal_form() |>
          replace_patterns(
              patterns = c("[-;:,&]*\\s*$", "^\\s*"),
              patterns_type = "regex"
          )
  }

  attr(magerman_remove_legal_form_and_clean, "@title") <- "Removes legal form"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_replace_legal_form.r
  expect_equal(
      magerman_detect_legal_form_end(c("lksdjf MFG. CO, INC"
                                     , "MSlab Co."
                                     , "IBM Corp."
                                     , "MSlab Co. GMBH & CO.KG lalal"
                                     , "KABUSHIKI KAISHA MSlab Co. ") |>
                                     toupper())
    , structure(list(x = c("LKSDJF MFG. CO, INC", "MSLAB CO.", "IBM CORP."
                          , "MSLAB CO. GMBH & CO.KG LALAL", "KABUSHIKI KAISHA MSLAB CO. ")
                   , x_legal_form = c("INCORPORATED", NA, NA, NA, NA))
              , row.names = c(NA, -5L), class = c("data.table", "data.frame"))
  )

  expect_equal(c("lksdjf MFG. CO, INC"
               , "MSlab Co."
               , "IBM Corp."
               , "MSlab Co. GMBH & CO.KG lalal"
               , "KABUSHIKI KAISHA MSlab Co. ") |>
               toupper() |>
               magerman_replace_legal_form_end(output_placement = "append_to_col")
   , structure(list(x = c("LKSDJF MFG. CO, INC", "MSLAB CO.", "IBM CORP.", "MSLAB CO. GMBH & CO.KG LALAL", "KABUSHIKI KAISHA MSLAB CO. "), std_x = c("LKSDJF MANUFACTURING COMPANY", "MSLAB COMPANY", "IBM CORPORATION", "MSLAB CO. GMBH & CO.KG LALAL", "KABUSHIKI KAISHA MSLAB CO. ")), row.names = c(NA, -5L), class = c("data.table", "data.frame")))


  expect_equal(magerman_detect_legal_form_end(c("lksdjf MFG. CO, INC"
                                              , "MSlab Co."
                                              , "IBM Corp."
                                              , "MSlab Co. GMBH & CO.KG lalal"
                                              , "KABUSHIKI KAISHA MSlab Co. ") |>
                                              toupper()
                                            , patterns_codes = TRUE
                                            , no_match_code = FALSE
                                            , return_only_codes = TRUE)
             , c(TRUE, TRUE, TRUE, FALSE, FALSE))

  expect_equal(
      magerman_detect_legal_form_middle(c("lksdjf MFG. CO, INC"
                                                 , "MSlab Co."
                                                 , "IBM Corp."
                                                 , "MSlab Co. GMBH & CO.KG lalal"
                                                 , "KABUSHIKI KAISHA MSlab Co. ") |>
                                        toupper())
             , structure(list(x = c("LKSDJF MFG. CO, INC", "MSLAB CO.", "IBM CORP."
                                    ,"MSLAB CO. GMBH & CO.KG LALAL", "KABUSHIKI KAISHA MSLAB CO. "
                                     ), x_legal_form = c(NA, NA, NA, "GMBH", NA))
                       , row.names = c(NA, -5L), class = c("data.table", "data.frame")))

  expect_equal(magerman_detect_legal_form_beginning(c("lksdjf MFG. CO, INC"
                                                    , "MSlab Co."
                                                    , "IBM Corp."
                                                    , "MSlab Co. GMBH & CO.KG lalal"
                                                    , "KABUSHIKI KAISHA MSlab Co. ") |>
                                                    toupper()), structure(list(x = c("LKSDJF MFG. CO, INC", "MSLAB CO.", "IBM CORP.", 
                                     "MSLAB CO. GMBH & CO.KG LALAL", "KABUSHIKI KAISHA MSLAB CO. "
                                     ), x_legal_form = c(NA, NA, NA, NA, "KAISHA")), row.names = c(NA, 
                                                                                               -5L), class = c("data.table", "data.frame")))
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_remove_legal_form.r



  expect_equal(
      c("lksdjf MFG. GMBH CO, INC"
      , "MSlab Co."
      , "IBM Corp."
      , "MSlab Co. GMBH & CO.KG lalal CO."
      , "KABUSHIKI KAISHA MSlab Co.") |>
      toupper() |>
      magerman_detect_legal_form()
    , structure(list(x = c("LKSDJF MFG. GMBH CO, INC", "MSLAB CO.", "IBM CORP.", "MSLAB CO. GMBH & CO.KG LALAL CO.", "KABUSHIKI KAISHA MSLAB CO."  ), x_legal_form = c("INCORPORATED", NA, NA, "GMBH", "KAISHA")), row.names = c(NA, -5L), class = c("data.table", "data.frame")))




  ## testing pecular (but intendent) behaviour of magerman_remove_legal_form
  ## in the last string the middle part should not be replaced because of legal form at the end
  expect_equal(c("lksdjf MFG. GMBH CO, INC"
               , "MSlab Co."
               , "IBM Corp."
               , "MSlab Co. GMBH & CO.KG lalal"
               , "KABUSHIKI KAISHA MSlab Co. "
               , "KABUSHIKI KAISHA MSlab Co.") |>
               toupper() |>
               magerman_remove_legal_form()
             , c("LKSDJF MFG. GMBH COMPANY", "MSLAB COMPANY", "IBM CORPORATION", "MSLAB CO. & COMPANY LALAL", " MSLAB CO. ", "KABUSHIKI KAISHA MSLAB COMPANY"))



  expect_equal(
      c("lksdjf MFG. GMBH CO,; INC"
      , "MSlab Co."
      , "IBM Corp."
      , " MSlab Co. GMBH & CO.KG lalal  "
      , "KABUSHIKI KAISHA MSlab Co.") |>
      toupper() |>
      magerman_remove_legal_form_and_clean()
  , c("LKSDJF MFG. GMBH CO", "MSLAB COMPANY", "IBM CORPORATION", 
  "MSLAB CO. & COMPANY LALAL", "KABUSHIKI KAISHA MSLAB COMPANY"))


  expect_equal(
      data.table(c("lksdjf MFG. GMBH CO,; INC"
                          , "MSlab Co."
                          , "IBM Corp."
                          , " MSlab Co. GMBH & CO.KG lalal  "
                          , "KABUSHIKI KAISHA MSlab Co.") |> toupper()
                        , somevar = c(1,2,3,4,5)) |>
               magerman_remove_legal_form_and_clean(output_placement = "append_to_col")
  , structure(list(V1 = c("LKSDJF MFG. GMBH CO,; INC", "MSLAB CO.", 
  "IBM CORP.", " MSLAB CO. GMBH & CO.KG LALAL  ", "KABUSHIKI KAISHA MSLAB CO."
  ), std_V1 = c("LKSDJF MFG. GMBH CO", "MSLAB COMPANY", "IBM CORPORATION", 
  "MSLAB CO. & COMPANY LALAL", "KABUSHIKI KAISHA MSLAB COMPANY"
  ), somevar = c(1, 2, 3, 4, 5)), row.names = c(NA, -5L), class = c("data.table", 
  "data.frame"))
  )

  expect_equal(
      data.table(c("lksdjf MFG. GMBH CO,; INC"
                          , "MSlab Co."
                          , "IBM Corp."
                          , " MSlab Co. GMBH & CO.KG lalal  "
                          , "KABUSHIKI KAISHA MSlab Co.") |> toupper()
                        , somevar = c(1,2,3,4,5)) |>
      magerman_remove_legal_form_and_clean(output_placement = "prepend_to_x")
  , structure(list(std_V1 = c("LKSDJF MFG. GMBH CO", "MSLAB COMPANY", 
  "IBM CORPORATION", "MSLAB CO. & COMPANY LALAL", "KABUSHIKI KAISHA MSLAB COMPANY"
  ), V1 = c("LKSDJF MFG. GMBH CO,; INC", "MSLAB CO.", "IBM CORP.", 
  " MSLAB CO. GMBH & CO.KG LALAL  ", "KABUSHIKI KAISHA MSLAB CO."
  ), somevar = c(1, 2, 3, 4, 5)), row.names = c(NA, -5L), class = c("data.table", 
  "data.frame"))
  )



  expect_equal(
      c("lksdjf MFG. GMBH CO,; INC"
               , "MSlab Co."
               , "IBM Corp."
               , " MSlab Co. GMBH & CO.KG lalal  "
               , "KABUSHIKI KAISHA MSlab Co. ") |>
               toupper() |>
               magerman_replace_legal_form_end(output_placement = "prepend_to_x")
  , structure(list(std_x = c("LKSDJF MFG. GMBH CO,;", "MSLAB COMPANY", 
  "IBM CORPORATION", " MSLAB CO. GMBH & CO.KG LALAL  ", "KABUSHIKI KAISHA MSLAB CO. "
  ), x = c("LKSDJF MFG. GMBH CO,; INC", "MSLAB CO.", "IBM CORP.", 
  " MSLAB CO. GMBH & CO.KG LALAL  ", "KABUSHIKI KAISHA MSLAB CO. "
  )), row.names = c(NA, -5L), class = c("data.table", "data.frame"
  )))

#+END_SRC

** Common Words
:PROPERTIES:
:ID:       org:mabjzmx01ei0
:END:

Table 19: Common company words to be removed at the end of a name
#+NAME: magerman_patterns_common_words_at_the_end
| KEYWORD        |
|----------------|
| 'CORPORATION'  |
| 'CORP'         |
| 'AND COMPANY'  |
| '& COMPANY'    |
| 'COMPANY'      |
| ' KG'          |
| 'GESELLSCHAFT' |

#+call: make-rds-patterns-table(data = magerman_patterns_common_words_at_the_end, data.name = "magerman_patterns_common_words_at_the_end")


Table 20: Common company words to be removed at the beginning of a name
#+NAME: magerman_patterns_common_words_at_the_beginning
| KEYWORD                                 |
|-----------------------------------------|
| 'SOCIETE A RESPONSABILITE LIMITEE DITE' |
| 'SOCIETE A RESPONSABILITE LIMITEE'      |
| 'SOCIETE ANONYME DITE'                  |
| 'SOCIETE ANONYME DES '                  |
| 'SOCIETE ANONYME DE '                   |
| 'SOCIETE ANONYME D''                    |
| 'SOCIETE ANONYME'                       |
| 'SOCIETE CIVILE DES '                   |
| 'SOCIETE CIVILE DE '                    |
| 'SOCIETE CIVILE D''                     |
| 'SOCIETE CIVILE '                       |
| 'SOCIETE DITE'                          |
| 'SOCIETE DES '                          |
| 'SOCIETE DE '                           |
| 'SOCIETE D''                            |
| 'SOCIETE '                              |

#+call: make-rds-patterns-table(data = magerman_patterns_common_words_at_the_beginning, data.name = "magerman_patterns_common_words_at_the_beginning")


Table 21: Common company words to be removed anywhere in a name
#+NAME: magerman_patterns_common_words_anywhere
| KEYWORD          |
|------------------|
| ' AND CO '       |
| ' AND CO.'       |
| ' AND CO,'       |
| ' & CO '         |
| ' & CO.'         |
| ' & CO,'         |
| ' CO '           |
| ' CO.'           |
| ' CO,'           |
| ' GESELLSCHAFT ' |
| ' SOCIETE '      |
| ' CORPORATION '  |
| ' INC.'          |
| ' INC,'          |
| ' COMPANY '      |
| ' AG '           |
| ' AG,'           |
| ' AG.'           |

#+call: make-rds-patterns-table(data = magerman_patterns_common_words_anywhere, data.name = "magerman_patterns_common_words_anywhere")


#+BEGIN_SRC R :tangle R/magerman.r

  ##' @eval attr(magerman_remove_common_words_at_the_end, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_remove_common_words_at_the_end <- make_alias(replace_patterns
                                                      , patterns = magerman_patterns_common_words_at_the_end
                                                      , patterns_type = "ends")

  attr(magerman_remove_common_words_at_the_end, "@title") <-
      "Removes common words"



  ##' @eval attr(magerman_remove_common_words_at_the_beginning, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_remove_common_words_at_the_beginning <- make_alias(replace_patterns
                                                            , patterns = magerman_patterns_common_words_at_the_beginning
                                                            , patterns_type = "begins")

  attr(magerman_remove_common_words_at_the_beginning, "@title") <-
      "Removes common words"




  ##' @eval attr(magerman_remove_common_words_anywhere, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_remove_common_words_anywhere <- make_alias(replace_patterns
                                                    , patterns = magerman_patterns_common_words_anywhere
                                                    , patterns_type = "fixed")

  attr(magerman_remove_common_words_anywhere, "@title") <-
      "Removes common words"


  ##' @eval attr(magerman_remove_common_words, "@title")
  ##' @param x table
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##'
  ##' @md
  ##' @export
  magerman_remove_common_words <- function(x, ...) {
      x |>
          magerman_remove_common_words_at_the_end() |>
          magerman_remove_common_words_at_the_beginning() |>
          magerman_remove_common_words_anywhere()
  }

  attr(magerman_remove_common_words, "@title") <- "Removes common words"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_remove_common_words.r
  expect_equal(c("lksdjf MFG. GMBH CO,; INC"
               , "MSlab Co."
               , "IBM Corp."
               , " MSlab Co. GMBH & CO.KG lalal  "
               , "KABUSHIKI KAISHA MSlab Co.") |>
               toupper() |>
               magerman_remove_legal_form_and_clean() |>
               magerman_remove_common_words()
  , c("LKSDJF MFG. GMBH CO", "MSLAB ", "IBM ", "MSLAB &LALAL", "KABUSHIKI KAISHA MSLAB "))

#+END_SRC

** Spelling Variation
:PROPERTIES:
:ID:       org:dcijzmx01ei0
:END:

Table 22: Spelling variations and their standardized equivalent
#+NAME: magerman_patterns_spelling_variation
| KEYWORD          | REMARKS         |
|------------------+-----------------|
| 'SYSTEMEN'       | 'SYSTEM'        |
| 'SYSTEMES'       | 'SYSTEM'        |
| 'SYSTEME'        | 'SYSTEM'        |
| 'SYSTEMS'        | 'SYSTEM'        |
| 'INTERNATIONALE' | 'INTERNATIONAL' |
| 'TECHNOLOGIES'   | 'TECHNOLOGY'    |
| 'TECHNOLOGIEN'   | 'TECHNOLOGY'    |
| 'TECHNOLOGIE'    | 'TECHNOLOGY'    |
| 'INDUSTRIELLES'  | 'INDUSTRIEL'    |
| 'INDUSTRIELLE'   | 'INDUSTRIEL'    |
| 'INDUSTRIELE'    | 'INDUSTRIEL'    |
| 'INDUSTRIES'     | 'INDUSTRY'      |
| 'INDUSTRIELS'    | 'INDUSTRIEL'    |
| 'INSTITUT'       | 'INSTITUTE'     |
| 'SERVICES'       | 'SERVICE'       |
| 'ELECTRONICS'    | 'ELECTRONIC'    |
| 'ENTERPRISES'    | 'ENTERPRISE'    |
| 'DESIGNS'        | 'DESIGN'        |
| 'CHEMICALS'      | 'CHEMICAL'      |
| 'HOLDINGS'       | 'HOLDING'       |
| 'LABORATORIES'   | 'LABORATORY'    |
| 'COMMUNICATIONS' | 'COMMUNICATION' |
| 'INSTRUMENTS'    | 'INSTRUMENT'    |
| 'PLASTICS'       | 'PLASTIC'       |
| 'MACHINES'       | 'MACHINE'       |
| 'SCIENCES'       | 'SCIENCE'       |

#+call: make-rds-patterns-table(data = magerman_patterns_spelling_variation, data.name = "magerman_patterns_spelling_variation")

#+BEGIN_SRC R :tangle R/magerman.r
  ##' @eval attr(magerman_replace_spelling_variation, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_replace_spelling_variation <- make_alias(replace_patterns
                                                  , patterns = magerman_patterns_spelling_variation)

  attr(magerman_replace_spelling_variation, "@title") <-
      "Replaces spelling variation"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_replace_spelling_variation.r
  expect_equal(c("CHEMICALS SYSTEMEN MSlab Ltd."
               , "ELECTRONICS SYSTEMES MSlab Co.") |>
               magerman_replace_spelling_variation()
             , c("CHEMICAL SYSTEM MSlab Ltd.", "ELECTRONIC SYSTEM MSlab Co."))

#+END_SRC



** Condensing
:PROPERTIES:
:ID:       org:rl10al703ei0
:END:
#+BEGIN_SRC R :tangle R/magerman.r
  ##' @eval attr(magerman_condense, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  magerman_condense <- make_alias(replace_patterns
                                , patterns = "[^a-zA-Z0-9]+"
                                , patterns_type = "regex")

  attr(magerman_condense, "@title") <-
      "Condenses string"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_condense.r
  expect_equal(c("lksdjf MFG. GMBH CO,; INC"
               , "MSlab Co."
               , "IBM Corp."
               , " MSlab Co. GMBH & CO.KG lalal  "
               , "KABUSHIKI KAISHA MSlab Co.") |>
               magerman_condense()
             , c("lksdjfMFGGMBHCOINC", "MSlabCo", "IBMCorp", "MSlabCoGMBHCOKGlalal", "KABUSHIKIKAISHAMSlabCo"))
#+END_SRC



** Umlaut Standardization
:PROPERTIES:
:ID:       org:6lo7ug60gei0
:END:

Implementation

Firstly, all occurrences of “AE”, “OE” and “UE” are replaced with “A”, “O” and “U” respectively in all names (also in names originally containing no umlauts) by executing a series of update queries on the data.

Next, all occurrences of “A”, “O” and “U” are ag ain replaced with “AE”, “OE”, “UE” respectively in all names (also in names originally containing no umlauts) by executing a series of update queries on the data.

Next, all names originally containing an umlaut are marked by executing an update query on the data.

Next, all names having a preliminary umlaut standardized name (first removing “E” and next adding “E” from and to “A”, “O” and “U”) that is equal to a preliminary umlaut standardized name marked in the previous step as a name originally containing an umlaut are also marked by executing an update query on the data.

Finally, all preliminary umlaut standardized names not marked in the previous two steps are reverted to the previous cleaned name after condensing by executing an update query on the data.

p. 44

#+NAME: magerman_patterns_umlaut
| char | ascii | replacement |
|------+-------+-------------|
| Ä    | A     | AE          |
| Ö    | O     | OE          |
| Ü    | U     | UE          |
# | ä  | a     | ae          |
# | ö  | o     | oe          |
# | ü  | u     | ue          |

#+call: make-rds-patterns-table(data = magerman_patterns_umlaut, data.name = "magerman_patterns_umlaut")


:PROPERTIES:
:ID:       org:i680al703ei0
:END:
#+BEGIN_SRC R :tangle R/magerman.r


  ##' @eval attr(magerman_detect_umlaut, "@title")
  ##' @inherit detect_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso detect_patterns
  ##'
  ##' @md
  ##' @export
  magerman_detect_umlaut <- make_alias(detect_patterns
                                     , patterns = magerman_patterns_umlaut
                                     , patterns_type = "fixed"
                                     , patterns_codes = TRUE
                                     , no_match_code = FALSE
                                     , output_codes_col_name = "{col_name_}has_umlaut"
                                     , return_only_first_detected_code = TRUE
                                     , return_only_codes = FALSE)

  attr(magerman_detect_umlaut, "@title") <-
      "Detects umlauts"


  ##' @eval attr(magerman_replace_umlaut, "@title")
  ##' @param x Data
  ##' @param has_umlaut_col Column with logical values indicating weather a corresponding string has an umlaut. Default is NULL so it detects is automatically first
  ##' @param drop_has_umlaut_col Whether to drop `has_umlaut_col`. Default is FALSE
  ##' @param replace_accented_characters Whether to replace accented characters first. Default is FALSE
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##'
  ##' @md
  ##' @export
  magerman_replace_umlaut <- function(x
                                    , has_umlaut_col = NULL
                                    , drop_has_umlaut_col = TRUE
                                    , replace_accented_characters = FALSE
                                    , ...) {
      ## get x vector...
      x_vector <- get_target(x)
      ## identify names with umlauts
      if (!is.null(has_umlaut_col) & !is.atomic(x)) {
          has_umlaut <-
              get_target(x, col = has_umlaut_col, output_placement = "replace_col")
          checkmate::assert_logical(has_umlaut)
          ## drop has_umlaut_col
          if (isTRUE(drop_has_umlaut_col)) {
              x[[has_umlaut_col]] <- NULL
              ## make atomic just if only one col
              if(x_width(x) == 1) x <- x[[1]]
          }
      } else {
          replace_accented_characters <- TRUE
          has_umlaut <- 
              do.call(magerman_detect_umlaut
                    , c(list(x_vector)
                      , list(return_only_codes = TRUE)
                      , formals("standardize_options"))) |>
              as.logical()
      }
      ## replace accented characters
      if (replace_accented_characters) {
          ## do magerman_replace_accented_characters with defauls
          x_vector <-
              do.call(magerman_replace_accented_characters
                    , c(list(x_vector), formals("standardize_options")))
      }
      ## check if there are at least some umlauts
      if (any(has_umlaut)) {
          ## transform umlaut
          ## first "AE", "OE", "UE" -> "A", "O", "U"
          x_standardized <- 
              do.call(replace_patterns
                    , c(list(x_vector)
                      , formals("standardize_options")
                      , list(patterns = magerman_patterns_umlaut
                           , patterns_col = 3
                           , patterns_replacements_col = 2)))
          ## then "A", "O", "U" -> "AE", "OE", "UE"
          x_standardized <- 
              do.call(replace_patterns
                    , c(list(x_standardized)
                      , formals("standardize_options")
                      , list(patterns = magerman_patterns_umlaut
                            , patterns_col = 2
                           , patterns_replacements_col = 3)))
          ## check which one match original umlaut
          x_standardized_keep <-
              x_standardized %in%
              x_standardized[sapply(has_umlaut, isTRUE)]
          ## if does not match umlaut replace with original
          x_standardized[!x_standardized_keep] <-
              x_vector[!x_standardized_keep]
          ## return table
          return(inset_target(x_standardized, x))
      } else {
          return(inset_target(x_vector, x))
      }
  }

  attr(magerman_replace_umlaut, "@title") <- "Replaces Umlauts"
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_replace_umlaut.r
  expect_equal(
      c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
               , "MSLab Co."
               , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |>
      magerman_detect_umlaut()
  , structure(list(x = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab Co.", 
  "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
  ), x_has_umlaut = c(TRUE, FALSE, TRUE)), row.names = c(NA, -3L
  ), class = c("data.table", "data.frame"))
  )


  ## test naming
  expect_equal(c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
               , "MSLab Co."
               , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |>
               magerman_detect_umlaut(output_codes_col_name = "lala")
             , structure(list(x = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab Co.", 
                                     "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
                                     ), lala = c(TRUE, FALSE, TRUE)), row.names = c(NA, -3L), class = c("data.table", 
                                                                                                        "data.frame")))





  expect_equal(data.frame(
      test = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
             , "MSLab CÖ."
             , "MSLab Co."
             , "MSLaeb Comp."
             , "MSLab Comp."
             , "ÃÄÅÆÇÈÉÌÍÏÐÑÒÖØÚÝŸ") |> toupper()
    , log = "lot of coffee"
    , umlaut = c(TRUE, TRUE, FALSE, FALSE, FALSE, TRUE)) |>
    magerman_replace_umlaut(
        has_umlaut_col = "umlaut"
      , drop_has_umlaut_col = FALSE
      , replace_accented_characters = TRUE)
  , structure(list(test = c("MAEKAEROENI ETOE FKUESNOE LTD", "MSLAEB COE.", 
                            "MSLAEB COE.", "MSLAEB COMP.", "MSLAB COMP.", "AEAEAEAECEEIIIÐNOEOEØUEYY"
                            ), log = c("lot of coffee", "lot of coffee", "lot of coffee", 
                                       "lot of coffee", "lot of coffee", "lot of coffee"), umlaut = c(TRUE, 
                                                                                                      TRUE, FALSE, FALSE, FALSE, TRUE)), row.names = c(NA, -6L), class = c("data.table", 
                                                                                                                                                                           "data.frame")))







  expect_equal(data.frame(
      test = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
             , "MSLab CÖ."
             , "MSLab Co."
             , "MSLaeb Comp."
             , "MSLab Comp."
             , "ÃÄÅÆÇÈÉÌÍÏÐÑÒÖØÚÝŸ") |> toupper()
    , log = "lot of coffee"
    , umlaut = c(TRUE, TRUE, FALSE, TRUE, FALSE, TRUE)) |>
    magerman_replace_umlaut(
        has_umlaut_col = "umlaut"
      , drop_has_umlaut_col = FALSE
      , replace_accented_characters = TRUE)
  , structure(list(test = c("MAEKAEROENI ETOE FKUESNOE LTD", "MSLAEB COE.", 
                            "MSLAEB COE.", "MSLAEB COEMP.", "MSLAEB COEMP.", "AEAEAEAECEEIIIÐNOEOEØUEYY"
                            ), log = c("lot of coffee", "lot of coffee", "lot of coffee", 
                                       "lot of coffee", "lot of coffee", "lot of coffee"), umlaut = c(TRUE, 
                                                                                                      TRUE, FALSE, TRUE, FALSE, TRUE)), row.names = c(NA, -6L), class = c("data.table", 
                                                                                                                                                                          "data.frame")))








  ## test the col, rows args dependencies!
  expect_equal(data.frame(
      log = "lot of coffee"
    , test = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
             , "MSLab CÖ."
             , "MSLab Co."
             , "MSLaeb Comp."
             , "MSLab Comp."
             , "ÃÄÅÆÇÈÉÌÍÏÐÑÒÖØÚÝŸ") |> toupper()
    , umlaut = c(TRUE, TRUE, FALSE, TRUE, FALSE, TRUE)) |>
    magerman_replace_umlaut(
        has_umlaut_col = "umlaut"
      , drop_has_umlaut_col = FALSE
      , replace_accented_characters = TRUE
      , rows = c( FALSE, TRUE, FALSE, FALSE, FALSE, TRUE)
      , col = 2)
  , structure(list(log = c("lot of coffee", "lot of coffee", "lot of coffee", 
                           "lot of coffee", "lot of coffee", "lot of coffee"), test = c("MÄKARÖNI ETÖ FKÜSNÖ LTD", 
                                                                                        "MSLAEB COE.", "MSLAB CO.", "MSLAEB COMP.", "MSLAB COMP.", "AEAEAEAECEEIIIÐNOEOEØUEYY"
                                                                                        ), umlaut = c(TRUE, TRUE, FALSE, TRUE, FALSE, TRUE)), row.names = c(NA, 
                                                                                                                                                            -6L), class = c("data.table", "data.frame")))

#+END_SRC

  

** Combined Magerman Procedures
:PROPERTIES:
:ID:       org:x0v7ug60gei0
:END:

#+NAME: magerman_procedures_table
| no | message                                  | function.call                                                                   |
|----+------------------------------------------+---------------------------------------------------------------------------------|
|    |                                          |                                                                                 |
|    | *Prepossessing*                          |                                                                                 |
|  1 | Upper casing                             | 'standardize_toupper'                                                           |
|  2 | Cleaning spaces                          | 'standardize_squish_spaces'                                                     |
|    |                                          |                                                                                 |
|    | *Characters*                             |                                                                                 |
|  3 | Removing HTML codes                      | 'magerman_remove_html_codes'                                                    |
|  4 | Cleaning spaces (2)                      | 'standardize_squish_spaces'                                                     |
|  5 | Replacing SGML coded characters          | 'magerman_replace_sgml_characters'                                              |
|  6 | Replacing proprietary characters         | 'magerman_replace_proprietary_characters'                                       |
|  7 | Detecting Umlauts                        | 'magerman_detect_umlaut', output_codes_col_name = 'magerman_umlaut'                    |
|    |                                          | /The above sets code names with umlaut for umlaut standardization later/        |
|  8 | Replacing accented characters            | 'magerman_replace_accented_characters'                                          |
|    |                                          |                                                                                 |
|    | *Punctuation*                            |                                                                                 |
|  9 | Removing special characters              | 'magerman_remove_special_characters'                                            |
| 10 | Fixing quotation irregularities          | 'magerman_remove_double_quotation_marks_irregularities'                         |
| 11 | Removing double quotations               | 'magerman_remove_double_quotation_marks_beginning_end'                          |
| 12 | Removing non alphanumeric characters (1) | 'magerman_remove_non_alphanumeric_at_the_beginning'                             |
| 13 | Removing non alphanumeric characters (2) | 'magerman_remove_non_alphanumeric_at_the_end'                                   |
| 14 | Fixing comma and period irregularities   | 'magerman_replace_comma_period_irregularities'                                  |
|    |                                          |                                                                                 |
|    | *Legal forms*                            |                                                                                 |
| 15 | Detecting legal form                     | 'magerman_detect_legal_form', output_codes_col_name = 'legal_form'                     |
| 16 | Removing legal form                      | 'magerman_remove_legal_form_and_clean'                                          |
|    |                                          |                                                                                 |
|    | *Common words*                           |                                                                                 |
| 17 | Removing common words                    | 'magerman_remove_common_words'                                                  |
| 18 | Fixing spelling variations               | 'magerman_replace_spelling_variation'                                           |
| 19 | Condensing                               | 'magerman_condense'                                                             |
|    |                                          |                                                                                 |
|    | *Umlaut standardization*                 |                                                                                 |
| 20 | Fixing umlaut variations                 | 'magerman_replace_umlaut', has_umlaut_col = 'magerman_umlaut', progress = FALSE |
|    |                                          | /the above procedure wont work properly for batches/                            |
|    |                                          | /because it need to look up matches in the whole corpus/                        |
|    |                                          | /that is why we set 'progress = FALSE'/                                         |

#+call: make-rds-patterns-table(data = magerman_procedures_table, data.name = "magerman_procedures_table", remove.single.quotes = "FALSE")

#+call: make-rds-procedures-list(data = magerman_procedures_table, data.name = "magerman_procedures_list", remove.single.quotes = "FALSE")


#+BEGIN_SRC R :tangle R/magerman.r
  ##' Standardizes strings using exact procedures described in Magerman et al. 2009.
  ##' @param x table or vector
  ##' @param detect_legal_form Whether to detect legal forms. Default is FALSE
  ##' @param append_output_copy_before_common_words_removal Whether to save standardized column before `common.words.removal` procedure. Default is FALSE
  ##' @inheritDotParams standardize
  ##' @return standardized names table
  ##'
  ##' @references Magerman et al., 2006 - Data Production Methods for Harmonized Patent Statistics: Patentee Name Standardization
  ##'
  ##' @md
  ##' @export
  standardize_magerman <- function(x
                               , detect_legal_form = FALSE
                               , append_output_copy_before_common_words_removal = FALSE
                               , ...) {
      magerman_procedures <- magerman_procedures_list
      ## do some tweaks on magerman_procedures
      if (!detect_legal_form) {
          is_magerman_detect_legal_form <- 
              sapply(magerman_procedures
                   , \(p) p[[1]] == "magerman_detect_legal_form")
          magerman_procedures <-
              magerman_procedures[!is_magerman_detect_legal_form]
      }
      if (append_output_copy_before_common_words_removal) {
          which_is_magerman_remove_legal_form_and_clean <-
              sapply(magerman_procedures
                   , \(p) p[[1]] == "magerman_remove_legal_form_and_clean") |>
              which()
          magerman_procedures[[which_is_magerman_remove_legal_form_and_clean]] <-
              c(magerman_procedures[[which_is_magerman_remove_legal_form_and_clean]]
              , list(append_output_copy = TRUE
                   , output_copy_col_name = "{col_name_}before_common_words_removal"))
      }
      standardize(x, magerman_procedures, ...)
  }
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_standardize_magerman.r

  ## Test with return magerman_procedures in standardize_magerman
  standardize_magerman()


  ## Test
  expect_equal(data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                                 , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
                                 , "MSLab Co."
                                 , "MSLaeb Comp."
                                 , "MSLab Comp. Ltd."
                                 , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |>
                              rep(20) |>
                              toupper()
                        , foo = "I love coffee" ) |>
               standardize_magerman(nrows_min_to_show_progress = 50
                                , show_progress = TRUE
                                , detect_legal_form = FALSE
                                , quite = TRUE)
             , data.table(name = c("MAEKAEROENIETOEFKUESNOE"
                                 , "MSLAEBAEHREFLSDLDFAE"
                                 , "MSLAB"
                                 , "MSLAEBCOMP"
                                 , "MSLABCOMP"
                                 , "AEAEAEAEAEAEAECEEEEIIIINOEOEOEOEOEUEUEUEUEYY") |>
                              rep(20)
                        , foo = "I love coffee"))

  ## works now but weird naming of append_output_copy
  expect_equal(data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                                 , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
                                 , "MSLab Co."
                                 , "MSLaeb Comp."
                                 , "MSLab Comp. Ltd."
                                 , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |>
                              rep(10) |>
                              toupper()
                        , foo = "I love coffee" ) |>
               standardize_magerman(nrows_min_to_show_progress = 50
                                , show_progress = TRUE
                                , append_output_copy_before_common_words_removal = TRUE
                                , detect_legal_form = FALSE
                                , quite = TRUE)
             , data.table(name = c("MAEKAEROENIETOEFKUESNOE"
                                 , "MSLAEBAEHREFLSDLDFAE"
                                 , "MSLAB"
                                 , "MSLAEBCOMP"
                                 , "MSLABCOMP"
                                 , "AEAEAEAEAEAEAECEEEEIIIINOEOEOEOEOEUEUEUEUEYY") |>
                              rep(10)
                        , foo = "I love coffee"
                        , name_before_common_words_removal = c("MAKARONI ETO FKUSNO"
                                                             , "MSLAB CO. A HREFLSDLDF A"
                                                             , "MSLAB COMPANY"
                                                             , "MSLAEB COMP."
                                                             , "MSLAB COMP."
                                                             , "AAAAAAAECEEEEIIIINOOOOOUUUUYY") |>
                              rep(10)))

  ## test differe columns
  expect_equal(data.table(foo = "I love coffee"
                        , name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                                 , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
                                 , "MSLab Co."
                                 , "MSLaeb Comp."
                                 , "MSLab Comp. Ltd."
                                 , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |>
                              rep(10) |>
                              toupper()) |>
               standardize_magerman(col = 2
                                , nrows_min_to_show_progress = 50
                                , show_progress = TRUE
                                , detect_legal_form = FALSE
                                , quite = TRUE)
             , data.table(foo = "I love coffee"
                        , name = c("MAEKAEROENIETOEFKUESNOE"
                                 , "MSLAEBAEHREFLSDLDFAE"
                                 , "MSLAB"
                                 , "MSLAEBCOMP"
                                 , "MSLABCOMP"
                                 , "AEAEAEAEAEAEAECEEEEIIIINOEOEOEOEOEUEUEUEUEYY") |>
                              rep(10)))


  ## issue with name match in detect_patterns with return_only_codes
  expect_equal(data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                                 , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
                                 , "MSLab Co."
                                 , "MSLaeb Comp."
                                 , "MSLab Comp. Ltd."
                                 , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |>
                              rep(10) |>
                              toupper()
                        , foo = "I love coffee" ) |>
               standardize_magerman(nrows_min_to_show_progress = 50
                                , show_progress = TRUE
                                , detect_legal_form = TRUE
                                , quite = TRUE)
             , data.table(name = c("MAEKAEROENIETOEFKUESNOE"
                                 , "MSLAEBAEHREFLSDLDFAE"
                                 , "MSLAB"
                                 , "MSLAEBCOMP"
                                 , "MSLABCOMP"
                                 , "AEAEAEAEAEAEAECEEEEIIIINOEOEOEOEOEUEUEUEUEYY") |>
                              rep(10)
                        , foo = "I love coffee"
                        , name_legal_form = c("LIMITED", NA, NA, NA, "LIMITED", NA)|>
                              rep(10)))


  ## test standartization itself
  expect_equal(c("SGS-THOMSON MICROELECTRONICS"
               , "S.G.S. THOMSON MICROELECTRONICS S.R.L."
               , "S.G.S. THOMSON MICROELECTRONICS, S.R.L."
               , "S.G.S.-THOMSON MICROELECTRONICS S.R.L."
               , "SGS - THOMSON MICROELECTRONICS S.A."
               , "SGS - THOMSON MICROELECTRONICS S.R.L."
               , "SGS - THOMSON MICROELECTRONICS, INC."
               , "SGS - THOMSON MICROELECTRONICS, S.R.L."
               , "SGS THOMSON MICROELECTRONICS S.A."
               , "SGS THOMSON MICROELECTRONICS S.R.L."
               , "SGS THOMSON MICROELECTRONICS SA"
               , "SGS THOMSON MICROELECTRONICS SRL"
               , "SGS THOMSON MICROELECTRONICS, INC."
               , "SGS THOMSON MICROELECTRONICS, S.A."
               , "SGS- THOMSON MICROELECTRONICS, S.A."
               , "SGS THOMSON MICROELECTRONICS, S.R.L."
               , "SGS- THOMSON MICROELECTRONICS<BR>(PTE) LTD."
               , "SGS THOMSON-MICROELECTRONICS SA"
               , "SGS-THOMSON MICROELECTRONIC S.A."
               , "SGS-THOMSON MICROELECTRONICS"
               , "SGS-THOMSON MICROELECTRONICS GMBH"
               , "SGS-THOMSON MICROELECTRONICS INC."
               , "SGS-THOMSON MICROELECTRONICS LIMITED"
               , "SGS-THOMSON MICROELECTRONICS LTD."
               , "SGS-THOMSON MICROELECTRONICS PTE LTD"
               , "SGS-THOMSON MICROELECTRONICS PTE LTD."
               , "SGS-THOMSON MICROELECTRONICS PTE. LIMITED"
               , "SGS-THOMSON MICROELECTRONICS PTE. LTD."
               , "SGS-THOMSON MICROELECTRONICS S. R. L."
               , "SGS-THOMSON MICROELECTRONICS S.A"
               , "SGS-THOMSON MICROELECTRONICS S.A."
               , "SGS-THOMSON MICROELECTRONICS S.P.A."
               , "SGS-THOMSON MICROELECTRONICS S.R. L."
               , "SGS-THOMSON MICROELECTRONICS S.R.L"
               , "SGS-THOMSON MICROELECTRONICS S.R.L."
               , "SGS--THOMSON MICROELECTRONICS S.R.L."
               , "SGS-THOMSON MICROELECTRONICS SA"
               , "SGS-THOMSON MICROELECTRONICS SPA"
               , "SGS-THOMSON MICROELECTRONICS SRL"
               , "SGS-THOMSON MICROELECTRONICS SRL."
               , "SGS-THOMSON MICROELECTRONICS, GMBH"
               , "SGS-THOMSON MICROELECTRONICS, INC"
               , "SGS-THOMSON MICROELECTRONICS, INC."
               , "SGS-THOMSON MICROELECTRONICS, LTD."
               , "SGS-THOMSON MICROELECTRONICS, PTE LTD."
               , "SGS-THOMSON MICROELECTRONICS, S.A."
               , "SGS-THOMSON MICROELECTRONICS, S.R.L."
               , "SGS-THOMSON MICROELECTRONICS, S.RL"
               , "SGS-THOMSON MICROELECTRONICS, SA"
               , "SGS-THOMSON MICROELECTRONICS, SA."
               , "SGS-THOMSON MICROELECTRONICS, SRL"
               , "SGS-THOMSON MICROELECTRONICS,S.R.L.") |>
               standardize_magerman(quite = TRUE)
             , rep("SGSTHOMSONMICROELECTRONIC", 52))


  expect_equal(c("E.I. DU PONT DE NEMOURS & COMPANY"
               , "E I DU PONT DE NEMOURS AND COMPANY"
               , "E I DUPONT DE NEMOURS AND COMPANY"
               , "E I. DU PONT DE NEMOURS AND COMPANY"
               , "E. .I DU PONT DE NEMOURS AND COMPANY"
               , "E. I DU PONT DE NEMOURS AND COMPANY"
               , "E. I DU PONT DE NEMOURS AND COMPANY."
               , "E. I. DU PONT DE NEMOURS"
               , "E. I. DU PONT DE NEMOURS & CO"
               , "E. I. DU PONT DE NEMOURS & CO."
               , "E. I. DU PONT DE NEMOURS & CO. (INC.)"
               , "E. I. DU PONT DE NEMOURS & CO., INC."
               , "E. I. DU PONT DE NEMOURS & COMPANY"
               , "E. I. DU PONT DE NEMOURS AND CO."
               , "E. I. DU PONT DE NEMOURS AND CO., INC."
               , "E. I. DU PONT DE NEMOURS AND COMPANY"
               , "E. I. DU PONT DE NEMOURS AND COMPANY, INC."
               , "E. I. DU PONT DE NEMOURS AND COMPANY."
               , "E. I. DU PONT DE NEMOURS CO."
               , "E. I. DU PONT DE NEMOURS CO., INC."
               , "E. I. DU PONT DE NEMOURS COMPANY"
               , "E. I. DU PONT DE NEMOURS COMPANY, INC."
               , "E. I. DUPONT DE NEMOURS & CO."
               , "E. I. DUPONT DE NEMOURS & COMPANY"
               , "E. I. DUPONT DE NEMOURS AND COMPANY"
               , "E. I. DUPONT DENEMOURS & COMPANY"
               , "E. I. DUPONT DENEMOURS AND COMPANY"
               , "E. I.DU PONT DE NEMOURS AND COMPANY"
               , "E.I . DU PONT DE NEMOURS AND COMPANY"
               , "E.I. DU PONT DE NEMOURS & CO."
               , "E.I. DU PONT DE NEMOURS & CO., INC."
               , "E.I. DU PONT DE NEMOURS & COMPANY"
               , "E.I. DU PONT DE NEMOURS & COMPANY, INC"
               , "E.I. DU PONT DE NEMOURS &AMP; CO. (INC.)"
               , "E.I. DU PONT DE NEMOURS &AMP; COMPANY"
               , "E.I. DU PONT DE NEMOURS &AMP; COMPANY INC."
               , "E.I. DU PONT DE NEMOURS &AMP;"
                 ## , "E.I. DU PONT DE NEMOURS &AMP; COMPAY, INC."
               , "E.I. DU PONT DE NEMOURS AND COMPANY"
               , "E.I. DU PONT DE NEMOURS<BR>AND CO."
               , "E.I. DU PONT DE NEMOURS<BR>AND COMPANY"
               , "E.I. DUPONT DE NEMOURS"
               , "E.I. DUPONT DE NEMOURS & CO."
               , "E.I. DUPONT DE NEMOURS & COMPANY"
               , "E.I. DUPONT DE NEMOURS AND CO."
               , "E.I. DUPONT DE NEMOURS AND COMPANY"
               , "E.I. DUPONT DE NEMOURS AND COMPANY, INC."
               , "E.I. DUPONT DENEMOURS & COMPANY"
               , "E.I. DUPONT DENEMOURS AND COMPANY"
               , "E.I.DU PONT DE NEMOURS AND COMPANY"
               , "EI DU PONT DE NEMOURS AND COMPANY"
               , "EI DUPONT DE NEMOURS AND COMPANY") |>
               standardize_magerman(quite = TRUE)
             , rep("EIDUPONTDENEMOURS", 51))

  expect_equal(c("Chip &AMP; Dayle (lala) [0x2345] {abs} ops html <br>"
               , "&AMP;&OACUTE;&SECT; 02937lkjfas;ldjf  &UACUTE;&#8902;&BULL; sdlfkjhhhh ;laskdjf&EXCL;"
               , "&AMP;&OACUTE;&SECT; {UMLAUT OVER (E)} sdlfkjhhhh ;laskdjf&EXCL;"
               , "ŠŒŽšœžŸ¥µÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýÿ"
               , "LK \tD©𝍎 ၍\tF:'\";092834!@#$%^&*()_+-\n\t"
               , "  a   string with   many      douple    spaces      "
               , "\"\" Merry  \"Cristmas\" Love\"\""
               , "\"\"Merry  \"Cristmas\" Love\"\""
               , "MSLab Co.++"
               , "A sentence with .irregular punctuation ,like commas , and periods ."
               , "MSlab ,INC. ,LTD"
               , "CHEMICALS SYSTEMEN MSlab Ltd."
               , "MSLab CÖ.") |>
               standardize_magerman(quite = TRUE)
             , c("CHIPDAYLELALA0X2345ABSOPSHTML", "O02937LKJFASLDJFUSDLFKJHHHHLASKDJF", 
                 "OESDLFKJHHHHLASKDJF", "YAEAEAEAEAEAEAECEEEEIIIINOEOEOEOEOEUEUEUEUEYAEAEAEAEAEAEAECEEEEIIIINOEOEOEOEOEUEUEUEUEYY", 
                 "LKDF092834", "ASTRINGWITHMANYDOUPLESPACES", "MERRYCRISTMASLOVE", 
                 "MERRYCRISTMASLOVE", "MSLAEB", "ASENTENCEWITHIRREGULARPUNCTUATIONLIKECOMMASANDPERIODS", 
                 "MSLAEB", "CHEMICALSYSTEMMSLAB", "MSLAEB"))

#+END_SRC


* Cockburn, et al. (2009) - Standardization Procedure
** Utils
*** cockburn_combabbrev
:PROPERTIES:
:ID:       org:z3bhq6914gi0
:END:

#+BEGIN_SRC R :tangle R/cockburn.r
  ##' Collapses single character sequences
  ##'
  ##' @param x Object (table or vector)
  ##' @param wrap_in_spaces Whether to wrap strings in spaces before processing because the algorithm assumes assumes that each string begins and ends with space. Default is TRUE.
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' 
  ##' @md 
  ##' @export 
  cockburn_combabbrev <- function(x
                                , wrap_in_spaces = TRUE
                                , ...) {
      x_vector <- get_target(x) 
      ## wrap in spaces
      if (wrap_in_spaces) {
          x_vector <- paste0(" ", x_vector, " ")
      }
      ## collapse
      sapply(x_vector, \(org_name) {
          reg  <- gregexpr("(?=\\s\\w(\\s+)\\w\\s)", org_name, perl = TRUE)
          ## check if there are matches
          if(reg[[1]][1] != -1) {
              char <- strsplit(org_name, "", fixed = TRUE) |> unlist()
              pos <- mapply(function(from, length.out) seq(from, length.out = length.out)
                          , from = attr(reg[[1]],"capture.start")
                          , length.out = attr(reg[[1]],"capture.length")
                          , SIMPLIFY = FALSE) |> unlist()
              char[pos] <- ""
              char |> paste(collapse = "")
          } else {
              org_name
          }
      }, USE.NAMES = FALSE) |>
          inset_target(x)
  }


#+END_SRC


#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_combabbrev.r
  expect_equal(c(" A B Comp"
               , " A  B Comp a"
               , " I B M "
               , "I B M bla-bla n bla C O") |>
               cockburn_combabbrev()
             , c("  AB Comp ", "  AB Comp a ", 
                 "  IBM  ", " IBM bla-bla n bla CO "
                 ))



  expect_equal(data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                                 , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
                                 , " M S Lab Co."
                                 , "MSLaeb Comp."
                                 , "MSLab Comp. Ltd."
                                 , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |> rep(20)
                        , foo = "I love coffee" ) |>
               cockburn_combabbrev()
             , structure(list(name = c(" MÄKARÖNI ETÖ FKÜSNÖ Ltd ", " MSLab CÖ. <a href=lsdldf> <br> <\\a> ", 
                                       "  MS Lab Co. ", " MSLaeb Comp. ", " MSLab Comp. Ltd. ", " ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ ") |> rep(20)
                            , foo = c("I love coffee"|> rep(120))), row.names = c(NA, -120L), class = c("data.table", 
                                                                                                        "data.frame")))

  expect_equal({
  a <- c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
      , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
      , " M S Lab Co."
      , "MSLaeb Comp."
      , "MSLab Comp. Ltd."
      , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |>
      cockburn_combabbrev()
  }
  , c(" MÄKARÖNI ETÖ FKÜSNÖ Ltd ", " MSLab CÖ. <a href=lsdldf> <br> <\\a> ", 
  "  MS Lab Co. ", " MSLaeb Comp. ", " MSLab Comp. Ltd. ", " ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ "
  )
  )



#+END_SRC




** Standartization
*** Derwent
:PROPERTIES:
:ID:       org:y5ghq6914gi0
:END:

Implementation of derwent_standardisation_BHH.do from https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded

"This is practically code for the Derwent standard. However, with these commands the order they are executed is key and has been changed. The following is a list of other changes:

1) Processing for und and et removed.
2) LIMITED -> LTD added by BHH
3) various US changes by BHH
4) space before and after added by BHH"


#+BEGIN_SRC R :tangle R/cockburn.r
  ##' @eval attr(cockburn_replace_derwent, "@title")
  ##' @description It is a version from Cockburn, I. M., A. Agrawal,
  ##'     J. Bessen, J. H. S. Graham, B. H. Hall, and M. MacGarvie
  ##'     (2009), The NBER Patent Citations Datafile Update. It differs
  ##'     from original dervert standartization
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  cockburn_replace_derwent <- make_alias(replace_patterns
                                       , patterns = cockburn_patterns_derwent
                                       , patterns_mode = "first")

  attr(cockburn_replace_derwent, "@title") <-
      "Performs Derwent standardization of organizational names"
#+END_SRC

**** Derwent Standartization Table
#+call: make-rds-patterns-table(data = cockburn_patterns_derwent, data.name = "cockburn_patterns_derwent"))
#+NAME: cockburn_patterns_derwent
| pattern                                                                        | replacement          |
|--------------------------------------------------------------------------------+----------------------|
| ' A B '                                                                        | ' AB '               |
| ' A CALIFORNIA CORP '                                                          | ' CORP '             |
| ' A DELAWARE CORP '                                                            | ' CORP '             |
| ' AKTIEBOLAGET '                                                               | ' AB '               |
| ' AKTIEBOLAG '                                                                 | ' AB '               |
| ' ACADEMY '                                                                    | ' ACAD '             |
| ' ACTIEN GESELLSCHAFT '                                                        | ' AG '               |
| ' ACTIENGESELLSCHAFT '                                                         | ' AG '               |
| ' AKTIEN GESELLSCHAFT '                                                        | ' AG '               |
| ' AKTIENGESELLSCHAFT '                                                         | ' AG '               |
| ' AGRICOLAS '                                                                  | ' AGRIC '            |
| ' AGRICOLA '                                                                   | ' AGRIC '            |
| ' AGRICOLES '                                                                  | ' AGRIC '            |
| ' AGRICOLE '                                                                   | ' AGRIC '            |
| ' AGRICOLI '                                                                   | ' AGRIC '            |
| ' AGRICOLTURE '                                                                | ' AGRIC '            |
| ' AGRICULTURA '                                                                | ' AGRIC '            |
| ' AGRICULTURAL '                                                               | ' AGRIC '            |
| ' AGRICULTURE '                                                                | ' AGRIC '            |
| ' AKADEMIA '                                                                   | ' AKAD '             |
| ' AKADEMIEI '                                                                  | ' AKAD '             |
| ' AKADEMIE '                                                                   | ' AKAD '             |
| ' AKADEMII '                                                                   | ' AKAD '             |
| ' AKADEMIJA '                                                                  | ' AKAD '             |
| ' AKADEMIYA '                                                                  | ' AKAD '             |
| ' AKADEMIYAKH '                                                                | ' AKAD '             |
| ' AKADEMIYAM '                                                                 | ' AKAD '             |
| ' AKADEMIYAMI '                                                                | ' AKAD '             |
| ' AKADEMIYU '                                                                  | ' AKAD '             |
| ' AKADEMI '                                                                    | ' AKAD '             |
| ' ALLGEMEINER '                                                                | ' ALLG '             |
| ' ALLGEMEINE '                                                                 | ' ALLG '             |
| ' ANTREPRIZA '                                                                 | ' ANTR '             |
| ' APARARII '                                                                   | ' APAR '             |
| ' APARATELOR '                                                                 | ' APAR '             |
| ' APPARATEBAU '                                                                | ' APP '              |
| ' APPARATUS '                                                                  | ' APP '              |
| ' APPARECHHI '                                                                 | ' APP '              |
| ' APPAREILLAGES '                                                              | ' APP '              |
| ' APPAREILLAGE '                                                               | ' APP '              |
| ' APPAREILS '                                                                  | ' APP '              |
| ' APPAREIL '                                                                   | ' APP '              |
| ' APARATE '                                                                    | ' APAR '             |
| ' APPARATE '                                                                   | ' APP '              |
| ' APPLICATIONS '                                                               | ' APPL '             |
| ' APPLICATION '                                                                | ' APPL '             |
| ' APPLICAZIONE '                                                               | ' APPL '             |
| ' APPLICAZIONI '                                                               | ' APPL '             |
| ' ANPARTSSELSKABET '                                                           | ' APS '              |
| ' ANPARTSSELSKAB '                                                             | ' APS '              |
| ' A/S '                                                                        | ' AS '               |
| ' AKTIESELSKABET '                                                             | ' AS '               |
| ' AKTIESELSKAB '                                                               | ' AS '               |
| ' ASSOCIACAO '                                                                 | ' ASSOC '            |
| ' ASSOCIATED '                                                                 | ' ASSOC '            |
| ' ASSOCIATES '                                                                 | ' ASSOCIATES '       |
| ' ASSOCIATE '                                                                  | ' ASSOCIATES '       |
| ' ASSOCIATION '                                                                | ' ASSOC '            |
| ' BETEILIGUNGSGESELLSCHAFT MBH '                                               | ' BET GMBH '         |
| ' BETEILIGUNGS GESELLSCHAFT MIT '                                              | ' BET GMBH '         |
| ' BETEILIGUNGSGESELLSCHAFT '                                                   | ' BET GES '          |
| ' BESCHRANKTER HAFTUNG '                                                       | ' BET GMBH '         |
| ' BROEDERNA '                                                                  | ' BRDR '             |
| ' BROEDRENE '                                                                  | ' BRDR '             |
| ' BRODERNA '                                                                   | ' BRDR '             |
| ' BRODRENE '                                                                   | ' BRDR '             |
| ' BROTHERS '                                                                   | ' BROS '             |
| ' BESLOTEN VENNOOTSCHAP MET '                                                  | ' BV '               |
| ' BESLOTEN VENNOOTSCHAP '                                                      | ' BV '               |
| ' BEPERKTE AANSPRAKELIJKHEID '                                                 | ' BV '               |
| ' CLOSE CORPORATION '                                                          | ' CC '               |
| ' CENTER '                                                                     | ' CENT '             |
| ' CENTRAAL '                                                                   | ' CENT '             |
| ' CENTRALA '                                                                   | ' CENT '             |
| ' CENTRALES '                                                                  | ' CENT '             |
| ' CENTRALE '                                                                   | ' CENT '             |
| ' CENTRAL '                                                                    | ' CENT '             |
| ' CENTRAUX '                                                                   | ' CENT '             |
| ' CENTRE '                                                                     | ' CENT '             |
| ' CENTRO '                                                                     | ' CENT '             |
| ' CENTRUL '                                                                    | ' CENT '             |
| ' CENTRUM '                                                                    | ' CENT '             |
| ' CERCETARE '                                                                  | ' CERC '             |
| ' CERCETARI '                                                                  | ' CERC '             |
| ' CHEMICALS '                                                                  | ' CHEM '             |
| ' CHEMICAL '                                                                   | ' CHEM '             |
| ' CHEMICKEJ '                                                                  | ' CHEM '             |
| ' CHEMICKE '                                                                   | ' CHEM '             |
| ' CHEMICKYCH '                                                                 | ' CHEM '             |
| ' CHEMICKY '                                                                   | ' CHEM '             |
| ' CHEMICZNE '                                                                  | ' CHEM '             |
| ' CHEMICZNY '                                                                  | ' CHEM '             |
| ' CHEMIE '                                                                     | ' CHEM '             |
| ' CHEMII '                                                                     | ' CHEM '             |
| ' CHEMISCHE '                                                                  | ' CHEM '             |
| ' CHEMISCH '                                                                   | ' CHEM '             |
| ' CHEMISKEJ '                                                                  | ' CHEM '             |
| ' CHEMISTRY '                                                                  | ' CHEM '             |
| ' CHIMICA '                                                                    | ' CHIM '             |
| ' CHIMICE '                                                                    | ' CHIM '             |
| ' CHIMICI '                                                                    | ' CHIM '             |
| ' CHIMICO '                                                                    | ' CHIM '             |
| ' CHIMIC '                                                                     | ' CHIM '             |
| ' CHIMIEI '                                                                    | ' CHIM '             |
| ' CHIMIE '                                                                     | ' CHIM '             |
| ' CHIMIESKOJ '                                                                 | ' CHIM '             |
| ' CHIMII '                                                                     | ' CHIM '             |
| ' CHIMIKO '                                                                    | ' CHIM '             |
| ' CHIMIQUES '                                                                  | ' CHIM '             |
| ' CHIMIQUE '                                                                   | ' CHIM '             |
| ' CHIMIYAKH '                                                                  | ' CHIM '             |
| ' CHIMIYAMI '                                                                  | ' CHIM '             |
| ' CHIMIYAM '                                                                   | ' CHIM '             |
| ' CHIMIYA '                                                                    | ' CHIM '             |
| ' CHIMIYU '                                                                    | ' CHIM '             |
| ' COMPAGNIE FRANCAISE '                                                        | ' CIE FR '           |
| ' COMPAGNIE GENERALE '                                                         | ' CIE GEN '          |
| ' COMPAGNIE INDUSTRIALE '                                                      | ' CIE IND '          |
| ' COMPAGNIE INDUSTRIELLE '                                                     | ' CIE IND '          |
| ' COMPAGNIE INDUSTRIELLES '                                                    | ' CIE IND '          |
| ' COMPAGNIE INTERNATIONALE '                                                   | ' CIE INT '          |
| ' COMPAGNIE NATIONALE '                                                        | ' CIE NAT '          |
| ' COMPAGNIE PARISIENNE '                                                       | ' CIE PARIS '        |
| ' COMPAGNIE PARISIENN '                                                        | ' CIE PARIS '        |
| ' COMPAGNIE PARISIEN '                                                         | ' CIE PARIS '        |
| ' COMPANIES '                                                                  | ' CO '               |
| ' COMPAGNIA '                                                                  | ' CIA '              |
| ' COMPANHIA '                                                                  | ' CIA '              |
| ' COMPAGNIE '                                                                  | ' CIE '              |
| ' COMPANY '                                                                    | ' CO '               |
| ' COMBINATUL '                                                                 | ' COMB '             |
| ' COMMERCIALE '                                                                | ' COMML '            |
| ' COMMERCIAL '                                                                 | ' COMML '            |
| ' CONSOLIDATED '                                                               | ' CONSOL '           |
| ' CONSTRUCCIONES '                                                             | ' CONSTR '           |
| ' CONSTRUCCIONE '                                                              | ' CONSTR '           |
| ' CONSTRUCCION '                                                               | ' CONSTR '           |
| ' CONSTRUCTIE '                                                                | ' CONSTR '           |
| ' CONSTRUCTII '                                                                | ' CONSTR '           |
| ' CONSTRUCTIILOR '                                                             | ' CONSTR '           |
| ' CONSTRUCTIONS '                                                              | ' CONSTR '           |
| ' CONSTRUCTION '                                                               | ' CONSTR '           |
| ' CONSTRUCTORTUL '                                                             | ' CONSTR '           |
| ' CONSTRUCTORUL '                                                              | ' CONSTR '           |
| ' CONSTRUCTOR '                                                                | ' CONSTR '           |
| ' CO OPERATIVES '                                                              | ' COOP '             |
| ' CO OPERATIVE '                                                               | ' COOP '             |
| ' COOPERATIEVE '                                                               | ' COOP '             |
| ' COOPERATIVA '                                                                | ' COOP '             |
| ' COOPERATIVES '                                                               | ' COOP '             |
| ' COOPERATIVE '                                                                | ' COOP '             |
| ' INCORPORATED '                                                               | ' INC '              |
| ' INCORPORATION '                                                              | ' INC '              |
| ' CORPORATE '                                                                  | ' CORP '             |
| ' CORPORATION OF AMERICA '                                                     | ' CORP '             |
| ' CORPORATION '                                                                | ' CORP '             |
| ' CORPORASTION '                                                               | ' CORP '             |
| ' CORPORATIOON '                                                               | ' CORP '             |
| ' COSTRUZIONI '                                                                | ' COSTR '            |
| ' DEUTSCHEN '                                                                  | ' DDR '              |
| ' DEUTSCHE '                                                                   | ' DDR '              |
| ' DEMOKRATISCHEN REPUBLIK '                                                    | ' DDR '              |
| ' DEMOKRATISCHE REPUBLIK '                                                     | ' DDR '              |
| ' DEPARTEMENT '                                                                | ' DEPT '             |
| ' DEPARTMENT '                                                                 | ' DEPT '             |
| ' DEUTSCHES '                                                                  | ' DEUT '             |
| ' DEUTSCHEN '                                                                  | ' DEUT '             |
| ' DEUTSCHER '                                                                  | ' DEUT '             |
| ' DEUTSCHLAND '                                                                | ' DEUT '             |
| ' DEUTSCHE '                                                                   | ' DEUT '             |
| ' DEUTSCH '                                                                    | ' DEUT '             |
| ' DEVELOPMENTS '                                                               | ' DEV '              |
| ' DEVELOPMENT '                                                                | ' DEV '              |
| ' DEVELOPPEMENTS '                                                             | ' DEV '              |
| ' DEVELOPPEMENT '                                                              | ' DEV '              |
| ' DEVELOP '                                                                    | ' DEV '              |
| ' DIVISIONE '                                                                  | ' DIV '              |
| ' DIVISION '                                                                   | ' DIV '              |
| ' ENGINEERING '                                                                | ' ENG '              |
| ' EQUIPEMENTS '                                                                | ' EQUIP '            |
| ' EQUIPEMENT '                                                                 | ' EQUIP '            |
| ' EQUIPMENTS '                                                                 | ' EQUIP '            |
| ' EQUIPMENT '                                                                  | ' EQUIP '            |
| ' ESTABLISHMENTS '                                                             | ' ESTAB '            |
| ' ESTABLISHMENT '                                                              | ' ESTAB '            |
| ' ESTABLISSEMENTS '                                                            | ' ESTAB '            |
| ' ESTABLISSEMENT '                                                             | ' ESTAB '            |
| ' ETABLISSEMENTS '                                                             | ' ETAB '             |
| ' ETABLISSEMENT '                                                              | ' ETAB '             |
| ' ETABS '                                                                      | ' ETAB '             |
| ' ETS '                                                                        | ' ETAB '             |
| ' ETUDES '                                                                     | ' ETUD '             |
| ' ETUDE '                                                                      | ' ETUD '             |
| ' EUROPAEISCHEN '                                                              | ' EURO '             |
| ' EUROPAEISCHES '                                                              | ' EURO '             |
| ' EUROPAEISCHE '                                                               | ' EURO '             |
| ' EUROPAISCHEN '                                                               | ' EURO '             |
| ' EUROPAISCHES '                                                               | ' EURO '             |
| ' EUROPAISCHE '                                                                | ' EURO '             |
| ' EUROPEAN '                                                                   | ' EURO '             |
| ' EUROPEENNE '                                                                 | ' EURO '             |
| ' EUROPEEN '                                                                   | ' EURO '             |
| ' EUROPEA '                                                                    | ' EURO '             |
| ' EUROPE '                                                                     | ' EURO '             |
| ' EINGETRAGENER VEREIN '                                                       | ' EV '               |
| ' EXPLOATERINGS '                                                              | ' EXPL '             |
| ' EXPLOATERING '                                                               | ' EXPL '             |
| ' EXPLOITATIE '                                                                | ' EXPL '             |
| ' EXPLOITATIONS '                                                              | ' EXPL '             |
| ' EXPLOITATION '                                                               | ' EXPL '             |
| ' FIRMA '                                                                      | ' FA '               |
| ' FABBRICAZIONI '                                                              | ' FAB '              |
| ' FABBRICHE '                                                                  | ' FAB '              |
| ' FABRICATIONS '                                                               | ' FAB '              |
| ' FABRICATION '                                                                | ' FAB '              |
| ' FABBRICA '                                                                   | ' FAB '              |
| ' FABRICA '                                                                    | ' FAB '              |
| ' FABRIEKEN '                                                                  | ' FAB '              |
| ' FABRIEK '                                                                    | ' FAB '              |
| ' FABRIKER '                                                                   | ' FAB '              |
| ' FABRIK '                                                                     | ' FAB '              |
| ' FABRIQUES '                                                                  | ' FAB '              |
| ' FABRIQUE '                                                                   | ' FAB '              |
| ' FABRIZIO '                                                                   | ' FAB '              |
| ' FABRYKA '                                                                    | ' FAB '              |
| ' FARMACEUTICA '                                                               | ' FARM '             |
| ' FARMACEUTICE '                                                               | ' FARM '             |
| ' FARMACEUTICHE '                                                              | ' FARM '             |
| ' FARMACEUTICI '                                                               | ' FARM '             |
| ' FARMACEUTICOS '                                                              | ' FARM '             |
| ' FARMACEUTICO '                                                               | ' FARM '             |
| ' FARMACEUTISK '                                                               | ' FARM '             |
| ' FARMACEVTSKIH '                                                              | ' FARM '             |
| ' FARMACIE '                                                                   | ' FARM '             |
| ' FONDATION '                                                                  | ' FOND '             |
| ' FONDAZIONE '                                                                 | ' FOND '             |
| ' FOUNDATIONS '                                                                | ' FOUND '            |
| ' FOUNDATION '                                                                 | ' FOUND '            |
| ' FRANCAISE '                                                                  | ' FR '               |
| ' FRANCAIS '                                                                   | ' FR '               |
| ' F LLI '                                                                      | ' FRAT '             |
| ' FLLI '                                                                       | ' FRAT '             |
| ' FRATELLI '                                                                   | ' FRAT '             |
| ' GEBRODERS '                                                                  | ' GEBR '             |
| ' GEBRODER '                                                                   | ' GEBR '             |
| ' GEBROEDERS '                                                                 | ' GEBR '             |
| ' GEBROEDER '                                                                  | ' GEBR '             |
| ' GEBRUDERS '                                                                  | ' GEBR '             |
| ' GEBRUDER '                                                                   | ' GEBR '             |
| ' GEBRUEDERS '                                                                 | ' GEBR '             |
| ' GEBRUEDER '                                                                  | ' GEBR '             |
| ' GEB '                                                                        | ' GEBR '             |
| ' GENERALA '                                                                   | ' GEN '              |
| ' GENERALES '                                                                  | ' GEN '              |
| ' GENERALE '                                                                   | ' GEN '              |
| ' GENERAL '                                                                    | ' GEN '              |
| ' GENERAUX '                                                                   | ' GEN '              |
| ' GESELLSCHAFT '                                                               | ' GES '              |
| ' GEWERKSCHAFT '                                                               | ' GEW '              |
| ' GAKKO HOJIN '                                                                | ' GH '               |
| ' GAKKO HOUJIN '                                                               | ' GH '               |
| ' GUTEHOFFNUNGSCHUETTE '                                                       | ' GHH '              |
| ' GUTEHOFFNUNGSCHUTTE '                                                        | ' GHH '              |
| ' GOMEI GAISHA '                                                               | ' GK '               |
| ' GOMEI KAISHA '                                                               | ' GK '               |
| ' GOSHI KAISHA '                                                               | ' GK '               |
| ' GOUSHI GAISHA '                                                              | ' GK '               |
| ' GESELLSCHAFT MBH '                                                           | ' GMBH '             |
| ' GESELLSCHAFT MIT BESCHRANKTER HAFTUNG '                                      | ' GMBH '             |
| ' GROUPEMENT '                                                                 | ' GRP '              |
| ' GROUPMENT '                                                                  | ' GRP '              |
| ' HANDELSMAATSCHAPPIJ '                                                        | ' HANDL '            |
| ' HANDELSMIJ '                                                                 | ' HANDL '            |
| ' HANDELS BOLAGET '                                                            | ' HB '               |
| ' HANDELSBOLAGET '                                                             | ' HB '               |
| ' HER MAJESTY THE QUEEN IN RIGHT OF CANADA AS REPRESENTED BY THE MINISTER OF ' | ' CANADA MIN OF '    |
| ' HER MAJESTY THE QUEEN '                                                      | ' UK '               |
| ' INDUSTRIAS '                                                                 | ' IND '              |
| ' INDUSTRIALS '                                                                | ' IND '              |
| ' INDUSTRIAL '                                                                 | ' IND '              |
| ' INDUSTRIALA '                                                                | ' IND '              |
| ' INDUSTRIALE '                                                                | ' IND '              |
| ' INDUSTRIALIZARE '                                                            | ' IND '              |
| ' INDUSTRIALIZAREA '                                                           | ' IND '              |
| ' INDUSTRIALI '                                                                | ' IND '              |
| ' INDUSTRIEELE '                                                               | ' IND '              |
| ' INDUSTRIEI '                                                                 | ' IND '              |
| ' INDUSTRIELS '                                                                | ' IND '              |
| ' INDUSTRIELLES '                                                              | ' IND '              |
| ' INDUSTRIELLE '                                                               | ' IND '              |
| ' INDUSTRIELL '                                                                | ' IND '              |
| ' INDUSTRIEL '                                                                 | ' IND '              |
| ' INDUSTRIER '                                                                 | ' IND '              |
| ' INDUSTRIES '                                                                 | ' IND '              |
| ' INDUSTRII '                                                                  | ' IND '              |
| ' INDUSTRIJ '                                                                  | ' IND '              |
| ' INDUSTRIYAKH '                                                               | ' IND '              |
| ' INDUSTRIYAM '                                                                | ' IND '              |
| ' INDUSTRIYAMI '                                                               | ' IND '              |
| ' INDUSTRIYA '                                                                 | ' IND '              |
| ' INDUSTRIYU '                                                                 | ' IND '              |
| ' INDUSTRIA '                                                                  | ' IND '              |
| ' INDUSTRIE '                                                                  | ' IND '              |
| ' INDUSTRI '                                                                   | ' IND '              |
| ' INDUSTRY '                                                                   | ' IND '              |
| ' INGENIERIA '                                                                 | ' ING '              |
| ' INGENIER '                                                                   | ' ING '              |
| ' INGENIEURS '                                                                 | ' ING '              |
| ' INGENIEURBUERO '                                                             | ' ING '              |
| ' INGENIEURBUREAU '                                                            | ' ING '              |
| ' INGENIEURBURO '                                                              | ' ING '              |
| ' INGENIEURGESELLSCHAFT '                                                      | ' ING '              |
| ' INGENIEURSBUREAU '                                                           | ' ING '              |
| ' INGENIEURTECHNISCHES '                                                       | ' ING '              |
| ' INGENIEURTECHNISCHE '                                                        | ' ING '              |
| ' INGENIEUR '                                                                  | ' ING '              |
| ' INGENIOERFIRMAET '                                                           | ' ING '              |
| ' INGENIORSFIRMAN '                                                            | ' ING '              |
| ' INGENIORSFIRMA '                                                             | ' ING '              |
| ' INGENJORSFIRMA '                                                             | ' ING '              |
| ' INGINERIE '                                                                  | ' ING '              |
| ' INSTITUTE FRANCAISE '                                                        | ' INST FR '          |
| ' INSTITUT FRANCAIS '                                                          | ' INST FR '          |
| ' INSTITUTE NATIONALE '                                                        | ' INST NAT '         |
| ' INSTITUT NATIONAL '                                                          | ' INST NAT '         |
| ' INSTITUTAMI '                                                                | ' INST '             |
| ' INSTITUTAMKH '                                                               | ' INST '             |
| ' INSTITUTAM '                                                                 | ' INST '             |
| ' INSTITUTA '                                                                  | ' INST '             |
| ' INSTITUTES '                                                                 | ' INST '             |
| ' INSTITUTET '                                                                 | ' INST '             |
| ' INSTITUTE '                                                                  | ' INST '             |
| ' INSTITUTOM '                                                                 | ' INST '             |
| ' INSTITUTOV '                                                                 | ' INST '             |
| ' INSTITUTO '                                                                  | ' INST '             |
| ' INSTITUTT '                                                                  | ' INST '             |
| ' INSTITUTUL '                                                                 | ' INST '             |
| ' INSTITUTU '                                                                  | ' INST '             |
| ' INSTITUTY '                                                                  | ' INST '             |
| ' INSTITUT '                                                                   | ' INST '             |
| ' INSTITUUT '                                                                  | ' INST '             |
| ' INSTITZHT '                                                                  | ' INST '             |
| ' INSTYTUT '                                                                   | ' INST '             |
| ' INSINOORITOMISTO '                                                           | ' INSTMSTO '         |
| ' INSTRUMENTS '                                                                | ' INSTR '            |
| ' INSTRUMENTATION '                                                            | ' INSTR '            |
| ' INSTRUMENTE '                                                                | ' INSTR '            |
| ' INSTRUMENT '                                                                 | ' INSTR '            |
| ' INTERNATL '                                                                  | ' INT '              |
| ' INTERNACIONAL '                                                              | ' INT '              |
| ' INTERNATIONAL '                                                              | ' INT '              |
| ' INTERNATIONALEN '                                                            | ' INT '              |
| ' INTERNATIONALE '                                                             | ' INT '              |
| ' INTERNATIONAUX '                                                             | ' INT '              |
| ' INTERNATIONELLA '                                                            | ' INT '              |
| ' INTERNAZIONALE '                                                             | ' INT '              |
| ' INTL '                                                                       | ' INT '              |
| ' INTREPRINDEREA '                                                             | ' INTR '             |
| ' ISTITUTO '                                                                   | ' IST '              |
| ' ITALIANA '                                                                   | ' ITAL '             |
| ' ITALIANE '                                                                   | ' ITAL '             |
| ' ITALIANI '                                                                   | ' ITAL '             |
| ' ITALIANO '                                                                   | ' ITAL '             |
| ' ITALIENNE '                                                                  | ' ITAL '             |
| ' ITALIEN '                                                                    | ' ITAL '             |
| ' ITALIAN '                                                                    | ' ITAL '             |
| ' ITALIA '                                                                     | ' ITAL '             |
| ' ITALI '                                                                      | ' ITAL '             |
| ' ITALO '                                                                      | ' ITAL '             |
| ' ITALY '                                                                      | ' ITAL '             |
| ' JUNIOR '                                                                     | ' JR '               |
| ' KOMMANDIT BOLAG '                                                            | ' KB '               |
| ' KOMMANDIT BOLAGET '                                                          | ' KB '               |
| ' KOMMANDITBOLAGET '                                                           | ' KB '               |
| ' KOMMANDITBOLAG '                                                             | ' KB '               |
| ' KOMMANDIT GESELLSCHAFT '                                                     | ' KG '               |
| ' KOMMANDITGESELLSCHAFT '                                                      | ' KG '               |
| ' KOMMANDIT GESELLSCHAFT AUF AKTIEN '                                          | ' KGAA '             |
| ' KOMMANDITGESELLSCHAFT AUF AKTIEN '                                           | ' KGAA '             |
| ' KUTATO INTEZETE '                                                            | ' KI '               |
| ' KUTATO INTEZET '                                                             | ' KI '               |
| ' KUTATOINTEZETE '                                                             | ' KI '               |
| ' KUTATOINTEZET '                                                              | ' KI '               |
| ' KABUSHIKI GAISHA '                                                           | ' KK '               |
| ' KABUSHIKI KAISHA '                                                           | ' KK '               |
| ' KABUSHIKI GAISYA '                                                           | ' KK '               |
| ' KABUSHIKI KAISYA '                                                           | ' KK '               |
| ' KABUSHIKIGAISHA '                                                            | ' KK '               |
| ' KABUSHIKIKAISHA '                                                            | ' KK '               |
| ' KABUSHIKIGAISYA '                                                            | ' KK '               |
| ' KABUSHIKIKAISYA '                                                            | ' KK '               |
| ' KOMBINATU '                                                                  | ' KOMB '             |
| ' KOMBINATY '                                                                  | ' KOMB '             |
| ' KOMBINAT '                                                                   | ' KOMB '             |
| ' KONINKLIJKE '                                                                | ' KONINK '           |
| ' KONCERNOVY PODNIK '                                                          | ' KP '               |
| ' KUNSTSTOFFTECHNIK '                                                          | ' KUNST '            |
| ' KUNSTSTOFF '                                                                 | ' KUNST '            |
| ' LABORATOIRES '                                                               | ' LAB '              |
| ' LABORATOIRE '                                                                | ' LAB '              |
| ' LABORATOIR '                                                                 | ' LAB '              |
| ' LABORATORIEI '                                                               | ' LAB '              |
| ' LABORATORIES '                                                               | ' LAB '              |
| ' LABORATORII '                                                                | ' LAB '              |
| ' LABORATORIJ '                                                                | ' LAB '              |
| ' LABORATORIOS '                                                               | ' LAB '              |
| ' LABORATORIO '                                                                | ' LAB '              |
| ' LABORATORIUM '                                                               | ' LAB '              |
| ' LABORATORI '                                                                 | ' LAB '              |
| ' LABORATORY '                                                                 | ' LAB '              |
| ' LABORTORI '                                                                  | ' LAB '              |
| ' LAVORAZA '                                                                   | ' LAVORAZ '          |
| ' LAVORAZIONE '                                                                | ' LAVORAZ '          |
| ' LAVORAZIONI '                                                                | ' LAVORAZ '          |
| ' LAVORAZIO '                                                                  | ' LAVORAZ '          |
| ' LAVORAZI '                                                                   | ' LAVORAZ '          |
| ' LIMITED PARTNERSHIP '                                                        | ' LP '               |
| ' LIMITED '                                                                    | ' LTD '              |
| ' LTD LTEE '                                                                   | ' LTD '              |
| ' MASCHINENVERTRIEB '                                                          | ' MASCH '            |
| ' MASCHINENBAUANSTALT '                                                        | ' MASCHBAU '         |
| ' MASCHINENBAU '                                                               | ' MASCHBAU '         |
| ' MASCHINENFABRIEK '                                                           | ' MASCHFAB '         |
| ' MASCHINENFABRIKEN '                                                          | ' MASCHFAB '         |
| ' MASCHINENFABRIK '                                                            | ' MASCHFAB '         |
| ' MASCHINENFAB '                                                               | ' MASCHFAB '         |
| ' MASCHINEN '                                                                  | ' MASCH '            |
| ' MASCHIN '                                                                    | ' MASCH '            |
| ' MIT BESCHRANKTER HAFTUNG '                                                   | ' MBH '              |
| ' MANUFACTURINGS '                                                             | ' MFG '              |
| ' MANUFACTURING '                                                              | ' MFG '              |
| ' MANIFATTURAS '                                                               | ' MFR '              |
| ' MANIFATTURA '                                                                | ' MFR '              |
| ' MANIFATTURE '                                                                | ' MFR '              |
| ' MANUFACTURAS '                                                               | ' MFR '              |
| ' MANUFACTURERS '                                                              | ' MFR '              |
| ' MANUFACTURER '                                                               | ' MFR '              |
| ' MANUFACTURES '                                                               | ' MFR '              |
| ' MANUFACTURE '                                                                | ' MFR '              |
| ' MANUFATURA '                                                                 | ' MFR '              |
| ' MAATSCHAPPIJ '                                                               | ' MIJ '              |
| ' MEDICAL '                                                                    | ' MED '              |
| ' MINISTERE '                                                                  | ' MIN '              |
| ' MINISTERIUM '                                                                | ' MIN '              |
| ' MINISTERO '                                                                  | ' MIN '              |
| ' MINISTERSTVAKH '                                                             | ' MIN '              |
| ' MINISTERSTVAM '                                                              | ' MIN '              |
| ' MINISTERSTVAMI '                                                             | ' MIN '              |
| ' MINISTERSTVA '                                                               | ' MIN '              |
| ' MINISTERSTVE '                                                               | ' MIN '              |
| ' MINISTERSTVO '                                                               | ' MIN '              |
| ' MINISTERSTVOM '                                                              | ' MIN '              |
| ' MINISTERSTVU '                                                               | ' MIN '              |
| ' MINISTERSTV '                                                                | ' MIN '              |
| ' MINISTERSTWO '                                                               | ' MIN '              |
| ' MINISTERUL '                                                                 | ' MIN '              |
| ' MINISTRE '                                                                   | ' MIN '              |
| ' MINISTRY '                                                                   | ' MIN '              |
| ' MINISTER '                                                                   | ' MIN '              |
| ' MAGYAR TUDOMANYOS AKADEMIA '                                                 | ' MTA '              |
| ' NATIONAAL '                                                                  | ' NAT '              |
| ' NATIONAL '                                                                   | ' NAT '              |
| ' NATIONALE '                                                                  | ' NAT '              |
| ' NATIONAUX '                                                                  | ' NAT '              |
| ' NATL '                                                                       | ' NAT '              |
| ' NAZIONALE '                                                                  | ' NAZ '              |
| ' NAZIONALI '                                                                  | ' NAZ '              |
| ' NORDDEUTSCH '                                                                | ' NORDDEUT '         |
| ' NORDDEUTSCHE '                                                               | ' NORDDEUT '         |
| ' NORDDEUTSCHER '                                                              | ' NORDDEUT '         |
| ' NORDDEUTSCHES '                                                              | ' NORDDEUT '         |
| ' NARODNI PODNIK '                                                             | ' NP '               |
| ' NARODNIJ PODNIK '                                                            | ' NP '               |
| ' NARODNY PODNIK '                                                             | ' NP '               |
| ' NAAMLOOSE VENOOTSCHAP '                                                      | ' NV '               |
| ' NAAMLOZE VENNOOTSCHAP '                                                      | ' NV '               |
| ' N V '                                                                        | ' NV '               |
| ' OESTERREICHISCHES '                                                          | ' OESTERR '          |
| ' OESTERREICHISCHE '                                                           | ' OESTERR '          |
| ' OESTERREICHISCH '                                                            | ' OESTERR '          |
| ' OESTERREICH '                                                                | ' OESTERR '          |
| ' OSTERREICHISCHES '                                                           | ' OESTERR '          |
| ' OSTERREICHISCHE '                                                            | ' OESTERR '          |
| ' OSTERREICHISCH '                                                             | ' OESTERR '          |
| ' OSTERREICH '                                                                 | ' OESTERR '          |
| ' OFFICINE MECCANICA '                                                         | ' OFF MEC '          |
| ' OFFICINE MECCANICHE '                                                        | ' OFF MEC '          |
| ' OFFICINE NATIONALE '                                                         | ' OFF NAT '          |
| ' OFFENE HANDELSGESELLSCHAFT '                                                 | ' OHG '              |
| ' ONTWIKKELINGSBUREAU '                                                        | ' ONTWIK '           |
| ' ONTWIKKELINGS '                                                              | ' ONTWIK '           |
| ' OBOROVY PODNIK '                                                             | ' OP '               |
| ' ORGANISATIE '                                                                | ' ORG '              |
| ' ORGANISATIONS '                                                              | ' ORG '              |
| ' ORGANISATION '                                                               | ' ORG '              |
| ' ORGANIZATIONS '                                                              | ' ORG '              |
| ' ORGANIZATION '                                                               | ' ORG '              |
| ' ORGANIZZAZIONE '                                                             | ' ORG '              |
| ' OSAKEYHTIO '                                                                 | ' OY '               |
| ' PHARMACEUTICALS '                                                            | ' PHARM '            |
| ' PHARMACEUTICAL '                                                             | ' PHARM '            |
| ' PHARMACEUTICA '                                                              | ' PHARM '            |
| ' PHARMACEUTIQUES '                                                            | ' PHARM '            |
| ' PHARMACEUTIQUE '                                                             | ' PHARM '            |
| ' PHARMAZEUTIKA '                                                              | ' PHARM '            |
| ' PHARMAZEUTISCHEN '                                                           | ' PHARM '            |
| ' PHARMAZEUTISCHE '                                                            | ' PHARM '            |
| ' PHARMAZEUTISCH '                                                             | ' PHARM '            |
| ' PHARMAZIE '                                                                  | ' PHARM '            |
| ' PUBLIC LIMITED COMPANY '                                                     | ' PLC '              |
| ' PRELUCRAREA '                                                                | ' PRELUC '           |
| ' PRELUCRARE '                                                                 | ' PRELUC '           |
| ' PRODOTTI '                                                                   | ' PROD '             |
| ' PRODUCE '                                                                    | ' PROD '             |
| ' PRODUCTS '                                                                   | ' PROD '             |
| ' PRODUCT '                                                                    | ' PROD '             |
| ' PRODUCTAS '                                                                  | ' PROD '             |
| ' PRODUCTA '                                                                   | ' PROD '             |
| ' PRODUCTIE '                                                                  | ' PROD '             |
| ' PRODUCTOS '                                                                  | ' PROD '             |
| ' PRODUCTO '                                                                   | ' PROD '             |
| ' PRODUCTORES '                                                                | ' PROD '             |
| ' PRODUITS '                                                                   | ' PROD '             |
| ' PRODUIT '                                                                    | ' PROD '             |
| ' PRODUKCJI '                                                                  | ' PROD '             |
| ' PRODUKTER '                                                                  | ' PROD '             |
| ' PRODUKTE '                                                                   | ' PROD '             |
| ' PRODUKT '                                                                    | ' PROD '             |
| ' PRODUSE '                                                                    | ' PROD '             |
| ' PRODUTOS '                                                                   | ' PROD '             |
| ' PRODUIT CHIMIQUES '                                                          | ' PROD CHIM '        |
| ' PRODUIT CHIMIQUE '                                                           | ' PROD CHIM '        |
| ' PRODUCTIONS '                                                                | ' PRODN '            |
| ' PRODUCTION '                                                                 | ' PRODN '            |
| ' PRODUKTIONS '                                                                | ' PRODN '            |
| ' PRODUKTION '                                                                 | ' PRODN '            |
| ' PRODUZIONI '                                                                 | ' PRODN '            |
| ' PROIECTARE '                                                                 | ' PROI '             |
| ' PROIECTARI '                                                                 | ' PROI '             |
| ' PRZEDSIEBIOSTWO '                                                            | ' PRZEDSIEB '        |
| ' PRZEMYSLU '                                                                  | ' PRZEYM '           |
| ' PROPRIETARY '                                                                | ' PTY '              |
| ' PERSONENVENNOOTSCHAP MET '                                                   | ' PVBA '             |
| ' BEPERKTE AANSPRAKELIJKHEID '                                                 | ' PVBA '             |
| ' REALISATIONS '                                                               | ' REAL '             |
| ' REALISATION '                                                                | ' REAL '             |
| ' RECHERCHES '                                                                 | ' RECH '             |
| ' RECHERCHE '                                                                  | ' RECH '             |
| ' RECHERCHES ET DEVELOPMENTS '                                                 | ' RECH & DEV '       |
| ' RECHERCHE ET DEVELOPMENT '                                                   | ' RECH & DEV '       |
| ' RECHERCHES ET DEVELOPPEMENTS '                                               | ' RECH & DEV '       |
| ' RECHERCHE ET DEVELOPPEMENT '                                                 | ' RECH & DEV '       |
| ' RESEARCH & DEVELOPMENT '                                                     | ' RES & DEV '        |
| ' RESEARCH AND DEVELOPMENT '                                                   | ' RES & DEV '        |
| ' RESEARCH '                                                                   | ' RES '              |
| ' RIJKSUNIVERSITEIT '                                                          | ' RIJKSUNIV '        |
| ' SECRETATY '                                                                  | ' SECRETARY '        |
| ' SECRETRY '                                                                   | ' SECRETARY '        |
| ' SECREATRY '                                                                  | ' SECRETARY '        |
| ' SOCIEDAD ANONIMA '                                                           | ' SA '               |
| ' SOCIETE ANONYME DITE '                                                       | ' SA '               |
| ' SOCIETE ANONYME '                                                            | ' SA '               |
| ' SOCIETE A RESPONSABILITE LIMITEE '                                           | ' SARL '             |
| ' SOCIETE A RESPONSIBILITE LIMITEE '                                           | ' SARL '             |
| ' SOCIETA IN ACCOMANDITA SEMPLICE '                                            | ' SAS '              |
| ' SCHWEIZERISCHES '                                                            | ' SCHWEIZ '          |
| ' SCHWEIZERISCHER '                                                            | ' SCHWEIZ '          |
| ' SCHWEIZERISCHE '                                                             | ' SCHWEIZ '          |
| ' SCHWEIZERISCH '                                                              | ' SCHWEIZ '          |
| ' SCHWEIZER '                                                                  | ' SCHWEIZ '          |
| ' SCIENCES '                                                                   | ' SCI '              |
| ' SCIENCE '                                                                    | ' SCI '              |
| ' SCIENTIFICA '                                                                | ' SCI '              |
| ' SCIENTIFIC '                                                                 | ' SCI '              |
| ' SCIENTIFIQUES '                                                              | ' SCI '              |
| ' SCIENTIFIQUE '                                                               | ' SCI '              |
| ' SHADAN HOJIN '                                                               | ' SH '               |
| ' SIDERURGICAS '                                                               | ' SIDER '            |
| ' SIDERURGICA '                                                                | ' SIDER '            |
| ' SIDERURGIC '                                                                 | ' SIDER '            |
| ' SIDERURGIE '                                                                 | ' SIDER '            |
| ' SIDERURGIQUE '                                                               | ' SIDER '            |
| ' SOCIETA IN NOME COLLECTIVO '                                                 | ' SNC '              |
| ' SOCIETE EN NOM COLLECTIF '                                                   | ' SNC '              |
| ' SOCIETE ALSACIENNE '                                                         | ' SOC ALSAC '        |
| ' SOCIETE APPLICATION '                                                        | ' SOC APPL '         |
| ' SOCIETA APPLICAZIONE '                                                       | ' SOC APPL '         |
| ' SOCIETE AUXILIAIRE '                                                         | ' SOC AUX '          |
| ' SOCIETE CHIMIQUE '                                                           | ' SOC CHIM '         |
| ' SOCIEDAD CIVIL '                                                             | ' SOC CIV '          |
| ' SOCIETE CIVILE '                                                             | ' SOC CIV '          |
| ' SOCIETE COMMERCIALES '                                                       | ' SOC COMML '        |
| ' SOCIETE COMMERCIALE '                                                        | ' SOC COMML '        |
| ' SOCIEDAD ESPANOLA '                                                          | ' SOC ESPAN '        |
| ' SOCIETE ETUDES '                                                             | ' SOC ETUD '         |
| ' SOCIETE ETUDE '                                                              | ' SOC ETUD '         |
| ' SOCIETE EXPLOITATION '                                                       | ' SOC EXPL '         |
| ' SOCIETE GENERALE '                                                           | ' SOC GEN '          |
| ' SOCIETE INDUSTRIELLES '                                                      | ' SOC IND '          |
| ' SOCIETE INDUSTRIELLE '                                                       | ' SOC IND '          |
| ' SOCIETE MECANIQUES '                                                         | ' SOC MEC '          |
| ' SOCIETE MECANIQUE '                                                          | ' SOC MEC '          |
| ' SOCIETE NATIONALE '                                                          | ' SOC NAT '          |
| ' SOCIETE NOUVELLE '                                                           | ' SOC NOUV '         |
| ' SOCIETE PARISIENNE '                                                         | ' SOC PARIS '        |
| ' SOCIETE PARISIENN '                                                          | ' SOC PARIS '        |
| ' SOCIETE PARISIEN '                                                           | ' SOC PARIS '        |
| ' SOCIETE TECHNIQUES '                                                         | ' SOC TECH '         |
| ' SOCIETE TECHNIQUE '                                                          | ' SOC TECH '         |
| ' SDRUZENI PODNIKU '                                                           | ' SP '               |
| ' SDRUZENI PODNIK '                                                            | ' SP '               |
| ' SOCIETA PER AZIONI '                                                         | ' SPA '              |
| ' SPITALUL '                                                                   | ' SPITAL '           |
| ' SOCIETE PRIVEE A RESPONSABILITE LIMITEE '                                    | ' SPRL '             |
| ' SOCIEDAD DE RESPONSABILIDAD LIMITADA '                                       | ' SRL '              |
| ' STIINTIFICA '                                                                | ' STIINT '           |
| ' SUDDEUTSCHES '                                                               | ' SUDDEUT '          |
| ' SUDDEUTSCHER '                                                               | ' SUDDEUT '          |
| ' SUDDEUTSCHE '                                                                | ' SUDDEUT '          |
| ' SUDDEUTSCH '                                                                 | ' SUDDEUT '          |
| ' SOCIEDADE '                                                                  | ' SOC '              |
| ' SOCIEDAD '                                                                   | ' SOC '              |
| ' SOCIETA '                                                                    | ' SOC '              |
| ' SOCIETE '                                                                    | ' SOC '              |
| ' SOCIETY '                                                                    | ' SOC '              |
| ' SA DITE '                                                                    | ' SA '               |
| ' TECHNICAL '                                                                  | ' TECH '             |
| ' TECHNICO '                                                                   | ' TECH '             |
| ' TECHNICZNY '                                                                 | ' TECH '             |
| ' TECHNIKAI '                                                                  | ' TECH '             |
| ' TECHNIKI '                                                                   | ' TECH '             |
| ' TECHNIK '                                                                    | ' TECH '             |
| ' TECHNIQUES '                                                                 | ' TECH '             |
| ' TECHNIQUE '                                                                  | ' TECH '             |
| ' TECHNISCHES '                                                                | ' TECH '             |
| ' TECHNISCHE '                                                                 | ' TECH '             |
| ' TECHNISCH '                                                                  | ' TECH '             |
| ' TECHNOLOGY '                                                                 | ' TECH '             |
| ' TECHNOLOGIES '                                                               | ' TECH '             |
| ' TELECOMMUNICATIONS '                                                         | ' TELECOM '          |
| ' TELECOMMUNICACION '                                                          | ' TELECOM '          |
| ' TELECOMMUNICATION '                                                          | ' TELECOM '          |
| ' TELECOMMUNICAZIONI '                                                         | ' TELECOM '          |
| ' TELECOMUNICAZIONI '                                                          | ' TELECOM '          |
| ' TRUSTUL '                                                                    | ' TRUST '            |
| ' UNITED KINGDOM '                                                             | ' UK '               |
| ' SECRETARY OF STATE FOR '                                                     | ' UK SEC FOR '       |
| ' UNIVERSIDADE '                                                               | ' UNIV '             |
| ' UNIVERSIDAD '                                                                | ' UNIV '             |
| ' UNIVERSITA DEGLI STUDI '                                                     | ' UNIV '             |
| ' UNIVERSITAET '                                                               | ' UNIV '             |
| ' UNIVERSITAIRE '                                                              | ' UNIV '             |
| ' UNIVERSITAIR '                                                               | ' UNIV '             |
| ' UNIVERSITATEA '                                                              | ' UNIV '             |
| ' UNIVERSITEIT '                                                               | ' UNIV '             |
| ' UNIVERSITETAMI '                                                             | ' UNIV '             |
| ' UNIVERSITETAM '                                                              | ' UNIV '             |
| ' UNIVERSITETE '                                                               | ' UNIV '             |
| ' UNIVERSITETOM '                                                              | ' UNIV '             |
| ' UNIVERSITETOV '                                                              | ' UNIV '             |
| ' UNIVERSITETU '                                                               | ' UNIV '             |
| ' UNIVERSITETY '                                                               | ' UNIV '             |
| ' UNIVERSITETA '                                                               | ' UNIV '             |
| ' UNIVERSITAT '                                                                | ' UNIV '             |
| ' UNIVERSITET '                                                                | ' UNIV '             |
| ' UNIVERSITE '                                                                 | ' UNIV '             |
| ' UNIVERSITY '                                                                 | ' UNIV '             |
| ' UNIVERSITA '                                                                 | ' UNIV '             |
| ' UNIWERSYTET '                                                                | ' UNIV '             |
| ' UNITED STATES OF AMERICA ADMINISTRATOR '                                     | ' US ADMIN '         |
| ' UNITED STATES OF AMERICA AS REPRESENTED BY THE ADMINISTRATOR '               | ' US ADMIN '         |
| ' UNITED STATES OF AMERICA AS REPRESENTED BY THE DEPT '                        | ' US DEPT '          |
| ' UNITED STATES OF AMERICA AS REPRESENTED BY THE UNITED STATES DEPT '          | ' US DEPT '          |
| ' UNITED STATES OF AMERICAN AS REPRESENTED BY THE UNITED STATES DEPT '         | ' US DEPT '          |
| ' UNITED STATES GOVERNMENT AS REPRESENTED BY THE SECRETARY OF '                | ' US SEC '           |
| ' UNITED STATES OF AMERICA REPRESENTED BY THE SECRETARY '                      | ' US SEC '           |
| ' UNITED STATES OF AMERICA AS REPRESENTED BY THE SECRETARY '                   | ' US SEC '           |
| ' UNITED STATES OF AMERICAS AS REPRESENTED BY THE SECRETARY '                  | ' US SEC '           |
| ' UNITES STATES OF AMERICA AS REPRESENTED BY THE SECRETARY '                   | ' US SEC '           |
| ' UNITED STATES OF AMERICA SECRETARY OF '                                      | ' US SEC '           |
| ' UNITED STATES OF AMERICA '                                                   | ' USA '              |
| ' UNITED STATES '                                                              | ' USA '              |
| ' UTILAJE '                                                                    | ' UTIL '             |
| ' UTILAJ '                                                                     | ' UTIL '             |
| ' UTILISATIONS VOLKSEIGENER BETRIEBE '                                         | ' VEB '              |
| ' UTILISATION VOLKSEIGENER BETRIEBE '                                          | ' VEB '              |
| ' VEB KOMBINAT '                                                               | ' VEB KOMB '         |
| ' VEREENIGDE '                                                                 | ' VER '              |
| ' VEREINIGTES VEREINIGUNG '                                                    | ' VER '              |
| ' VEREINIGTE VEREINIGUNG '                                                     | ' VER '              |
| ' VEREIN '                                                                     | ' VER '              |
| ' VERENIGING '                                                                 | ' VER '              |
| ' VERWALTUNGEN '                                                               | ' VERW '             |
| ' VERWALTUNGS '                                                                | ' VERW '             |
| ' VERWERTUNGS '                                                                | ' VERW '             |
| ' VERWALTUNGSGESELLSCHAFT '                                                    | ' VERW GES '         |
| ' VYZK USTAV '                                                                 | ' VU '               |
| ' VYZKUMNY USTAV '                                                             | ' VU '               |
| ' VYZKUMNYUSTAV '                                                              | ' VU '               |
| ' VEREINIGUNG VOLKSEIGENER BETRIEBUNG '                                        | ' VVB '              |
| ' VYZK VYVOJOVY USTAV '                                                        | ' VVU '              |
| ' VYZKUMNY VYVOJOVY USTAV '                                                    | ' VVU '              |
| ' WERKZEUGMASCHINENKOMBINAT '                                                  | ' WERKZ MASCH KOMB ' |
| ' WERKZEUGMASCHINENFABRIK '                                                    | ' WERKZ MASCHFAB '   |
| ' WESTDEUTSCHES '                                                              | ' WESTDEUT '         |
| ' WESTDEUTSCHER '                                                              | ' WESTDEUT '         |
| ' WESTDEUTSCHE '                                                               | ' WESTDEUT '         |
| ' WESTDEUTSCH '                                                                | ' WESTDEUT '         |
| ' WISSENSCHAFTLICHE(S) '                                                       | ' WISS '             |
| ' WISSENSCHAFTLICHES TECHNISCHES ZENTRUM '                                     | ' WTZ '              |
| ' YUGEN KAISHA '                                                               | ' YG YUGEN GAISHA '  |
| ' YUUGEN GAISHA '                                                              | ' YG YUGEN GAISHA '  |
| ' YUUGEN KAISHA '                                                              | ' YG YUGEN GAISHA '  |
| ' YUUGEN KAISYA '                                                              | ' YG YUGEN GAISHA '  |
| ' ZAVODU '                                                                     | ' ZAVOD '            |
| ' ZAVODY '                                                                     | ' ZAVOD '            |
| ' ZENTRALES '                                                                  | ' ZENT '             |
| ' ZENTRALE '                                                                   | ' ZENT '             |
| ' ZENTRALEN '                                                                  | ' ZENT '             |
| ' ZENTRALNA '                                                                  | ' ZENT '             |
| ' ZENTRUM '                                                                    | ' ZENT '             |
| ' ZENTRALINSTITUT '                                                            | ' ZENT INST '        |
| ' ZENTRALLABORATORIUM '                                                        | ' ZENT LAB '         |
| ' ZAIDAN HOJIN '                                                               | ' ZH '               |
| ' ZAIDAN HOUJIN '                                                              | ' ZH '               |
| ' LIMITED '                                                                    | ' LTD '              |
| ' LIMITADA '                                                                   | ' LTDA '             |
| ' SECRETARY '                                                                  | ' SEC '              |


*** Compustat
:PROPERTIES:
:ID:       org:5lmhq6914gi0
:END:
COMPUSTAT specific standardization for organizational names. Implementation of initial part nameonly_main.do from  https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded

#+BEGIN_SRC R :tangle R/cockburn.r
  ##' @eval attr(cockburn_replace_compustat, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  cockburn_replace_compustat <- make_alias(replace_patterns
                                         , patterns = cockburn_patterns_compustat)

  attr(cockburn_replace_compustat, "@title") <-
      "COMPUSTAT specific standardization for organizational names"



  ##' @eval attr(cockburn_replace_compustat_names, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  cockburn_replace_compustat_names <- make_alias(replace_patterns
                                               , patterns = cockburn_patterns_compustat_names
                                               , patterns_type = "trim_exact")

  attr(cockburn_replace_compustat_names, "@title") <-
      "COMPUSTAT specific standardization for organizational names. Full name replacements."

#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_replace_compustat.r
  expect_equal(c("WESTINGHOUSE ELEC  "
             , "GRACE (W R) & CO"
             , "GRACE (W R) & CO Ltd.") |>
             cockburn_replace_compustat_names()
           , c(" WESTINGHOUSE ELECTRIC CORP. ", " W. R. GRACE & CO. ", "GRACE (W R) & CO Ltd."
               ))
#+END_SRC

**** Table: Compustat Standartization
- pattern type :: fixed (see doc for standardize.replace)

#+call: make-rds-patterns-table(data = cockburn_patterns_compustat, data.name = "cockburn_patterns_compustat")
#+NAME: cockburn_patterns_compustat
| "pattern"                                      | "replacement"          |
|------------------------------------------------+------------------------|
| '-ADR'                                         | ' '                    |
| '-ADS'                                         | ' '                    |
| '-CL A '                                       | ' '                    |
| '-CL B '                                       | ' '                    |
| '-CONN '                                       | ' '                    |
| '-CONSOLIDATED '                               | ' '                    |
| '-DEL '                                        | ' '                    |
| '-DE '                                         | ' '                    |
| '-NY SHARES '                                  | ' '                    |
| '-OLD '                                        | ' '                    |
| '-ORD '                                        | ' '                    |
| '-PRE AMEND '                                  | ' '                    |
| '-PRE DIVEST '                                 | ' '                    |
| '-PREAMEND '                                   | ' '                    |
| '-PREDIVEST '                                  | ' '                    |
| '-PROJ '                                       | ' '                    |
| '-PROJECTED '                                  | ' '                    |
| '-PREF '                                       | ' '                    |
| '-PRE FASB '                                   | ' '                    |
| '-PREFASB '                                    | ' '                    |
| '-PRO FORMA '                                  | ' '                    |
| '- PRO FORMA '                                 | ' '                    |
| '-PRO FORMA1 '                                 | ' '                    |
| '-PRO FORMA2 '                                 | ' '                    |
| '-PRO FORMA3 '                                 | ' '                    |
| '-REDH '                                       | ' '                    |
| '-SER A COM '                                  | ' '                    |
| '-SER A '                                      | ' '                    |
| '-SPN '                                        | ' '                    |
| ' ACCPTNCE '                                   | ' ACCEPTANCE '         |
| ' BANCORPORATION '                             | ' BANCORP '            |
| ' BANCORPORTN '                                | ' BANCORP '            |
| ' BANCRP '                                     | ' BANCORP '            |
| ' BNCSHRS '                                    | ' BANCSHARES '         |
| ' BRWG '                                       | ' BREWING '            |
| ' CHEVRONTEXACO '                              | ' CHEVRON TEXACO '     |
| ' CHSE '                                       | ' CHASE '              |
| ' COMMN '                                      | ' COMMUNICATION '      |
| ' COMMUN '                                     | ' COMMUNICATION '      |
| ' COMMUNICATNS '                               | ' COMMUNICATION '      |
| ' COMMUNICATIONS '                             | ' COMMUNICATION '      |
| ' DPT STS '                                    | ' DEPT STORES '        |
| ' DPT '                                        | ' DEPT '               |
| ' ENRGY '                                      | ' ENERGY '             |
| ' FINL '                                       | ' FINANCIAL '          |
| ' FNCL '                                       | ' FINANCIAL '          |
| ' GRP '                                        | ' GROUP '              |
| ' HLDGS '                                      | ' HOLDINGS '           |
| ' HLDG '                                       | ' HOLDING '            |
| ' HLT NTWK '                                   | ' HEALTH NETWORK '     |
| ' HTLS RES '                                   | ' HOTELS & RESORTS '   |
| ' HLTH '                                       | ' HEALTH '             |
| ' INTRTECHNLGY '                               | ' INTERTECHNOLOGY '    |
| ' JPMORGAN '                                   | ' J P MORGAN '         |
| ' MED OPTIC '                                  | ' MEDICAL OPTICS '     |
| ' MINNESOTA MINING AND MANUFACTURING COMPANY ' | ' 3M COMPANY '         |
| ' NAT RES '                                    | ' NATURAL RESOURCES '  |
| ' NETWRKS '                                    | ' NETWORK '            |
| ' PHARMACTICALS '                              | ' PHARM '              |
| ' PHARMACT '                                   | ' PHARM '              |
| ' PPTYS TST '                                  | ' PROPERTIES TRUST '   |
| ' PPTY '                                       | ' PROPERTY '           |
| ' PROPERTY TR '                                | ' PROPERTY TRUST '     |
| ' PAC RAILWY '                                 | ' PACIFIC RAILWAY '    |
| ' SEMICONDTR '                                 | ' SEMICONDUCTOR '      |
| ' SOLU '                                       | ' SOLUTIONS '          |
| ' ST & ALMN '                                  | ' STEEL & ALUMINUM '   |
| ' STD '                                        | ' STANDARD '           |
| ' TECHNOLGS '                                  | ' TECH '               |
| ' TECHNOL '                                    | ' TECH '               |
| ' TRANSPORTATN '                               | ' TRANSPORTATION '     |
| ' ADVERTSG '                                   | ' ADVERTISING '        |
| ' ADVNTGE '                                    | ' ADVANTAGE '          |
| ' AIRLN '                                      | ' AIRLINES '           |
| ' AIRLS '                                      | ' AIRLINES '           |
| ' AM '                                         | ' AMERICA '            |
| ' AMER '                                       | ' AMERICAN '           |
| ' APPLIAN '                                    | ' APPLIANCES '         |
| ' APPLICTN '                                   | ' APPLICATIONS '       |
| ' ARCHTCTS '                                   | ' ARCHITECTS '         |
| ' ASSD '                                       | ' ASSOCIATED '         |
| ' ASSOC '                                      | ' ASSOCIATES '         |
| ' ASSOCS '                                     | ' ASSOCIATES '         |
| ' ATOMC '                                      | ' ATOMIC '             |
| ' BANCSH '                                     | ' BANCSHARES '         |
| ' BANCSHR '                                    | ' BANCSHARES '         |
| ' BCSHS '                                      | ' BANCSHARES '         |
| ' BK '                                         | ' BANK '               |
| ' BLDGS '                                      | ' BUILDINGS '          |
| ' BROADCASTG '                                 | ' BROADCASTING '       |
| ' BTLNG '                                      | ' BOTTLING '           |
| ' CBLVISION '                                  | ' CABLEVISION '        |
| ' CENTRS '                                     | ' CENTERS '            |
| ' CHAMPNSHIP '                                 | ' CHAMPIONSHIP '       |
| ' CMMNCTNS '                                   | ' COMMUNICATIONS '     |
| ' CNVRSION '                                   | ' CONVERSION '         |
| ' COFF '                                       | ' COFFEE '             |
| ' COMM '                                       | ' COMMUNICATIONS '     |
| ' COMMUN '                                     | ' COMMUNICATIONS '     |
| ' COMMUNCTN '                                  | ' COMMUNICATIONS '     |
| ' COMMUNICTNS '                                | ' COMMUNICATIONS '     |
| ' COMP '                                       | ' COMPUTERS '          |
| ' COMPUTR '                                    | ' COMPUTER '           |
| ' CONFERENCG '                                 | ' CONFERENCING '       |
| ' CONSTRN '                                    | ' CONSTR '             |
| ' CONTL '                                      | ' CONTINENTAL '        |
| ' CONTNT '                                     | ' CONTINENTAL '        |
| ' CONTRL '                                     | ' CONTROL '            |
| ' CONTRL '                                     | ' CONTROL '            |
| ' CTR '                                        | ' CENTER '             |
| ' CTRS '                                       | ' CENTERS '            |
| ' CVRGS '                                      | ' COVERINGS '          |
| ' DEV '                                        | ' DEVELOPMENT '        |
| ' DEVL '                                       | ' DEVELOPMENT '        |
| ' DEVLP '                                      | ' DEVELOPMENT '        |
| ' DISTR '                                      | ' DISTRIBUTION '       |
| ' DISTRIBUT '                                  | ' DISTRIBUTION '       |
| ' DISTRIBUTN '                                 | ' DISTRIBUTION '       |
| ' ELCTRNCS '                                   | ' ELECTRONICS '        |
| ' ELECTR '                                     | ' ELECTRONICS '        |
| ' ENGNRD '                                     | ' ENGINEERED '         |
| ' ENMT '                                       | ' ENTERTAINMENT '      |
| ' ENTERTAIN '                                  | ' ENTERTAINMENT '      |
| ' ENTERTNMNT '                                 | ' ENTERTAINMENT '      |
| ' ENTMNT '                                     | ' ENTERTAINMENT '      |
| ' ENTMT '                                      | ' ENTERTAINMENT '      |
| ' ENTRPR '                                     | ' ENTERPRISES '        |
| ' ENTRPRISE '                                  | ' ENTERPRISES '        |
| ' ENTRPRS '                                    | ' ENTERPRISES '        |
| ' ENVIR '                                      | ' ENVIRONMENTAL '      |
| ' ENVIRNMNTL '                                 | ' ENVIRONMENTAL '      |
| ' ENVR '                                       | ' ENVIRONMENTAL '      |
| ' EQUIPMT '                                    | ' EQUIPMENT '          |
| ' EXCHG '                                      | ' EXCHANGE '           |
| ' EXPLOR '                                     | ' EXPLORATION '        |
| ' FNDG '                                       | ' FUNDING '            |
| ' GLD '                                        | ' GOLD '               |
| ' GP '                                         | ' GROUP '              |
| ' HLDS '                                       | ' HLDGS '              |
| ' HLTHCARE '                                   | ' HEALTHCARE '         |
| ' HLTHCR '                                     | ' HEALTHCARE '         |
| ' HOMEMDE '                                    | ' HOMEMADE '           |
| ' HSPTL '                                      | ' HOSPITAL '           |
| ' ILLUM '                                      | ' ILLUMINATION '       |
| ' INDL '                                       | ' INDUSTRIAL '         |
| ' INDPT '                                      | ' INDEPENDENT '        |
| ' INDTY '                                      | ' INDEMNITY '          |
| ' INFORMATN '                                  | ' INFO '               |
| ' INSTNS '                                     | ' INSTITUTIONS '       |
| ' INSTRUMEN '                                  | ' INSTRUMENTS '        |
| ' INSTRUMNT '                                  | ' INSTRUMENTS '        |
| ' INTEGRATRS '                                 | ' INTEGRATORS '        |
| ' INTERNATIONL '                               | ' INT '                |
| ' INVS '                                       | ' INVESTMENTS '        |
| ' INVT '                                       | ' INVESTMENT '         |
| ' MANAGEMNT '                                  | ' MANAGEMENT '         |
| ' MANAGMNT '                                   | ' MANAGEMENT '         |
| ' MANHATN '                                    | ' MANHATTAN '          |
| ' MANUF '                                      | ' MFG '                |
| ' MDSE '                                       | ' MERCHANDISING '      |
| ' MEASURMNT '                                  | ' MEASUREMENT '        |
| ' MERCHNDSNG '                                 | ' MERCHANDISING '      |
| ' MGMT '                                       | ' MANAGEMENT '         |
| ' MGRS '                                       | ' MANAGERS '           |
| ' MGT '                                        | ' MANAGEMENT '         |
| ' MICROWAV '                                   | ' MICROWAVE '          |
| ' MKTS '                                       | ' MARKETS '            |
| ' MLTIMEDIA '                                  | ' MULTIMEDIA '         |
| ' MTG '                                        | ' MORTGAGE '           |
| ' MTNS '                                       | ' MOUTAINS '           |
| ' MTRS '                                       | ' MOTORS '             |
| ' NETWRK '                                     | ' NETWORK '            |
| ' NOWEST '                                     | ' NORTHWEST '          |
| ' NTWRK '                                      | ' NETWORK '            |
| ' OFFSHRE '                                    | ' OFFSHORE '           |
| ' ORGANIZTN '                                  | ' ORG '                |
| ' PBLG '                                       | ' PUBLISHING '         |
| ' PHARMACEUTICL '                              | ' PHARM '              |
| ' PLAST '                                      | ' PLASTICS '           |
| ' PPTYS '                                      | ' PROPERTIES '         |
| ' PRODS '                                      | ' PROD '               |
| ' PRODTN '                                     | ' PRODN '              |
| ' PRODUCTN '                                   | ' PRODN '              |
| ' PRPANE '                                     | ' PROPANE '            |
| ' PTS '                                        | ' PARTS '              |
| ' PUBLISH '                                    | ' PUBLISHING '         |
| ' PUBLSHING '                                  | ' PUBLISHING '         |
| ' PUBN '                                       | ' PUBLICATIONS '       |
| ' PUBNS '                                      | ' PUBLICATIONS '       |
| ' PWR '                                        | ' POWER '              |
| ' RAILRD '                                     | ' RAILROAD '           |
| ' RECREATN '                                   | ' RECREATION '         |
| ' RECYCL '                                     | ' RECYCLING '          |
| ' REFIN '                                      | ' REFINING '           |
| ' REFNG '                                      | ' REFINING '           |
| ' RESTR '                                      | ' RESTAURANT '         |
| ' RESTS '                                      | ' RESTAURANTS '        |
| ' RETAILNG '                                   | ' RETAILING '          |
| ' RLTY '                                       | ' REALTY '             |
| ' RR '                                         | ' RAILROAD '           |
| ' RSCH '                                       | ' RESEARCH '           |
| ' RTNG '                                       | ' RATING '             |
| ' SCIENTIF '                                   | ' SCIENTIFIC '         |
| ' SERV '                                       | ' SERVICES '           |
| ' SLTNS '                                      | ' SOLUTIONS '          |
| ' SOFTWRE '                                    | ' SOFTWARE '           |
| ' SOLTNS '                                     | ' SOLUTIONS '          |
| ' SOLUT '                                      | ' SOLUTIONS '          |
| ' SRVC '                                       | ' SERVICES '           |
| ' SRVCS '                                      | ' SERVICES '           |
| ' STEAKHSE '                                   | ' STEAKHOUSE '         |
| ' STHWST '                                     | ' SOUTHWEST '          |
| ' STL '                                        | ' STEEL '              |
| ' STRS '                                       | ' STORES '             |
| ' SUP '                                        | ' SUPPLY '             |
| ' SUPERMKTS '                                  | ' SUPERMARKETS '       |
| ' SUPP '                                       | ' SUPPLIES '           |
| ' SURVYS '                                     | ' SURVEYS '            |
| ' SVC '                                        | ' SERVICES '           |
| ' SVCS '                                       | ' SERVICES '           |
| ' SVSC '                                       | ' SERVICES '           |
| ' SYS '                                        | ' SYSTEMS '            |
| ' SYSTM '                                      | ' SYSTEMS '            |
| ' TCHNLGY '                                    | ' TECH '               |
| ' TECHNGS '                                    | ' TECHNOLOGIES '       |
| ' TECHNL '                                     | ' TECH '               |
| ' TECHNLGIES '                                 | ' TECHNOLOGIES '       |
| ' TEL '                                        | ' TELEPHONE '          |
| ' TELE-COMM '                                  | ' TELECOMMUNICATIONS ' |
| ' TELE-COMMUN '                                | ' TELECOMMUNICATIONS ' |
| ' TELECOMMS '                                  | ' TELECOMMUNICATIONS ' |
| ' TELECONFERENC '                              | ' TELECONFERENCING '   |
| ' TELEG '                                      | ' TELEGRAPH '          |
| ' TELEGR '                                     | ' TELEGRAPH '          |
| ' TELVSN '                                     | ' TELEVISION '         |
| ' TR '                                         | ' TRUST '              |
| ' TRANSN '                                     | ' TRANSPORTATION '     |
| ' TRANSPORTN '                                 | ' TRANSPORTATION '     |
| ' TRNSACTN '                                   | ' TRANSACTION '        |
| ' UTD '                                        | ' UNITED '             |
| ' WSTN '                                       | ' WESTERN '            |
| ' WTR '                                        | ' WATER '              |

**** Table: Compustat Standartization Names
- pattern type :: trim.exact (see doc for standardize.replace)

#+call: make-rds-patterns-table(data = cockburn_patterns_compustat_names, data.name = "cockburn_patterns_compustat_names")
#+name: cockburn_patterns_compustat_names
| "pattern"                                      | "replacement"                |
|------------------------------+------------------------------------------------|
| 'WILLIAMS (A.L.) CORP'       | ' A. L. WILLIAMS CORP. '                       |
| 'GOODRICH CORP'              | ' B. F. GOODRICH CO. '                         |
| 'BELL & HOWELL OPERATING CO' | ' BELL + HOWELL COMPANY '                      |
| 'BENDIX CORP'                | ' BENDIX CORPORATION(NOW ALLIED-SIGNAL INC.) ' |
| 'BORGWARNER INC'             | ' BORG-WARNER CORPORATION '                    |
| 'CHRYSLER CORP'              | ' CHRYSLER MOTORS CORPORATION '                |
| 'CISCO SYSTEMS INC'          | ' CISCO TECHNOLOGY, INC. '                     |
| 'DELL INC'                   | ' DELL PRODUCTS, L.P. '                        |
| 'DELPHI CORP'                | ' DELPHI TECHNOLOGIES, INC. '                  |
| 'DU PONT (E I) DE NEMOURS'   | ' E. I. DU PONT DE NEMOURS AND COMPANY '       |
| 'SQUIBB CORP'                | ' E. R. SQUIBB + SONS, INC. '                  |
| 'LILLY (ELI) & CO'           | ' ELI LILLY AND COMPANY '                      |
| 'SEARLE (G.D.) & CO'         | ' G. D. SEARLE & CO. '                         |
| '3M CO'                      | ' MINNESOTA MINING AND MANUFACTURING COMPANY ' |
| 'OWENS CORNING'              | ' OWENS-CORNING FIBERGLAS CORPORATION '        |
| 'SCHLUMBERGER LTD'           | ' SCHLUMBERGER TECHNOLOGY CORPORATION '        |
| 'SICMED LIFE SYSTEMS'        | ' SCI-MED LIFE SYSTEMS, INC. '                 |
| 'TDK CORP'                   | ' TDK CORPORATION '                            |
| 'U S SURGICAL CORP'          | ' UNITED STATES SURGICAL CORPORATION '         |
| 'GRACE (W R) & CO'           | ' W. R. GRACE & CO. '                          |
| 'WESTINGHOUSE ELEC'          | ' WESTINGHOUSE ELECTRIC CORP. '                |

*** Identify Entity Type
:PROPERTIES:
:ID:       org:fyt54a51nki0
:END:
#+BEGIN_SRC R :tangle R/cockburn.r
  ##' Identifies Entity Type
  ##'
  ##' @param x vector or table
  ##' @param verbose For debuging. If set will message which procedures were done.
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' 
  ##' @md 
  ##' @export 
  cockburn_detect_type <- function(x
                                 , verbose = FALSE
                                 , ...) {
      do_verbosely <- \(x, fun) {
          fun_name <- deparse(substitute(fun))
          if(verbose) message("- ", fun_name)
          x <- do.call(fun, list(x))
          return(x)
      }
      x |> 
          do_verbosely(cockburn_detect_corp) |>
          do_verbosely(cockburn_detect_indiv) |>
          do_verbosely(cockburn_detect_govt) |>
          do_verbosely(cockburn_detect_univ) |>
          do_verbosely(cockburn_detect_inst) |>
          do_verbosely(cockburn_detect_inst_conds) |>
          do_verbosely(cockburn_detect_inst_german) |>
          do_verbosely(cockburn_detect_hosp)
  }


  ##' Cleanup Entity Type
  ##'
  ##' @param x vector or table
  ##' @inheritDotParams replace_patterns
  ##' @return standardized names table
  ##' 
  ##' @md 
  ##' @export 
  cockburn_replace_type <- function(x, ...) {
      x |> 
          cockburn_replace_govt() |> 
          cockburn_replace_univ()
  }


#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_replace_type.r

  expect_equal(
      c(
          " DR VLASOV ",
          " S.VLASOV PHD ",
          " STANICA LEGALY REPRESENTED BY STAS",
          " DR VLASOV & BROTHER ",
          "MSlab & C",
          "LEGALY REPRESENTED BY STAS",
          " REPUBLIC LEGALY REPRESENTED BY STAS",
          " TILBURG UNIVERSTIY ",
          " VU UNIVERSTITAET ",
          " FUNDATION LEGALY REPRESENTED BY STAS"
      ) |>
          cockburn_detect_type(verbose = FALSE),
      structure(list(x = c(
          " DR VLASOV ", " S.VLASOV PHD ", " STANICA LEGALY REPRESENTED BY STAS",
          " DR VLASOV & BROTHER ", "MSlab & C", "LEGALY REPRESENTED BY STAS",
          " REPUBLIC LEGALY REPRESENTED BY STAS", " TILBURG UNIVERSTIY ",
          " VU UNIVERSTITAET ", " FUNDATION LEGALY REPRESENTED BY STAS"
      ), x_entity_type = list(
          "indiv", "indiv", c("hosp", "indiv"),
          c("indiv", "firm"), character(0), character(0), c(
              "govt",
              "indiv"
          ), "univ", "univ", c("inst", "indiv")
      )), row.names = c(
          NA,
          -10L
      ), class = c("data.table", "data.frame"))
  )




  expect_equal(
      data.table(
          name = c(
              "MÄKARÖNI ETÖ FKÜSNÖ Ltd",
              "MSLab CÖ. <a href=lsdldf> <br> <\\a>",
              "MSLab Co.",
              "MSLaeb Comp.",
              "MSLab Comp. Ltd.",
              "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ  UNIVERSITY"
          ) |> rep(2),
          foo = "I love coffee"
      ) |>
          cockburn_detect_type(),
      structure(list(name = c(
          "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>",
          "MSLab Co.", "MSLaeb Comp.", "MSLab Comp. Ltd.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ  UNIVERSITY",
          "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>",
          "MSLab Co.", "MSLaeb Comp.", "MSLab Comp. Ltd.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ  UNIVERSITY"
      ), foo = c(
          "I love coffee", "I love coffee", "I love coffee",
          "I love coffee", "I love coffee", "I love coffee", "I love coffee",
          "I love coffee", "I love coffee", "I love coffee", "I love coffee",
          "I love coffee"
      ), name_entity_type = c(
          NA, NA, NA, NA, NA, "univ",
          NA, NA, NA, NA, NA, "univ"
      )), row.names = c(NA, -12L), class = c(
          "data.table",
          "data.frame"
      ))
  )




  expect_equal(
      c(
          "MÄKARÖNI ETÖ FKÜSNÖ Ltd",
          "MSLab CÖ. <a href=lsdldf> <br> <\\a>",
          "MSLab Co.",
          "MSLaeb Comp.",
          "MSLab Comp. Ltd.",
          "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ UNIVERSITY"
      ) |> rep(2) |>
          cockburn_detect_type(),
      structure(list(x = c(
          "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>",
          "MSLab Co.", "MSLaeb Comp.", "MSLab Comp. Ltd.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ UNIVERSITY",
          "MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>",
          "MSLab Co.", "MSLaeb Comp.", "MSLab Comp. Ltd.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ UNIVERSITY"
      ), x_entity_type = c(
          NA, NA, NA, NA, NA, "univ", NA, NA, NA,
          NA, NA, "univ"
      )), row.names = c(NA, -12L), class = c(
          "data.table",
          "data.frame"
      ))
  )
#+END_SRC

**** Firms (Corporates)
:PROPERTIES:
:ID:       org:nvtj6q51nki0
:END:
- code :: "firm"
#+BEGIN_SRC R :tangle R/cockburn.r
  ##' @eval attr(cockburn_detect_corp, "@title")
  ##' @description From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' @inherit detect_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso detect_patterns
  ##'
  ##' @md
  ##' @export
  cockburn_detect_corp <- make_alias(detect_patterns
                                   , patterns = cockburn_patterns_corp
                                   , output_codes_col_name = "{col_name_}entity_type"
                                   , merge_existing_codes = "append_to_existing"
                                   , patterns_codes = "firm"
                                   , return_only_first_detected_code = TRUE)

  attr(cockburn_detect_corp, "@title") <-
      "Detect Corporates (code - 'firm')"

#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/cockburn_detect_corp.r
  expect_equal(c(" DR VLASOV & BROTHER "
            ,  "MSlab & C"
            , " S.VLASOV PHD "
            , "LEGALY REPRESENTED BY STAS") |>
            cockburn_detect_corp()
          , structure(list(x = c(" DR VLASOV & BROTHER ", "MSlab & C", " S.VLASOV PHD ", 
                                 "LEGALY REPRESENTED BY STAS"), x_entity_type = c("firm", NA, NA, 
                                                                                NA)), row.names = c(NA, -4L), class = c("data.table", "data.frame"
                                                                                                                        )))
#+END_SRC


***** table - cockburn_patterns_corp

#+call: make-rds-patterns-table(data = cockburn_patterns_corp, data.name = "cockburn_patterns_corp")
#+name: cockburn_patterns_corp
| ' & BRO '                                                |
| ' & BROTHER '                                            |
| ' & C '                                                  |
| ' & CIE '                                                |
| ' & CO '                                                 |
| ' & FILS '                                               |
| ' & PARTNER '                                            |
| ' & SOEHNE '                                             |
| ' & SOHN '                                               |
| ' & SON '                                                |
| ' & SONS '                                               |
| ' & ZN '                                                 |
| ' & ZONEN '                                              |
| ' A '                                                    |
| ' A G '                                                  |
| ' A RL '                                                 |
| ' A S '                                                  |
| ' AANSPRAKELIJKHEID '                                    |
| ' AB '                                                   |
| ' ACTIEN GESELLSCHAFT '                                  |
| ' ACTIENGESELLSCHAFT '                                   |
| ' AD '                                                   |
| ' ADVIESBUREAU '                                         |
| ' AE '                                                   |
| ' AG '                                                   |
| ' AG & CO '                                              |
| ' AGG '                                                  |
| ' AGSA '                                                 |
| ' AK TIEBOLAGET '                                        |
| ' AKIEBOLAG '                                            |
| ' AKIEBOLG '                                             |
| ' AKIENGESELLSCHAFT '                                    |
| ' AKITENGESELLSCHAFT '                                   |
| ' AKITIEBOLAG '                                          |
| ' AKLIENGISELLSCHAFT '                                   |
| ' AKSJESELSKAP '                                         |
| ' AKSJESELSKAPET '                                       |
| ' AKSTIEBOLAGET '                                        |
| ' AKTAINGESELLSCHAFT '                                   |
| ' AKTEIBOLAG '                                           |
| ' AKTEINGESELLSCHAFT '                                   |
| ' AKTIBOLAG '                                            |
| ' AKTIE BOLAGET '                                        |
| ' AKTIEBDAG '                                            |
| ' AKTIEBLOAG '                                           |
| ' AKTIEBOALG '                                           |
| ' AKTIEBOALGET '                                         |
| ' AKTIEBOCAG '                                           |
| ' AKTIEBOLAC '                                           |
| ' AKTIEBOLAF '                                           |
| ' AKTIEBOLAG '                                           |
| ' AKTIEBOLAGET '                                         |
| ' AKTIEBOLAQ '                                           |
| ' AKTIEBOLOG '                                           |
| ' AKTIEGBOLAG '                                          |
| ' AKTIEGESELLSCHAFT '                                    |
| ' AKTIEGOLAGET '                                         |
| ' AKTIELBOLAG '                                          |
| ' AKTIEN '                                               |
| ' AKTIEN GESELLSCHAFT '                                  |
| ' AKTIENBOLAG '                                          |
| ' AKTIENBOLAGET '                                        |
| ' AKTIENEGESELLSCHAFT '                                  |
| ' AKTIENEGSELLSCHAFT '                                   |
| ' AKTIENGEGESELLSCHAFT '                                 |
| ' AKTIENGELLSCHAFT '                                     |
| ' AKTIENGESCELLSCHAFT '                                  |
| ' AKTIENGESELL SCHAFT '                                  |
| ' AKTIENGESELLCHAFT '                                    |
| ' AKTIENGESELLESCHAFT '                                  |
| ' AKTIENGESELLESHAFT '                                   |
| ' AKTIENGESELLS '                                        |
| ' AKTIENGESELLSCAFT '                                    |
| ' AKTIENGESELLSCGAFT '                                   |
| ' AKTIENGESELLSCHAFT '                                   |
| ' AKTIENGESELLSCHART '                                   |
| ' AKTIENGESELLSCHATT '                                   |
| ' AKTIENGESELLSCHGT '                                    |
| ' AKTIENGESELLSCHRAFT '                                  |
| ' AKTIENGESELLSHAFT '                                    |
| ' AKTIENGESELLSHAT '                                     |
| ' AKTIENGESELLSHCAFT '                                   |
| ' AKTIENGESELSCHAFT '                                    |
| ' AKTIENGESESCHAFT '                                     |
| ' AKTIENGESILLSCHAFT '                                   |
| ' AKTIENGESLLSCHAFT '                                    |
| ' AKTIENGESSELLSCHAFT '                                  |
| ' AKTIENGESSELSCHAFT '                                   |
| ' AKTIENGSELLSCHAFT '                                    |
| ' AKTIENGTESELLSCHAFT '                                  |
| ' AKTIENRESELLSCHAFT '                                   |
| ' AKTIESELSKAB '                                         |
| ' AKTIESELSKABET '                                       |
| ' AKTINGESELLSCHAFT '                                    |
| ' AKTSIONERNAYA KOMPANIA '                               |
| ' AKTSIONERNO '                                          |
| ' AKTSIONERNOE OBCHESTVO '                               |
| ' AKTSIONERNOE OBSCHEDTVO '                              |
| ' AKTSIONERNOE OBSCNESTVO '                              |
| ' AKTSIONERNOE OBSHESTVO '                               |
| ' AKTSIONERNOE OSBCHESTVO '                              |
| ' AKTSIONERNOEOBSCHESTVO '                               |
| ' ALTIENGESELLSCHAFT '                                   |
| ' AMBA '                                                 |
| ' AND SONS '                                             |
| ' ANDELSSELSKABET '                                      |
| ' ANLAGENGESELLSCHAFT '                                  |
| ' APPARATEBAU '                                          |
| ' APPERATEBAU '                                          |
| ' ARL '                                                  |
| ' AS '                                                   |
| ' ASA '                                                  |
| ' ASKTIENGESELLSCHAFT '                                  |
| ' ASOCIADOS '                                            |
| ' ASSCOIATES '                                           |
| ' ASSOCIADOS '                                           |
| ' ASSOCIATE '                                            |
| ' ASSOCIATED '                                           |
| ' ASSOCIATES '                                           |
| ' ASSOCIATI '                                            |
| ' ASSOCIATO '                                            |
| ' ASSOCIES '                                             |
| ' ASSSOCIATES '                                          |
| ' ATELIER '                                              |
| ' ATELIERS '                                             |
| ' ATIBOLAG '                                             |
| ' ATKIEBOLAG '                                           |
| ' ATKIENGESELLSCHAFT '                                   |
| ' AVV '                                                  |
| ' B '                                                    |
| ' BANK '                                                 |
| ' BANQUE '                                               |
| ' BEDRIJF '                                              |
| ' BEDRIJVEN '                                            |
| ' BEPERK '                                               |
| ' BEPERKTE AANSPREEKLIJKHEID '                           |
| ' BESCHRAENKTER HAFTUNG '                                |
| ' BESCHRANKTER '                                         |
| ' BESCHRANKTER HAFTUNG '                                 |
| ' BESLOTENGENOOTSCHAP '                                  |
| ' BESLOTENVENNOOTSCHAP '                                 |
| ' BETRIEBE '                                             |
| ' BMBH '                                                 |
| ' BRANDS '                                               |
| ' BROS '                                                 |
| ' BUSINESS '                                             |
| ' BV '                                                   |
| ' BV: '                                                  |
| ' BV? '                                                  |
| ' BVBA '                                                 |
| ' BVBASPRL '                                             |
| ' BVIO '                                                 |
| ' BVSA '                                                 |
| ' C{OVERSCORE O}RP '                                     |
| ' CAMPAGNIE '                                            |
| ' CAMPANY '                                              |
| ' CC '                                                   |
| ' CIE '                                                  |
| ' CMOPANY '                                              |
| ' CO '                                                   |
| ' CO OPERATIVE '                                         |
| ' CO OPERATIVES '                                        |
| ' CO: '                                                  |
| ' COFP '                                                 |
| ' COIRPORATION '                                         |
| ' COMANY '                                               |
| ' COMAPANY '                                             |
| ' COMERCIAL '                                            |
| ' COMERCIO '                                             |
| ' COMMANDITE SIMPLE '                                    |
| ' COMMERCIALE '                                          |
| ' COMMERCIALISATIONS '                                   |
| ' COMNPANY '                                             |
| ' COMP '                                                 |
| ' COMPAGNE '                                             |
| ' COMPAGNI '                                             |
| ' COMPAGNIE '                                            |
| ' COMPAGNIN '                                            |
| ' COMPAGNY '                                             |
| ' COMPAIGNIE '                                           |
| ' COMPAMY '                                              |
| ' COMPANAY '                                             |
| ' COMPANH '                                              |
| ' COMPANHIA '                                            |
| ' COMPANIA '                                             |
| ' COMPANIE '                                             |
| ' COMPANIES '                                            |
| ' COMPANY '                                              |
| ' COMPAY '                                               |
| ' COMPNAY '                                              |
| ' COMAPNY '                                              |
| ' COMPNY '                                               |
| ' COMPORATION '                                          |
| ' CONSORTILE PER AZIONE '                                |
| ' CONSORZIO '                                            |
| ' CONSTRUCTIONS '                                        |
| ' CONSULTING '                                           |
| ' CONZORZIO '                                            |
| ' COOEPERATIE '                                          |
| ' COOEPERATIEVE '                                        |
| ' COOEPERATIEVE VERENIGING '                             |
| ' COOEPERATIEVE VERKOOP '                                |
| ' COOP '                                                 |
| ' COOP A RL '                                            |
| ' COOPERATIE '                                           |
| ' COOPERATIEVE '                                         |
| ' COOPERATIEVE VENOOTSCHAP '                             |
| ' COOPERATION '                                          |
| ' COOPERATIVA AGICOLA '                                  |
| ' COOPERATIVA LIMITADA '                                 |
| ' COOPERATIVA PER AZIONI '                               |
| ' COORPORATION '                                         |
| ' COPANY '                                               |
| ' COPORATION '                                           |
| ' COPR '                                                 |
| ' COPRORATION '                                          |
| ' COPRPORATION '                                         |
| ' COROPORTION '                                          |
| ' COROPRATION '                                          |
| ' COROPROATION '                                         |
| ' CORORATION '                                           |
| ' CORP '                                                 |
| ' CORPARATION '                                          |
| ' CORPERATION '                                          |
| ' CORPFORATION '                                         |
| ' CORPN '                                                |
| ' CORPO '                                                |
| ' CORPOARTION '                                          |
| ' CORPOATAION '                                          |
| ' CORPOATION '                                           |
| ' CORPOIRATION '                                         |
| ' CORPOORATION '                                         |
| ' CORPOPRATION '                                         |
| ' CORPORAATION '                                         |
| ' CORPORACION '                                          |
| ' CORPORAION '                                           |
| ' CORPORAITON '                                          |
| ' CORPORARION '                                          |
| ' CORPORARTION '                                         |
| ' CORPORATAION '                                         |
| ' CORPORATE '                                            |
| ' CORPORATED '                                           |
| ' CORPORATI '                                            |
| ' CORPORATIION '                                         |
| ' CORPORATIN '                                           |
| ' CORPORATINO '                                          |
| ' CORPORATINON '                                         |
| ' CORPORATIO '                                           |
| ' CORPORATIOIN '                                         |
| ' CORPORATIOLN '                                         |
| ' CORPORATIOM '                                          |
| ' CORPORATION '                                          |
| ' CORPORATIOPN '                                         |
| ' CORPORATITON '                                         |
| ' CORPORATOIN '                                          |
| ' CORPORDATION '                                         |
| ' CORPORQTION '                                          |
| ' CORPORTAION '                                          |
| ' CORPORTATION '                                         |
| ' CORPORTION '                                           |
| ' CORPPORATION '                                         |
| ' CORPRATION '                                           |
| ' CORPROATION '                                          |
| ' CORPRORATION '                                         |
| ' CROP '                                                 |
| ' CROPORATION '                                          |
| ' CRPORATION '                                           |
| ' CV '                                                   |
| ' D ENTERPRISES '                                        |
| ' D ENTREPRISE '                                         |
| ' D O O '                                                |
| ' D’ENTREPRISE '                                         |
| ' DD '                                                   |
| ' DEVELOP '                                              |
| ' DEVELOPPEMENT '                                        |
| ' DEVELOPPEMENTS '                                       |
| ' DOING BUSINESS '                                       |
| ' DOO '                                                  |
| ' DORPORATION '                                          |
| ' EDMS '                                                 |
| ' EG '                                                   |
| ' ELECTRONIQUE '                                         |
| ' EN ZN '                                                |
| ' EN ZONEN '                                             |
| ' ENGINEERING '                                          |
| ' ENGINEERS '                                            |
| ' ENGINES '                                              |
| ' ENNOBLISSEMENT '                                       |
| ' ENTERPRISE '                                           |
| ' ENTRE PRISES '                                         |
| ' ENTREPOSE '                                            |
| ' ENTREPRISE '                                           |
| ' ENTREPRISES '                                          |
| ' EQUIP '                                                |
| ' EQUIPAMENTOS '                                         |
| ' EQUIPEMENT '                                           |
| ' EQUIPEMENTS '                                          |
| ' EQUIPMENT '                                            |
| ' EST '                                                  |
| ' ESTABILSSEMENTS '                                      |
| ' ESTABLISHMENT '                                        |
| ' ESTABLISSEMENT '                                       |
| ' ESTABLISSEMENTS '                                      |
| ' ESTABLISSMENTS '                                       |
| ' ET FILS '                                              |
| ' ETABLISSEMENT '                                        |
| ' ETABLISSMENTS '                                        |
| ' ETS '                                                  |
| ' FABRIC '                                               |
| ' FABRICA '                                              |
| ' FABRICATION '                                          |
| ' FABRICATIONS '                                         |
| ' FABRICS '                                              |
| ' FABRIEKEN '                                            |
| ' FABRIK '                                               |
| ' FABRIQUE '                                             |
| ' FABRYKA '                                              |
| ' FACTORY '                                              |
| ' FEDERATED '                                            |
| ' FILM '                                                 |
| ' FINANCIERE '                                           |
| ' FIRM '                                                 |
| ' FIRMA '                                                |
| ' GBMH '                                                 |
| ' GBR '                                                  |
| ' GEBR '                                                 |
| ' GEBROEDERS '                                           |
| ' GEBRUEDER '                                            |
| ' GENERALE POUR LES TECHNIQUES NOUVELLE '                |
| ' GENOSSENSCHAFT '                                       |
| ' GES M B H '                                            |
| ' GES MB H '                                             |
| ' GES MBH '                                              |
| ' GES MHH '                                              |
| ' GESELLSCHAFT '                                         |
| ' GESELLSCHAFT M B '                                     |
| ' GESELLSCHAFT MB H '                                    |
| ' GESELLSCHAFT MBH '                                     |
| ' GESELLSCHAFT MGH '                                     |
| ' GESELLSCHAFT MIT '                                     |
| ' GESELLSCHAFT MIT BESCHRANKTER '                        |
| ' GESELLSCHAFT MIT BESCHRANKTER HAFT '                   |
| ' GESELLSCHAFTMIT BESCHRANKTER '                         |
| ' GESMBH '                                               |
| ' GES '                                                  |
| ' GESSELLSCHAFT MIT BESCHRAENKTER HAUFTUNG '             |
| ' GIE '                                                  |
| ' GMBA '                                                 |
| ' GMBB '                                                 |
| ' GMBG '                                                 |
| ' GMBH '                                                 |
| ' GMHB '                                                 |
| ' GNBH '                                                 |
| ' GORPORATION '                                          |
| ' GROEP '                                                |
| ' GROUP '                                                |
| ' GROUPEMENT D ENTREPRISES '                             |
| ' H '                                                    |
| ' HAFRUNG '                                              |
| ' HANDEL '                                               |
| ' HANDELABOLAGET '                                       |
| ' HANDELEND ONDER '                                      |
| ' HANDELORGANISATION '                                   |
| ' HANDELS '                                              |
| ' HANDELSBOLAG '                                         |
| ' HANDELSBOLAGET '                                       |
| ' HANDELSGESELLSCHAFT '                                  |
| ' HANDESBOLAG '                                          |
| ' HATFUNG '                                              |
| ' HB '                                                   |
| ' HF '                                                   |
| ' HOLDINGS '                                             |
| ' INC '                                                  |
| ' INC: '                                                 |
| ' INCOPORATED '                                          |
| ' INCORORATED '                                          |
| ' INCORPARATED '                                         |
| ' INCORPATED '                                           |
| ' INCORPORATE '                                          |
| ' INCORPORATED '                                         |
| ' INCORPORORATED '                                       |
| ' INCORPORTED '                                          |
| ' INCORPOTATED '                                         |
| ' INCORPRATED '                                          |
| ' INCORPRORATED '                                        |
| ' INCROPORATED '                                         |
| ' INDISTRIES '                                           |
| ' INDUSRTIES '                                           |
| ' INDUSTRI '                                             |
| ' INDUSTRIA '                                            |
| ' INDUSTRIAL '                                           |
| ' INDUSTRIAL COP '                                       |
| ' INDUSTRIALNA '                                         |
| ' INDUSTRIAS '                                           |
| ' INDUSTRIE '                                            |
| ' INDUSTRIES '                                           |
| ' INDUSTRIJA '                                           |
| ' INDUSTRIJSKO '                                         |
| ' INGENIEURBUERO '                                       |
| ' INGENIEURBURO '                                        |
| ' INGENIEURGESELLSCHAFT '                                |
| ' INGENIEURSBUERO '                                      |
| ' INGENIEURSBUREAU '                                     |
| ' INGENIOERSBYRA '                                       |
| ' INGENJOERSFIRMA '                                      |
| ' INGENJOERSFIRMAN '                                     |
| ' INORPORATED '                                          |
| ' INT '                                                  |
| ' INT L '                                                |
| ' INTERNAITONAL '                                        |
| ' INTERNATIONAL '                                        |
| ' INTERNATIONAL BUSINESS '                               |
| ' INTERNATIONALE '                                       |
| ' INTERNATIONAUX '                                       |
| ' INTERNTIONAL '                                         |
| ' INTL '                                                 |
| ' INUDSTRIE '                                            |
| ' INVESTMENT '                                           |
| ' IS '                                                   |
| ' JOINTVENTURE '                                         |
| ' K G '                                                  |
| ' K K '                                                  |
| ' KABAUSHIKI KAISHA '                                    |
| ' KABISHIKI KAISHA '                                     |
| ' KABSUHIKI '                                            |
| ' KABUSHI KIKAISHA '                                     |
| ' KABUSHIBI KAISHA '                                     |
| ' KABUSHIKAISHA '                                        |
| ' KABUSHIKI '                                            |
| ' KABUSHIKKAISHA '                                       |
| ' KABUSHIKU KASISHA '                                    |
| ' KABUSHKIKI KAISHI '                                    |
| ' KABUSIKI '                                             |
| ' KABUSIKI KAISHA '                                      |
| ' KABUSIKI KAISYA '                                      |
| ' KABUSIKIKAISHA '                                       |
| ' KAGUSHIKI KAISHA '                                     |
| ' KAUSHIKI KAISHA '                                      |
| ' KAISHA '                                               |
| ' KAISYA '                                               |
| ' KABAUSHIKI GAISHA '                                    |
| ' KABISHIKI GAISHA '                                     |
| ' KABUSHI KIGAISHA '                                     |
| ' KABUSHIBI GAISHA '                                     |
| ' KABUSHIGAISHA '                                        |
| ' KABUSHIKGAISHA '                                       |
| ' KABUSHIKU GASISHA '                                    |
| ' KABUSHKIKI GAISHI '                                    |
| ' KABUSIKI GAISHA '                                      |
| ' KABUSIKI GAISYA '                                      |
| ' KABUSIKIGAISHA '                                       |
| ' KAGUSHIKI GAISHA '                                     |
| ' KAUSHIKI GAISHA '                                      |
| ' GAISHA '                                               |
| ' GAISYA '                                               |
| ' KB '                                                   |
| ' KB KY '                                                |
| ' KFT '                                                  |
| ' KG '                                                   |
| ' KGAA '                                                 |
| ' KK '                                                   |
| ' KOM GES '                                              |
| ' KOMM GES '                                             |
| ' KOMMANDITBOLAG '                                       |
| ' KOMMANDITBOLAGET '                                     |
| ' KOMMANDITGESELLSCHAFT '                                |
| ' KONSTRUKTIONEN '                                       |
| ' KOOPERATIVE '                                          |
| ' KS '                                                   |
| ' KUBUSHIKI KAISHA '                                     |
| ' KY '                                                   |
| ' L '                                                    |
| ' L C '                                                  |
| ' L L C '                                                |
| ' L P '                                                  |
| ' LAB '                                                  |
| ' LABARATOIRE '                                          |
| ' LABO '                                                 |
| ' LABORATOIRE '                                          |
| ' LABORATOIRES '                                         |
| ' LABORATORI '                                           |
| ' LABORATORIA '                                          |
| ' LABORATORIE '                                          |
| ' LABORATORIES '                                         |
| ' LABORATORIET '                                         |
| ' LABORATORIUM '                                         |
| ' LABORATORY '                                           |
| ' LABRATIORIES '                                         |
| ' LABS '                                                 |
| ' LC '                                                   |
| ' LCC '                                                  |
| ' LDA '                                                  |
| ' LDT '                                                  |
| ' LIIMITED '                                             |
| ' LIMIDADA '                                             |
| ' LIMINTED '                                             |
| ' LIMITADA '                                             |
| ' LIMITADO '                                             |
| ' LIMITATA '                                             |
| ' LIMITE '                                               |
| ' LIMITED '                                              |
| ' LIMITEE '                                              |
| ' LIMTED '                                               |
| ' LINITED '                                              |
| ' LITD '                                                 |
| ' LLC '                                                  |
| ' LLLC '                                                 |
| ' LLLP '                                                 |
| ' LLP '                                                  |
| ' LMITED '                                               |
| ' LP '                                                   |
| ' LT EE '                                                |
| ' LTA '                                                  |
| ' LTC '                                                  |
| ' LTD '                                                  |
| ' LTD: '                                                 |
| ' LTDA '                                                 |
| ' LTDS '                                                 |
| ' LTEE '                                                 |
| ' LTEE; '                                                |
| ' LTS '                                                  |
| ' MAATSCHAPPIJ '                                         |
| ' MANUFACTURE '                                          |
| ' MANUFACTURE D ARTICLES '                               |
| ' MANUFACTURE DE '                                       |
| ' MANUFACTURING '                                        |
| ' MARKETING '                                            |
| ' MASCHINENBAU '                                         |
| ' MASCHINENFABRIK '                                      |
| ' MBH '                                                  |
| ' MBH & CO '                                             |
| ' MERCHANDISING '                                        |
| ' MET BEPERKTE '                                         |
| ' MFG '                                                  |
| ' N A '                                                  |
| ' N V '                                                  |
| ' NA '                                                   |
| ' NAAMLOSE '                                             |
| ' NAAMLOZE '                                             |
| ' NAAMLOZE VENNOOTSCAP '                                 |
| ' NAAMLOZE VENNOOTSHCAP '                                |
| ' NAAMLOZEVENNOOTSCHAP '                                 |
| ' NAUCHNO PRIOZVODSTVENNAYA FIRMA '                      |
| ' NAUCHNO PRIOZVODSTVENNOE OBIEDINENIE '                 |
| ' NAUCHNO PRIOZVODSTVENNY KOOPERATIV '                   |
| ' NAUCHNO PROIZVODSTVENNOE '                             |
| ' NAUCHNO PROIZVODSTVENNOE OBJEDINENIE '                 |
| ' NAUCHNO TEKHNICHESKY KOOPERATIV '                      |
| ' NAUCHNO TEKHNICHESKYKKOOPERATIV '                      |
| ' NAUCHNO TEKHNOLOGICHESKOE '                            |
| ' NAUCHNO TEKHNOLOGICHESKOEPREDPRIYATIE '                |
| ' NAUCHNOPRIOZVODSTVENNOE '                              |
| ' NAUCHNOPROIZVODSTVENNOE '                              |
| ' NAUCHNOTEKHNICHESKYKKOOPERATIV '                       |
| ' NAUCHNOTEKNICHESKY '                                   |
| ' NV '                                                   |
| ' NV SA '                                                |
| ' NV: '                                                  |
| ' NVSA '                                                 |
| ' OBIDINENIE '                                           |
| ' OBIED '                                                |
| ' OBSCHESRYO '                                           |
| ' OBSCHESTVO & OGRANICHENNOI OTVETSTVENNOSTJU '          |
| ' OBSCHESTVO & ORGANICHENNOI OTVETSTVENNOSTIJU '         |
| ' OBSCHESTVO C '                                         |
| ' OBSCHESTVO S '                                         |
| ' OBSCHESTVO S OGRANICHENNOI '                           |
| ' OBSCHESTVO S OGRANICHENNOI OTVETSTVEN NOSTJU '         |
| ' OBSCHESTVO S OGRANICHENNOI OTVETSTVENNOSTIJU '         |
| ' OBSCHESTVO S OGRANICHENNOI OTVETSTVENNPSTJU '          |
| ' OBSCHESTVO S OGRANICHENNOY OTVETSTVENNOSTJU '          |
| ' OBSCHESTVO S OGRANICHENOI '                            |
| ' OBSCHESTVO S ORGANICHENNOI OTVETSTVENNOSTIJU '         |
| ' OBSCHESTVO S ORGANICHENNOI OTVETSTVENNOSTJU '          |
| ' OBSHESTVO S '                                          |
| ' OBSHESTVO S OGRANNICHENNOJ '                           |
| ' OBSHESTVO S ORGANICHENNOI OTVETSTVENNOSTIJU '          |
| ' OBSHESTVO S ORGANICHENNOI OTVETSTVENNOSTJU '           |
| ' OCTROOIBUREAU '                                        |
| ' OGRANICHENNOI OTVETSTVENNOSTIJU '                      |
| ' OGRANICHENNOI OTVETSTVENNOSTIJU FIRMA '                |
| ' OGRANICHENNOI OTVETSTVENNOSTJU '                       |
| ' OGRANICHENNOY OTVETSTVENNOSTYU '                       |
| ' OHG '                                                  |
| ' ONDERNEMING '                                          |
| ' OTVETCTVENNOSTJU '                                     |
| ' OTVETSTVENNOSTIJU '                                    |
| ' OTVETSTVENNOSTJU '                                     |
| ' OTVETSTVENNOSTOU '                                     |
| ' OTVETSTVENNOSTYU '                                     |
| ' OY '                                                   |
| ' OYABLTD '                                              |
| ' OYG '                                                  |
| ' OYI '                                                  |
| ' OYJ '                                                  |
| ' OYL '                                                  |
| ' P '                                                    |
| ' P C '                                                  |
| ' P L C '                                                |
| ' PARNERSHIP '                                           |
| ' PARNTERSHIP '                                          |
| ' PARTNER '                                              |
| ' PARTNERS '                                             |
| ' PARTNERSHIP '                                          |
| ' PATENT OFFICE '                                        |
| ' PATENTVERWALTUNGS GESELLSCHAFT MBH '                   |
| ' PATENTVERWALTUNGSGESELLSCHAFT '                        |
| ' PATENTVERWERTUNGSGESELLSCHAFT '                        |
| ' PATNERSHIP '                                           |
| ' PC '                                                   |
| ' PER AZIONA '                                           |
| ' PERSONENVENNOOTSCHAP MET BE PERKTE AANSPRAKELIJKHEID ' |
| ' PHARM '                                                |
| ' PHARMACEUTICA '                                        |
| ' PHARMACEUTICAL '                                       |
| ' PHARMACEUTICALS '                                      |
| ' PHARMACEUTIQUE '                                       |
| ' PHARMACIA '                                            |
| ' PHARMACIE '                                            |
| ' PHARMACUETICALS '                                      |
| ' PLANTS '                                               |
| ' PLC '                                                  |
| ' PREDPRIVATIE '                                         |
| ' PREDPRIYATIE '                                         |
| ' PREPRIVATIE '                                          |
| ' PRODUCE '                                              |
| ' PRODUCT '                                              |
| ' PRODUCTEURS '                                          |
| ' PRODUCTION '                                           |
| ' PRODUCTIONS '                                          |
| ' PRODUCTIQUE '                                          |
| ' PRODUCTS '                                             |
| ' PRODUITS '                                             |
| ' PRODUKTE '                                             |
| ' PRODUKTER '                                            |
| ' PRODUKTION '                                           |
| ' PRODUKTIONSGESELLSCHAFT '                              |
| ' PRODUKTUTVECKLING '                                    |
| ' PRODURA '                                              |
| ' PRODUTIS '                                             |
| ' PROIZVODSTENNOE OBIEDINENIE '                          |
| ' PROIZVODSTVENNOE '                                     |
| ' PROIZVODSTVENNOE OBIEDINENIE '                         |
| ' PTY '                                                  |
| ' PTY LIM '                                              |
| ' PTYLTD '                                               |
| ' PUBLISHING '                                           |
| ' PVBA '                                                 |
| ' RECHERCHES '                                           |
| ' RESPONSABILITA LIMITATA '                              |
| ' RESPONSABILITA’ LIMITATA '                             |
| ' RESPONSABILITE LIMITE '                                |
| ' RO '                                                   |
| ' RT '                                                   |
| ' S A '                                                  |
| ' S A R L '                                              |
| ' S A RL '                                               |
| ' S COOP '                                               |
| ' S COOP LTDA '                                          |
| ' S NC '                                                 |
| ' S OGRANICHENNOI OTVETSTVENNEST '                       |
| ' S P A '                                                |
| ' S PA '                                                 |
| ' S R L '                                                |
| ' S RL '                                                 |
| ' S S '                                                  |
| ' SA '                                                   |
| ' SA A RL '                                              |
| ' SA RL '                                                |
| ' SA: '                                                  |
| ' SAAG '                                                 |
| ' SAARL '                                                |
| ' SALES '                                                |
| ' SANV '                                                 |
| ' SARL '                                                 |
| ' SARL: '                                                |
| ' SAS '                                                  |
| ' SC '                                                   |
| ' SCA '                                                  |
| ' SCARL '                                                |
| ' SCIETE ANONYME '                                       |
| ' SCOOP '                                                |
| ' SCPA '                                                 |
| ' SCRAS '                                                |
| ' SCRL '                                                 |
| ' SEMPLICE '                                             |
| ' SERIVICES '                                            |
| ' SERVICE '                                              |
| ' SERVICES '                                             |
| ' SHOP '                                                 |
| ' SIMPLIFIEE '                                           |
| ' SL '                                                   |
| ' SNC '                                                  |
| ' SOC '                                                  |
| ' SOC ARL '                                              |
| ' SOC COOOP ARL '                                        |
| ' SOC COOP A RESP LIM '                                  |
| ' SOC COOP A RL '                                        |
| ' SOC COOP R L '                                         |
| ' SOC COOP RL '                                          |
| ' SOC IND COMM '                                         |
| ' SOC RL '                                               |
| ' SOCCOOP ARL '                                          |
| ' SOCCOOPARL '                                           |
| ' SOCIEDAD '                                             |
| ' SOCIEDAD ANONIMA '                                     |
| ' SOCIEDAD ANONIMYA '                                    |
| ' SOCIEDAD INDUSTRIAL '                                  |
| ' SOCIEDAD LIMITADA '                                    |
| ' SOCIEDADE LIMITADA '                                   |
| ' SOCIET CIVILE '                                        |
| ' SOCIETA '                                              |
| ' SOCIETA A '                                            |
| ' SOCIETA A RESPONSABILITA LIMITATA '                    |
| ' SOCIETA ANONIMA '                                      |
| ' SOCIETA CONSORTILE '                                   |
| ' SOCIETA CONSORTILE A RESPONSABILITA '                  |
| ' SOCIETA CONSORTILE ARL '                               |
| ' SOCIETA CONSORTILE PER AZION '                         |
| ' SOCIETA CONSORTILE PER AZIONI '                        |
| ' SOCIETA COOPERATIVA '                                  |
| ' SOCIETA COOPERATIVA A '                                |
| ' SOCIETA IN ACCOMANDITA '                               |
| ' SOCIETA IN ACCOMANDITA SEMPLICE '                      |
| ' SOCIETA IN NOME COLLETTIVO '                           |
| ' SOCIETA INDUSTRIA '                                    |
| ' SOCIETA PER AXIONI '                                   |
| ' SOCIETA PER AZINOI '                                   |
| ' SOCIETA PER AZINONI '                                  |
| ' SOCIETA PER AZIONI '                                   |
| ' SOCIETA PER AZIONI: '                                  |
| ' SOCIETA PER L INDUSTRIA '                              |
| ' SOCIETA PERAZIONI '                                    |
| ' SOCIETAPERAZIONI '                                     |
| ' SOCIETE '                                              |
| ' SOCIETE A '                                            |
| ' SOCIETE A RESPONSABILITE '                             |
| ' SOCIETE A RESPONSABILITE DITE '                        |
| ' SOCIETE A RESPONSABILITEE '                            |
| ' SOCIETE ANANYME '                                      |
| ' SOCIETE ANNOYME '                                      |
| ' SOCIETE ANOMYME '                                      |
| ' SOCIETE ANOMYNE '                                      |
| ' SOCIETE ANONVME '                                      |
| ' SOCIETE ANONYM '                                       |
| ' SOCIETE ANONYME '                                      |
| ' SOCIETE ANOYME '                                       |
| ' SOCIETE CHIMIQUE '                                     |
| ' SOCIETE CIVILE '                                       |
| ' SOCIETE COOPERATIVE '                                  |
| ' SOCIETE D APPLICATIONS GENERALES '                     |
| ' SOCIETE D APPLICATIONS MECANIQUES '                    |
| ' SOCIETE D EQUIPEMENT '                                 |
| ' SOCIETE D ETUDE ET DE CONSTRUCTION '                   |
| ' SOCIETE D ETUDE ET DE RECHERCHE EN VENTILATION '       |
| ' SOCIETE D ETUDES ET '                                  |
| ' SOCIETE D ETUDES TECHNIQUES ET D ENTREPRISES '         |
| ' SOCIETE DE '                                           |
| ' SOCIETE DE CONSEILS DE RECHERCHES ET D APPLICATIONS '  |
| ' SOCIETE DE CONSTRUCTIO '                               |
| ' SOCIETE DE FABRICAITON '                               |
| ' SOCIETE DE FABRICATION '                               |
| ' SOCIETE DE PRODUCTION ET DE '                          |
| ' SOCIETE DES TRANSPORTS '                               |
| ' SOCIETE DITE '                                         |
| ' SOCIETE DITE : '                                       |
| ' SOCIETE DITE: '                                        |
| ' SOCIETE EN '                                           |
| ' SOCIETE EN COMMANDITE '                                |
| ' SOCIETE EN COMMANDITE ENREGISTREE '                    |
| ' SOCIETE EN NOM COLLECTIF '                             |
| ' SOCIETE ETUDES ET '                                    |
| ' SOCIETE ETUDES ET DEVELOPPEMENTS '                     |
| ' SOCIETE GENERALE POUR LES '                            |
| ' SOCIETE GENERALE POUR LES TECHNIQUES NOVELLES '        |
| ' SOCIETE METALLURGIQUE '                                |
| ' SOCIETE NOUVELLE '                                     |
| ' SOCIETE PAR ACTIONS '                                  |
| ' SOCIETE PAR ACTIONS SIMPLIFEE '                        |
| ' SOCIETE PAR ACTIONS SIMPLIFIEE '                       |
| ' SOCIETE TECHNIQUE D APPLICATION ET DE RECHERCHE '      |
| ' SOCIETE TECHNIQUE DE PULVERISATION '                   |
| ' SOCIETEANONYME '                                       |
| ' SOCIETEDITE '                                          |
| ' SOCIETEINDUSTRIELLE '                                  |
| ' SOCRL '                                                |
| ' SOEHNE '                                               |
| ' SOGRANICHENNOI OTVETSTVENNOSTJU '                      |
| ' SOHN '                                                 |
| ' SOHNE '                                                |
| ' SONNER '                                               |
| ' SP '                                                   |
| ' SP A '                                                 |
| ' SP Z OO '                                              |
| ' SP ZOO '                                               |
| ' SPA '                                                  |
| ' SPOKAZOO '                                             |
| ' SPOL '                                                 |
| ' SPOL S R O '                                           |
| ' SPOL S RO '                                            |
| ' SPOL SRO '                                             |
| ' SPOLECNOST SRO '                                       |
| ' SPOLKA Z OO '                                          |
| ' SPOLKA ZOO '                                           |
| ' SPOLS RO '                                             |
| ' SPOLSRO '                                              |
| ' SPRL '                                                 |
| ' SPZ OO '                                               |
| ' SPZOO '                                                |
| ' SR '                                                   |
| ' SR L '                                                 |
| ' SR1 '                                                  |
| ' SRI '                                                  |
| ' SRL '                                                  |
| ' SRO '                                                  |
| ' SßRL '                                                 |
| ' SURL '                                                 |
| ' TEAM '                                                 |
| ' TECHNIQUES NOUVELLE '                                  |
| ' TECHNOLOGIES '                                         |
| ' THE FIRM '                                             |
| ' TOHO BUSINESS '                                        |
| ' TOVARISCHESIVO S OGRANICHENNOI OIVETSIVENNOSTIJU '     |
| ' TOVARISCHESTVO '                                       |
| ' TOVARISCHESTVO S OGRANICHENNOI '                       |
| ' TOVARISCHESTVO S OGRANICHENNOI OTVETSTVENNOSTJU '      |
| ' TOVARISCHESTVO S OGRANICHENNOI OTVETSVENNOSTJU '       |
| ' TOVARISCHESTVO S ORGANICHENNOI OTVETSTVENNOSTJU '      |
| ' TOVARISCHETSTVO S ORGANICHENNOI '                      |
| ' TRADING '                                              |
| ' TRADING AS '                                           |
| ' TRADING UNDER '                                        |
| ' UGINE '                                                |
| ' UNTERNEHMEN '                                          |
| ' USA '                                                  |
| ' USINES '                                               |
| ' VAKMANSCHAP '                                          |
| ' VENNOOTSCHAP '                                         |
| ' VENNOOTSCHAP ONDER FIRMA: '                            |
| ' VENNOOTSHAP '                                          |
| ' VENNOTSCHAP '                                          |
| ' VENOOTSCHAP '                                          |
| ' VENTURE '                                              |
| ' VERARBEITUNG '                                         |
| ' VERKOOP '                                              |
| ' VERSICHERUNGSBUERO '                                   |
| ' VERTRIEBSGESELLSCHAFT '                                |
| ' VOF '                                                  |
| ' WERK '                                                 |
| ' WERKE '                                                |
| ' WERKEN '                                               |
| ' WERKHUIZEN '                                           |
| ' WERKS '                                                |
| ' WERKSTAETTE '                                          |
| ' WERKSTATT '                                            |
| ' WERKZEUGBAU '                                          |
| ' WINKEL '                                               |
| ' WORKS '                                                |
| ' YUGEN KAISHA '                                         |
| ' YUGENKAISHA '                                          |
| ' YUUGEN KAISHA '                                        |
| ' YUUGENKAISHA '                                         |
| ' ZOO '                                                  |


**** Individuals
:PROPERTIES:
:ID:       org:480k6q51nki0
:END:
- code :: "indiv"

#+BEGIN_SRC R :tangle R/cockburn.r
  ##' @eval attr(cockburn_detect_indiv, "@title")
  ##' @description From non_corporates.do file. Source -
  ##'     https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' @inherit detect_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso detect_patterns
  ##'
  ##' @md
  ##' @export
  cockburn_detect_indiv <- make_alias(detect_patterns
                                    , patterns = cockburn_patterns_indiv
                                    , patterns_codes = "indiv"
                                    , output_codes_col_name = "{col_name_}entity_type"
                                    , merge_existing_codes = "append_to_existing"
                                    , return_only_first_detected_code = TRUE)

  attr(cockburn_detect_indiv, "@title") <-
      "Detect Individuals (Non-Corporates group)"

#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_detect_indiv.r

  expect_equal(c(" DR VLASOV "
               , " S.VLASOV PHD "
               , "LEGALY REPRESENTED BY STAS") |>
               cockburn_detect_indiv()
             , structure(list(x = c(" DR VLASOV ", " S.VLASOV PHD ", "LEGALY REPRESENTED BY STAS"
                                    ), x_entity_type = c("indiv", "indiv", NA)), row.names = c(NA, 
                                                                                             -3L), class = c("data.table", "data.frame")))



  expect_equal(c(" DR VLASOV "
               , " S.VLASOV PHD "
               , " STANICA LEGALY REPRESENTED BY STAS"
               , " DR VLASOV & BROTHER "
               , "MSlab & C"
               , "LEGALY REPRESENTED BY STAS"
               , " REPUBLIC LEGALY REPRESENTED BY STAS"
               , " TILBURG UNIVERSTIY "
               , " VU UNIVERSTITAET "
               , " FUNDATION LEGALY REPRESENTED BY STAS") |>
               cockburn_detect_indiv() |>
               cockburn_detect_govt() |>
               cockburn_detect_indiv()
  , structure(list(x = c(" DR VLASOV ", " S.VLASOV PHD ", " STANICA LEGALY REPRESENTED BY STAS", 
  " DR VLASOV & BROTHER ", "MSlab & C", "LEGALY REPRESENTED BY STAS", 
  " REPUBLIC LEGALY REPRESENTED BY STAS", " TILBURG UNIVERSTIY ", 
  " VU UNIVERSTITAET ", " FUNDATION LEGALY REPRESENTED BY STAS"
  ), x_entity_type = list(c("indiv", "indiv"), c("indiv", "indiv"
  ), c("indiv", "indiv"), c("indiv", "indiv"), character(0), character(0), 
      c("indiv", "govt", "indiv"), character(0), character(0), 
      c("indiv", "indiv"))), row.names = c(NA, -10L), class = c("data.table", 
  "data.frame")))
#+END_SRC


***** table - cockburn_patterns_indiv
#+call: make-rds-patterns-table(data = cockburn_patterns_indiv, data.name = "cockburn_patterns_indiv")
#+name: cockburn_patterns_indiv
| ' GEB '                       |
| ' DECEASED '                  |
| ' DECEDE '                    |
| ' DESEASED '                  |
| ' DIPL '                      |
| ' DIPL BETRIEBSWIRT '         |
| ' DIPL CHEM '                 |
| ' DIPL GEOGR '                |
| ' DIPL ING '                  |
| ' DIPL ING '                  |
| ' DIPL PHYS '                 |
| ' DIPL PHYS '                 |
| ' DIPL WIRTSCH ING '          |
| ' DOTT ING '                  |
| ' DR '                        |
| ' EPOSE '                     |
| ' EPOUSE '                    |
| ' EPSE '                      |
| ' GEBOREN '                   |
| ' GEBORENE '                  |
| ' GES VERTRETEN DURCH '       |
| ' GRAD '                      |
| ' HERITIERE '                 |
| ' ING '                       |
| ' ING GRAD '                  |
| ' ING DIPL '                  |
| ' JR '                        |
| ' LA SUCCESSION '             |
| ' LEGAL '                     |
| ' LEGALLY REPR '              |
| ' LEGALLY REPRESENTED '       |
| ' LEGALY REPRESENTED BY '     |
| ' NEE '                       |
| ' PHD '                       |
| ' PROF '                      |
| ' REPRESENTATIVE OF '         |
| ' REPRESENTEE PAR SON LEGAL ' |
| ' VERSTORBEN '                |
| ' VERSTORBEN ERFINDERS '      |
| ' VERSTORBENEN ERFINDERS '    |
| ' VERTRETEN DURCH '           |

**** Government
:PROPERTIES:
:ID:       org:r46k6q51nki0
:END:
- code :: "govt"

#+BEGIN_SRC R :tangle R/cockburn.r
  ##' @eval attr(cockburn_detect_govt, "@title")
  ##' @description From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' @inherit detect_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso detect_patterns
  ##'
  ##' @md
  ##' @export
  cockburn_detect_govt <- make_alias(detect_patterns
                                   , patterns = cockburn_patterns_govt
                                   , patterns_codes = "govt"
                                   , output_codes_col_name = "{col_name_}entity_type"
                                   , merge_existing_codes = "append_to_existing"
                                   , return_only_first_detected_code = TRUE)

  attr(cockburn_detect_govt, "@title") <-
      "Detect Goverment Organizations (Non-Corporates group)"




  ##' @eval attr(cockburn_replace_govt, "@title")
  ##' @description From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  cockburn_replace_govt <- make_alias(replace_patterns
                                    , patterns = cockburn_patterns_govt_cleanup)

  attr(cockburn_replace_govt, "@title") <-
      "Cleanup Goverment Organizations (Non-Corporates group)"


#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_replace_govt.r
  expect_equal(c(" DR VLASOV "
               , " S.VLASOV PHD "
               , " REPUBLIC LEGALY REPRESENTED BY STAS") |>
               cockburn_detect_govt()
             , structure(list(x = c(" DR VLASOV ", " S.VLASOV PHD ", " REPUBLIC LEGALY REPRESENTED BY STAS"
                                    ), x_entity_type = c(NA, NA, "govt")), row.names = c(NA, -3L), class = c("data.table", 
                                                                                                           "data.frame")))

  expect_equal(" VERY IMPORTANT SEC OF THE DEPT OF  " |>
               cockburn_replace_govt()
             , " VERY IMPORTANT DEPT OF  ")




#+END_SRC


***** table - cockburn_patterns_govt

#+call: make-rds-patterns-table(data = cockburn_patterns_govt, data.name = "cockburn_patterns_govt")
#+name: cockburn_patterns_govt
| ' NAT RES COUNCIL '                       |
| ' NAT RES INST '                          |
| ' NAT SCI COUNCIL '                       |
| ' NAT SCI INST '                          |
| ' AGENCY '                                |
| ' STATE OF '                              |
| ' US ADMIN '                              |
| ' ADMINISTRATOR '                         |
| ' COMMISSIONER OF PATENTS '               |
| ' US DEPT '                               |
| ' US SEC '                                |
| ' UK SEC FOR '                            |
| ' UK '                                    |
| ' COMMONWEALTH '                          |
| ' MIN OF '                                |
| ' MIN FOR '                               |
| ' LETAT FR REPRESENTE '                   |
| ' LA POSTE '                              |
| ' ADMINISTRATOR '                         |
| ' AGENCE '                                |
| ' AGENCY '                                |
| ' AMMINISTRAZIONE '                       |
| ' AMMINISTRAZIONE '                       |
| ' AUTHORITY '                             |
| ' BOTANICAL GARDEN '                      |
| ' BUNDESANSTALT '                         |
| ' BUNDESREPUBLIK '                        |
| ' CHAMBRE '                               |
| ' CITY '                                  |
| ' COMISSARIAT '                           |
| ' COMMISARIAT '                           |
| ' COMMISSARAIT '                          |
| ' COMMISSARAT '                           |
| ' COMMISSARIAT '                          |
| ' COMMISSARIET '                          |
| ' COMMISSION '                            |
| ' COMMISSRIAT '                           |
| ' COMMONWEALTH '                          |
| ' COMMUNAUTE '                            |
| ' CONFEDERATED TRIBES '                   |
| ' COOUNCIL OF '                           |
| ' COUCIL OF '                             |
| ' COUNCIL '                               |
| ' COUNSEL OF '                            |
| ' COUNTY '                                |
| ' DEN PRAESIDENTEN '                      |
| ' DEPARTMENT OF AGRICULTURE '             |
| ' DETAT '                                 |
| ' ETAT '                                  |
| ' GERMANY '                               |
| ' GEZONDHEIDSDIENST '                     |
| ' GOUVERNEMENT '                          |
| ' GOUVERNMENT '                           |
| ' GOVERNER '                              |
| ' GOVERNMENT '                            |
| ' GOVERNOR '                              |
| ' HER MAJESTY '                           |
| ' KEN '                                   |
| ' LETAT '                                 |
| ' MINISTER '                              |
| ' MINISTERO '                             |
| ' MINISTRE '                              |
| ' MINISTRI '                              |
| ' MINISTRO '                              |
| ' MINISTRY '                              |
| ' MUNICIPAL UTILITY DISTRICT '            |
| ' NACIONAL '                              |
| ' NATIONAL '                              |
| ' NAZIONALE '                             |
| ' POLICE '                                |
| ' PREFECTURE '                            |
| ' PRESIDENZA DEL CONSIGLIO DEI MINISTRI ' |
| ' PRESIDENZADEL CONSIGLIO DEL MINISTRI '  |
| ' REPUBLIC '                              |
| ' RESEARCH COUNCIL '                      |
| ' SECRETARIAT '                           |
| ' SECRETARY '                             |
| ' STAAT '                                 |
| ' STADT '                                 |
| ' STATE '                                 |
| ' STATO '                                 |
| ' THE QUEEN '                             |
| ' VILLE '                                 |
| ' CNRS '                                  |
| ' CENT NAT DE LA RECH '                   |
| ' CENT NAT DETUDES SPATIALES '            |
| ' DESY '                                  |

***** table - cockburn_patterns_govt_cleanup


#+call: make-rds-patterns-table(data = cockburn_patterns_govt_cleanup, data.name = "cockburn_patterns_govt_cleanup")
#+name: cockburn_patterns_govt_cleanup
| pattern                | replacement |
|------------------------+-------------|
| ' SEC OF DEPT OF '     | ' DEPT OF ' |
| ' SEC OF THE DEPT OF ' | ' DEPT OF ' |


**** Universities
:PROPERTIES:
:ID:       org:zdck6q51nki0
:END:
- code :: "univ"

#+BEGIN_SRC R :tangle R/cockburn.r
  ##' @eval attr(cockburn_detect_univ, "@title")
  ##' @description From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' @inherit detect_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso detect_patterns
  ##'
  ##' @md
  ##' @export
  cockburn_detect_univ <- make_alias(detect_patterns
                                   , patterns = cockburn_patterns_univ
                                   , patterns_codes = "univ"
                                   , output_codes_col_name = "{col_name_}entity_type"
                                   , merge_existing_codes = "append_to_existing"
                                   , return_only_first_detected_code = TRUE)

  attr(cockburn_detect_univ, "@title") <-
      "Detect Universities (Non-Corporates group)"







  ##' @eval attr(cockburn_replace_univ, "@title")
  ##' @description From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  cockburn_replace_univ <- make_alias(replace_patterns
                                    , patterns = cockburn_patterns_univ_cleanup)

  attr(cockburn_replace_univ, "@title") <-
      "Cleanup Universities (Non-Corporates group)"



#+END_SRC



#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_replace_univ.r

  expect_equal(c(" TILBURG UNIVERSTIY "
               , " VU UNIVERSTITAET "
               , "LEGALY REPRESENTED BY STAS") |>
               cockburn_detect_univ()
             , structure(list(x = c(" TILBURG UNIVERSTIY ", " VU UNIVERSTITAET ", 
                                    "LEGALY REPRESENTED BY STAS"), x_entity_type = c("univ", "univ", 
                                                                                   NA)), row.names = c(NA, -3L), class = c("data.table", "data.frame"
                                                                                                                           )))



  expect_equal(c(" SUPERVISORS OF THE TILBURG UNIVERSTIY "
               , " VU UNIVERSTITAET "
               , "LEGALY REPRESENTED BY STAS") |>
               cockburn_replace_univ()
             , c(" TILBURG UNIVERSTIY ", " VU UNIVERSTITAET ", "LEGALY REPRESENTED BY STAS"
                 ))


#+END_SRC


***** table - universities
#+call: make-rds-patterns-table(data = cockburn_patterns_univ, data.name = "cockburn_patterns_univ")
#+name: cockburn_patterns_univ
| ' ACADEM'                   |
| ' ACAD '                    |
| ' AKAD '                    |
| ' COLLEGE '                 |
| ' CURATORS '                |
| ' ECOLE '                   |
| ' FACULTE '                 |
| ' INST OF TECH '            |
| ' INST OF TECH'             |
| ' INSTITUTE OF TECHNOLOGY ' |
| ' INTERNUIVERSITAIR '       |
| ' INTERUNIVERITAIR '        |
| ' POLITEC '                 |
| ' POLYTEC '                 |
| ' REGENTS '                 |
| ' RIJKSUNIVERSTTEIT '       |
| ' SCHOOL '                  |
| ' SCHULE '                  |
| ' SUPERVISORS '             |
| ' TRUSTEES '                |
| ' UMIVERSIDAD '             |
| ' UNIV '                    |
| ' UNIVERISITY '             |
| ' UNIVERISTY '              |
| ' UNIVERSATIES '            |
| ' UNIVERSI'                 |
| ' UNIVERSTIA '              |
| ' UNIVERSTITAT '            |
| ' UNIVERSTITAET '           |
| ' UNIVERSTITY '             |
| ' UNIVERSTIY '              |
| ' UNIVERSY '                |
| ' UNIVERZ '                 |
| ' UNVERSITY '               |
| ' KU LEUVEN '               |

***** table - clean up university names
#+call: make-rds-patterns-table(data = cockburn_patterns_univ_cleanup, data.name = "cockburn_patterns_univ_cleanup")
#+name: cockburn_patterns_univ_cleanup
| pattern                         | replacement |
|---------------------------------+-------------|
| ' BOARD OF REGENTS OF THE '     | ' '         |
| ' BOARD OF REGENTS OF '         | ' '         |
| ' BOARD OF REGENTS '            | ' '         |
| ' REGENTS OF THE '              | ' '         |
| ' REGENTS OF '                  | ' '         |
| ' REGENTS '                     | ' '         |
| ' BOARD OF TRUSTEES OF THE '    | ' '         |
| ' BOARD OF TRUSTEES OF '        | ' '         |
| ' BOARD OF TRUSTEES OPERATING ' | ' '         |
| ' BOARD OF TRUSTEES '           | ' '         |
| ' TRUSTEES OF THE '             | ' '         |
| ' TRUSTEES OF '                 | ' '         |
| ' TRUSTEES '                    | ' '         |
| ' BOARD OF SUPERVISORS OF THE ' | ' '         |
| ' BOARD OF SUPERVISORS OF '     | ' '         |
| ' BOARD OF SUPERVISORS '        | ' '         |
| ' SUPERVISORS OF THE '          | ' '         |
| ' SUPERVISORS OF '              | ' '         |
| ' SUPERVISORS '                 | ' '         |
| ' BOARD OF GOVERNORS OF THE '   | ' '         |
| ' BOARD OF GOVERNORS OF '       | ' '         |
| ' BOARD OF GOVERNORS '          | ' '         |
| ' GOVERNORS OF THE '            | ' '         |
| ' GOVERNORS OF '                | ' '         |
| ' GOVERNORS '                   | ' '         |
| ' CURATORS OF THE '             | ' '         |
| ' CURATORS '                    | ' '         |
| ' THE '                         | ' '         |


**** Non-profit institutes
:PROPERTIES:
:ID:       org:owhk6q51nki0
:END:

#+BEGIN_SRC R :tangle R/cockburn.r
  ##' @eval attr(cockburn_detect_inst, "@title")
  ##' @description From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' @inherit detect_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso detect_patterns
  ##'
  ##' @md
  ##' @export
  cockburn_detect_inst <- make_alias(detect_patterns
                                   , patterns = cockburn_patterns_inst
                                   , patterns_codes = "inst"
                                   , output_codes_col_name = "{col_name_}entity_type"
                                   , merge_existing_codes = "append_to_existing"
                                   , return_only_first_detected_code = TRUE)

  attr(cockburn_detect_inst, "@title") <-
      "Detect Non-profit Institutes (Non-Corporates group)"


#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_detect_inst.r
  expect_equal(c(" DR VLASOV "
               , " S.VLASOV PHD "
               , " FUNDATION LEGALY REPRESENTED BY STAS") |>
               cockburn_detect_inst()
             , structure(list(x = c(" DR VLASOV ", " S.VLASOV PHD ", " FUNDATION LEGALY REPRESENTED BY STAS"
                                    ), x_entity_type = c(NA, NA, "inst")), row.names = c(NA, -3L), class = c("data.table", 
                                                                                                           "data.frame")))


  #+END_SRC



***** table - cockburn_patterns_inst

#+call: make-rds-patterns-table(data = cockburn_patterns_inst, data.name = "cockburn_patterns_inst")
#+name: cockburn_patterns_inst
| ' RESEARCH COUNCIL '               |
| ' RES COUNCIL '                    |
| ' FRAUNHOFER GES '                 |
| ' MAX PLANCK GES '                 |
| ' ASBL '                           |
| ' ASOCIACION '                     |
| ' ASSOCIATION '                    |
| ' ASSOCIAZIONE '                   |
| ' BLOOD '                          |
| ' BLOOD CENTER '                   |
| ' BLOOD SERVICES '                 |
| ' BLOOD TRANSFUSION SERVICE '      |
| ' CHURCH '                         |
| ' COOPERATIVE '                    |
| ' E V '                            |
| ' EV '                             |
| ' FEDERATION '                     |
| ' FONDATION '                      |
| ' FONDATIONE '                     |
| ' FOUNDATION '                     |
| ' FORSKNINGSINSTITUT '             |
| ' FUNDACAO '                       |
| ' FUNDACIO '                       |
| ' FUNDACION '                      |
| ' FUNDATION '                      |
| ' INDUSTRIAL TECHNOLOGY RESEARCH ' |
| ' INSITUT '                        |
| ' INSITUTE '                       |
| ' INSTIT '                         |
| ' INSTYTUT '                       |
| ' INSTYTUT '                       |
| ' INTITUTE '                       |
| ' ISTITUTO '                       |
| ' KENKYUSHO '                      |
| ' MINISTRIES '                     |
| ' SOCIETY '                        |
| ' STICHTING '                      |
| ' STIFTELSE '                      |
| ' STIFTUNG '                       |
| ' TRANSFUSION '                    |
| ' TRANSFUSION SANGUINE '           |
| ' TRUST '                          |
| ' VERENINING '                     |
| ' VZW '                            |

***** Complex conditions
:PROPERTIES:
:ID:       org:ajok6q51nki0
:END:

| pattern        | condition                            |
|----------------+--------------------------------------|
| ' COUNCIL OF ' | >0 & strpos(standard_name," RES ")>0 |
| ' FOUND '      | ~=0 & asstype~="univ"                |
| ' INST '       | >0 & asstype~="univ"                 |

#+BEGIN_SRC R :tangle R/cockburn.r
  ##' @eval attr(cockburn_detect_inst_conds_1, "@title")
  ##' @description STATA equivalent: replace asstype = "inst" if strpos(standard_name," COUNCIL OF ")>0 & strpos(standard_name," RES ")>0
  ##' @inherit detect_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso detect_patterns
  ##'
  ##' @md
  ##' @export
  cockburn_detect_inst_conds_1 <- make_alias(detect_patterns
                                           , patterns = " COUNCIL OF .* RES | RES .* COUNCIL OF "
                                           , patterns_type = "regex"
                                           , patterns_codes = "inst"
                                           , output_codes_col_name = "{col_name_}entity_type"
                                           , merge_existing_codes = "append_to_existing"
                                           , return_only_first_detected_code = TRUE)

  attr(cockburn_detect_inst_conds_1, "@title") <-
      "Detects Non-profit institutes with special conditions"



  ##' Detects Non-profit institutes with special conditions
  ##'
  ##' STATA equivalent
  ##' replace asstype = "inst" if strpos(standard_name," FOUND ")~=0 & asstype~="univ"
  ##' assume a bug: " FOUND ")~=0 -> " FOUND ")>0
  ##' replace asstype = "inst" if strpos(standard_name," INST ")>0 & asstype~="univ"
  ##' 
  ##' @param x table. Expected that x has a column with codes for universities
  ##' @param output_codes_col_name column with codes for universities ("univ"). Default is last column of x
  ##' @param merge_existing_codes same as in [detect_patterns()]
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' 
  ##' @md
  ##' @export
  cockburn_detect_inst_conds_2 <- function(x
                                         , output_codes_col_name = "{col_name_}entity_type"
                                         , merge_existing_codes = "append_to_existing"
                                         , ...) {
      conds <- get_target(x
                        , output_col_name = output_codes_col_name
                        , output_placement = "append_to_x"
                        , rows = NULL
                        , return_null_for_new_col = TRUE) |>
          lapply(`%in%`, "univ") |>
          sapply(any, na.rm = TRUE) |>
          (\(conds) if(length(conds) == 0) NULL else !conds)()
      rows <- get_col_and_rows()$rows
      detect_patterns(x
                    , patterns = c(" FOUND "
                                 , " INST ")
                    , rows = and_rows(conds, rows, x)
                    , output_codes_col_name = output_codes_col_name
                    , patterns_codes = "inst"
                    , merge_existing_codes = merge_existing_codes
                    , return_only_first_detected_code = TRUE)
  }


  ##' Detects Non-profit institutes with special conditions
  ##'
  ##' @param x table. Expected that x has a column with codes for universities
  ##' @param merge_existing_codes same as in [detect_patterns()]
  ##' @param output_codes_col_name column with codes for universities ("univ"). Default is last column of x
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' 
  ##' @md
  ##' @export
  cockburn_detect_inst_conds <- function(x
                                       , merge_existing_codes = "append_to_existing"
                                       , output_codes_col_name = "{col_name_}entity_type"
                                       , ...) {
    x |> 
        cockburn_detect_inst_conds_1(merge_existing_codes = merge_existing_codes
                                   , output_codes_col_name = output_codes_col_name) |>
        cockburn_detect_inst_conds_2(output_codes_col_name = output_codes_col_name
                                   , merge_existing_codes = merge_existing_codes)
  }

#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_detect_inst_conds.r
  expect_equal(data.table(org = c(" EVIL FOUND OF BIG CORP "
                                , " EVIL FOUND OF BIG CORP "
                                , " INT INST OF MAGIC"
                                , " COUNCIL OF PARANORMAL RES & DEV "
                                , " COUNCIL OF GROWN UP KIDS ")
                        , org_entity_type = list(c("univ", "gov"), NA, "univ", NA, "gov")) |>
               cockburn_detect_inst_conds_2()
             , structure(list(org = c(" EVIL FOUND OF BIG CORP ", " EVIL FOUND OF BIG CORP ", 
                                      " INT INST OF MAGIC", " COUNCIL OF PARANORMAL RES & DEV ", " COUNCIL OF GROWN UP KIDS "
                                      ), org_entity_type = list(c("univ", "gov"), "inst", "univ", NA_character_, 
                                                            "gov")), row.names = c(NA, -5L), class = c("data.table", 
                                                                                                       "data.frame")))




  expect_equal(data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                                 , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
                                 , "MSLab Co."
                                 , "MSLaeb Comp."
                                 , " INST OF PARANORMAL RES & DEV "
                                 , "MSLab Comp. Ltd."
                                 , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ")
                        , foo = "I love coffee") |>
               cockburn_detect_inst_conds(merge_existing_codes = "append_to_existing")
             , structure(list(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd", "MSLab CÖ. <a href=lsdldf> <br> <\\a>", 
                                       "MSLab Co.", "MSLaeb Comp.", " INST OF PARANORMAL RES & DEV ", 
                                       "MSLab Comp. Ltd.", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ"
                                       ), foo = c("I love coffee", "I love coffee", "I love coffee", 
                                                  "I love coffee", "I love coffee", "I love coffee", "I love coffee"
                                                  ), name_entity_type = c(NA, NA, NA, NA, "inst", NA, NA)), row.names = c(NA, 
                                                                                                                     -7L), class = c("data.table", "data.frame")))



  expect_equal(data.table(org = c(" DR VLASOV "
                                , " S.VLASOV PHD "
                                , " STANICA LEGALY REPRESENTED BY STAS INST "
                                , " INST DR VLASOV & BROTHER "
                                , "MSlab & C"
                                , "LEGALY REPRESENTED BY STAS"
                                , " REPUBLIC LEGALY REPRESENTED BY STAS"
                                , " TILBURG UNIVERSTIY "
                                , " VU UNIVERSTITAET "
                                , " FUNDATION LEGALY REPRESENTED BY STAS")
                        , org_entity_type = list(c("univ", "gov"), NA, "univ", NA, "gov")) |>
               cockburn_detect_inst_conds()
             , structure(list(org = c(" DR VLASOV ", " S.VLASOV PHD ", " STANICA LEGALY REPRESENTED BY STAS INST ", 
                                      " INST DR VLASOV & BROTHER ", "MSlab & C", "LEGALY REPRESENTED BY STAS", 
                                      " REPUBLIC LEGALY REPRESENTED BY STAS", " TILBURG UNIVERSTIY ", 
                                      " VU UNIVERSTITAET ", " FUNDATION LEGALY REPRESENTED BY STAS"
                                      ), org_entity_type = list(c("univ", "gov"), NA_character_, "univ", 
                                                            "inst", "gov", c("univ", "gov"), NA_character_, "univ", NA_character_, 
                                                            "gov")), row.names = c(NA, -10L), class = c("data.table", 
                                                                                                        "data.frame")))




#+END_SRC

***** German Non-profit institutes
:PROPERTIES:
:ID:       org:vxuk6q51nki0
:END:

#+BEGIN_SRC R :tangle R/cockburn.r
  ##' @eval attr(cockburn_detect_inst_german, "@title")
  ##' @description "EINGETRAGENER VEREIN. NON PROFIT SOCIETY/ASSOCIATION."
  ##' @param x table
  ##' @param output_codes_col_name same as in [detect_patterns()]
  ##' @param merge_existing_codes same as in [detect_patterns()]
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' 
  ##' @md 
  ##' @export 
  cockburn_detect_inst_german <- function(x
                                 , output_codes_col_name = "{col_name_}entity_type"
                                 , merge_existing_codes = "append_to_existing"
                                 , ...) {
      rows <- get_col_and_rows()$rows
      conds <- detect_patterns(x
                             , patterns = c(" UNIV "
                                          , " GMBH "
                                          , " KGAA "
                                          , " KG "
                                          , " AG "
                                          , " EG "
                                          , " OHG ")
                             , patterns_codes = TRUE
                             , no_match_code = FALSE
                             , return_only_first_detected_code = TRUE
                             , return_only_codes = TRUE)
      detect_patterns(x, patterns = c(" STIFTUNG "
                                    , " EINGETRAGENER VEREIN ")
                    , output_codes_col_name = output_codes_col_name
                    , merge_existing_codes = merge_existing_codes
                    , rows = and_rows(rows, conds, x)
                    , patterns_codes = "inst"
                    , return_only_first_detected_code = TRUE)
  }

  attr(cockburn_detect_inst_german, "@title") <- "Detects German Non-profit institutes"
#+END_SRC


#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_detect_inst_german.r
  expect_equal(c(" EINGETRAGENER VEREIN UNIV "
               , " BERLIN EINGETRAGENER VEREIN "
               , " STIFTUNG ") |>
               cockburn_detect_inst_german()
             , structure(list(x = c(" EINGETRAGENER VEREIN UNIV ", " BERLIN EINGETRAGENER VEREIN ", 
                                    " STIFTUNG "), x_entity_type = c("inst", NA, NA)), row.names = c(NA, 
                                                                                                   -3L), class = c("data.table", "data.frame")))


#+END_SRC


**** Hospitals
:PROPERTIES:
:ID:       org:pk0l6q51nki0
:END:

#+BEGIN_SRC R :tangle R/cockburn.r
  ##' @eval attr(cockburn_detect_hosp, "@title")
  ##' @description From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' @inherit detect_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso detect_patterns
  ##'
  ##' @md
  ##' @export
  cockburn_detect_hosp <- make_alias(detect_patterns
                                   , patterns = cockburn_patterns_hosp
                                   , patterns_codes = "hosp"
                                   , return_only_first_detected_code = TRUE
                                   , output_codes_col_name = "{col_name_}entity_type"
                                   , merge_existing_codes = "append_to_existing")

  attr(cockburn_detect_hosp, "@title") <-
      "Detect Hospitals (Non-Corporates group)"

#+END_SRC


#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_detect_hosp.r
  expect_equal(c(" DR VLASOV "
               , " S.VLASOV PHD "
               , " STANICA LEGALY REPRESENTED BY STAS") |>
               cockburn_detect_hosp()
             , structure(list(x = c(" DR VLASOV ", " S.VLASOV PHD ", " STANICA LEGALY REPRESENTED BY STAS"
                                    ), x_entity_type = c(NA, NA, "hosp")), row.names = c(NA, -3L), class = c("data.table", 
                                                                                                           "data.frame")))

#+END_SRC

***** table - cockburn_patterns_hosp
#+call: make-rds-patterns-table(data = cockburn_patterns_hosp, data.name = "cockburn_patterns_hosp")

#+name: cockburn_patterns_hosp
| ' AMTS SYGEHUS '        |
| ' AMTSSYGEHUS '         |
| ' BOLNHITSA '           |
| ' BOLNISN '             |
| ' BOLNITSA '            |
| ' BOLNYITSA '           |
| ' CENTRE '              |
| ' CLINIC '              |
| ' CLINICA '             |
| ' CLINIQUE '            |
| ' HAIGLA '              |
| ' HOPITAL '             |
| ' HOPITAUX '            |
| ' HOPSITAL '            |
| ' HOSITAL '             |
| ' HOSP '                |
| ' HOSPIDAL '            |
| ' HOSPITAL '            |
| ' HOSPITALARIO '        |
| ' HOSPITALET '          |
| ' HOSPITAUX '           |
| ' KESKUSSAIRAALA '      |
| ' KLIINIK '             |
| ' KLINIK '              |
| ' KLINIKA '             |
| ' KLINIKKA '            |
| ' KLINIKUM '            |
| ' KORHAZ '              |
| ' KRANKENHAUS '         |
| ' LHOSPTALET '          |
| ' LIGONINE '            |
| ' MEDICAL CENTER '      |
| ' NEMOCNICA '           |
| ' NEMOCNICE '           |
| ' NOSOCOMIO '           |
| ' NOSOKOMIO '           |
| ' OSPEDALE '            |
| ' OSPETALE '            |
| ' OSPITALIERI '         |
| ' POLICLINICA '         |
| ' POLICLINICO '         |
| ' POLIKLINIK '          |
| ' SAIRAALA '            |
| ' SJUKHUS '             |
| ' SJUKHUSET '           |
| ' SLIMNICA '            |
| ' SPITAL '              |
| ' STACIONARS '          |
| ' STANICA '             |
| ' STREDISKO '           |
| ' SYGEHUS '             |
| ' SYGEHUSET '           |
| ' SYKEHUS '             |
| ' SZPITAL '             |
| ' UNIVERSITAETSKLINIK ' |
| ' ZIEKENHUIS '          |
| ' CITY OF HOPE '        |


*** Punctuation
:PROPERTIES:
:ID:       org:ehachlb1cgi0
:END:
Following funciton removes punctuation and standardise some symbols. Implementation of punctuation2.do from  https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded

#+BEGIN_SRC R :tangle R/cockburn.r
  ##' Removes punctuation and standardise some symbols. 
  ##'
  ##' @param x object
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' 
  ##' @md
  ##' @export 
  cockburn_replace_punctuation <- function(x
                                           , ...) {
    x |>
        replace_patterns(patterns = cockburn_replace_punctuation_and) |>
        replace_patterns(patterns = cockburn_replace_punctuation_the
                       , patterns_type_col = 3) |>
        ## I swapted patstat with amadeus otherwise Ã²Ã¢ÃªÃ®Ã© will not become oaeie
        replace_patterns(patterns = cockburn_replace_punctuation_patstat) |> 
        replace_patterns(patterns = cockburn_replace_punctuation_amadeus) |>
        replace_patterns(patterns = cockburn_replace_punctuation_char)
  }

#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_replace_punctuation.r
  expect_equal(c("WESTINGHOUSE, |.?^&*@ ELEC  "
               , "GRACE (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©"
               , "GRACE (W/R) & CO Ltd.") |> 
               cockburn_replace_punctuation()
             , c("WESTINGHOUSE &  ELEC  ", "GRACE W EN R  &  CO   oaeie", "GRACE W R  &  CO Ltd"))

#+END_SRC




**** table - & (EPO Espace)

#+call: make-rds-patterns-table(data = cockburn_replace_punctuation_and, data.name = "cockburn_replace_punctuation_and")

#+name: cockburn_replace_punctuation_and
| pattern | replacement |
|---------+-------------|
| '&AMP;' | ' & '       |
| '+'     | ' & '       |
| ' AND ' | ' & '       |
| ' ET '  | ' & '       |
| ' UND ' | ' & '       |
| '&'     | ' & '       |

**** table - the (British)

#+call: make-rds-patterns-table(data = cockburn_replace_punctuation_the, data.name = "cockburn_replace_punctuation_the")

#+name: cockburn_replace_punctuation_the
| pattern | replacement | type   |
|---------+-------------+--------|
| '(THE)' | ''          | ends   |
| 'THE '  | ''          | begins |


ISO8859-1 (AMADEUS)

#+BEGIN_SRC emacs-lisp
   ;; (insert-char '#10r192) 
  (char-to-string 192)
#+END_SRC


**** table - Accented characters - AMADEUS

#+call: make-rds-patterns-table(data = cockburn_replace_punctuation_amadeus, data.name = "cockburn_replace_punctuation_amadeus")

#+name: cockburn_replace_punctuation_amadeus
| pattern | replacement | codepoint |
|---------+-------------+-----------|
| À       | A           |       192 |
| Á       | A           |       193 |
| Â       | A           |       194 |
| Ã       | A           |       195 |
| Ä       | AE          |       196 |
| Å       | A           |       197 |
| Æ       | AE          |       198 |
| Ç       | C           |       199 |
| È       | E           |       200 |
| É       | E           |       201 |
| Ê       | E           |       202 |
| Ë       | E           |       203 |
| Ì       | I           |       204 |
| Í       | I           |       205 |
| Î       | I           |       206 |
| Ï       | I           |       207 |
| Ð       | D           |       208 |
| Ñ       | N           |       209 |
| Ò       | O           |       210 |
| Ó       | O           |       211 |
| Ô       | O           |       212 |
| Õ       | O           |       213 |
| Ö       | OE          |       214 |
| Ø       | O           |       216 |
| Ù       | U           |       217 |
| Ú       | U           |       218 |
| Û       | U           |       219 |
| Ü       | UE          |       220 |
| Ý       | Y           |       221 |
| ß       | SS          |       223 |
| à       | a           |       224 |
| á       | a           |       225 |
| â       | a           |       226 |
| ã       | a           |       227 |
| ä       | ae          |       228 |
| å       | a           |       229 |
| æ       | ae          |       230 |
| ç       | c           |       231 |
| è       | e           |       232 |
| é       | e           |       233 |
| ê       | e           |       234 |
| ë       | e           |       235 |
| ì       | i           |       236 |
| í       | i           |       237 |
| î       | i           |       238 |
| ï       | i           |       239 |
| ð       | o           |       240 |
| ñ       | n           |       241 |
| ò       | o           |       242 |
| ó       | o           |       243 |
| ô       | o           |       244 |
| õ       | o           |       245 |
| ö       | oe          |       246 |
| ø       | o           |       248 |
| ù       | u           |       249 |
| ú       | u           |       250 |
| û       | u           |       251 |
| ü       | ue          |       252 |
| ý       | y           |       253 |
| ÿ       | y           |       255 |
#+TBLFM: $1='(char-to-string $>);N


**** table - Accented characters - EPO PATSTAT

#+call: make-rds-patterns-table(data = cockburn_replace_punctuation_patstat, data.name = "cockburn_replace_punctuation_patstat")

#+name: cockburn_replace_punctuation_patstat
| pattern | replacement | code1 | code2 | name                     |
|---------+-------------+-------+-------+--------------------------|
| Ã       | a           |   195 |   160 | a grave                  |
| Ã¡      | a           |   195 |   161 | a acute                  |
| Ã   | A           |   195 |   128 | A acute                  |
| Ã²      | o           |   195 |   178 | Some sort of o (Italian) |
| Ã¢      | a           |   195 |   162 | a circumflex             |
| Ãª      | e           |   195 |   170 | e circumflex             |
| Ã®      | i           |   195 |   174 | i circumflex             |
| Ã©      | e           |   195 |   169 | e acute                  |
| Ã   | E           |   195 |   137 | E acute                  |
| Ã¨      | e           |   195 |   168 | e grave                  |
| Ã§      | c           |   195 |   167 | c cedilla                |
| Ã   | E           |   195 |   139 | E umlaut                 |
| Ã¤      | ae          |   195 |   164 | a umlaut                 |
| Ã¶      | oe          |   195 |   182 | o umlaut                 |
| Ã¼      | ue          |   195 |   188 | u umlaut                 |
| Ã   | AE          |   195 |   132 | A umlaut                 |
| Ã   | OE          |   195 |   150 | O umlaut                 |
| Ã   | UE          |   195 |   156 | U umlaut                 |
| Ã   | N           |   195 |   145 | N tilde                  |
| Ã±      | n           |   195 |   177 | n tilde                  |
#+TBLFM: $1='(concat (char-to-string $3) (char-to-string $4));N

**** table - strips out all punctuation characters

#+call: make-rds-patterns-table(data = cockburn_replace_punctuation_char, data.name = "cockburn_replace_punctuation_char")

#+name: cockburn_replace_punctuation_char
| pattern  | replacement |
|----------+-------------|
| '''      | ''          |
| ';'      | ''          |
| '^'      | ''          |
| '<'      | ''          |
| '.'      | ''          |
| '`'      | ''          |
| '_'      | ''          |
| '>'      | ''          |
| ''''     | ''          |
| '!'      | ''          |
| '+'      | ''          |
| '?'      | ''          |
| '('      | ''          |
| '£'      | ''          |
| '{'      | ''          |
| '\'      | ''          |
| ')'      | ''          |
| '$'      | ''          |
| '}'      | ''          |
| ' \vert' | ''          |
| ','      | ''          |
| '%'      | ''          |
| '['      | ''          |
| '¦'      | ''          |
| '*'      | ''          |
| ']'      | ''          |
| '/'      | ' '         |
| '@'      | ''          |
| ':'      | ''          |
| '~'      | ''          |
| '#'      | ''          |
| '-'      | ' '         |

*** Standard Name
:PROPERTIES:
:ID:       org:tnnchlb1cgi0
:END:

#+BEGIN_SRC R :tangle R/cockburn.r
  ##' Create standard name
  ##'
  ##' @param x object
  ##' @inheritDotParams replace_patterns
  ##' @return standardized names table
  ##' 
  ##' @md
  ##' @export 
  cockburn_replace_standard_names <- function(x
                                              , ...) {
    x |>
      cockburn_replace_derwent() |> 
      replace_patterns(patterns = cockburn_patterns_standard_names_additional) |> 
      replace_patterns(patterns = cockburn_patterns_standard_names_country_specific)
  }
#+END_SRC


#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_replace_standard_names.r
  expect_equal(c("WESTINGHOUSE, |.?^&*@ ELEC  "
               , "GRACE (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©  PUBLIC LIMITED "
               , "GRACE (W/R) & CO LTD ") |>
               cockburn_replace_standard_names(output_placement = "append_to_x")
             , structure(list(x = c("WESTINGHOUSE, |.?^&*@ ELEC  ", "GRACE (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©  PUBLIC LIMITED ", 
                                    "GRACE (W/R) & CO LTD "), std_x = c("WESTINGHOUSE, |.?^&*@ ELEC  ", 
                                                                        "GRACE (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©  PUBLIC LTD ", "GRACE (W/R) & CO LTD "
                                                                        )), row.names = c(NA, -3L), class = c("data.table", "data.frame")))


#+END_SRC


**** table - additional changes

#+call: make-rds-patterns-table(data = cockburn_patterns_standard_names_additional, data.name = "cockburn_patterns_standard_names_additional")

#+name: cockburn_patterns_standard_names_additional
| pattern        | replacement |
|----------------+-------------|
| ' RES & DEV '  | ' R&D '     |
| ' RECH & DEV ' | ' R&D '     |

**** table - country specific work

#+call: make-rds-patterns-table(data = cockburn_patterns_standard_names_country_specific, data.name = "cockburn_patterns_standard_names_country_specific")

#+name: cockburn_patterns_standard_names_country_specific
| pattern                                                | replacement       | country            |
|--------------------------------------------------------+-------------------+--------------------|
| ' PUBLIC LIMITED '                                     | ' PLC '           | UNITED KINGDOM     |
| ' PUBLIC LIABILITY COMPANY '                           | ' PLC '           | UNITED KINGDOM     |
| ' HOLDINGS '                                           | ' HLDGS '         | UNITED KINGDOM     |
| ' HOLDING '                                            | ' HLDGS '         | UNITED KINGDOM     |
| ' GREAT BRITAIN '                                      | ' GB '            | UNITED KINGDOM     |
| ' LTD CO '                                             | ' CO LTD '        | UNITED KINGDOM     |
| ' SOC LIMITADA '                                       | ' SL '            | SPANISH            |
| ' SOC EN COMMANDITA '                                  | ' SC '            | SPANISH            |
| ' & CIA '                                              | ' CO '            | SPANISH            |
| ' SOC IN ACCOMANDITA PER AZIONI '                      | ' SA '            | ITALIAN            |
| ' SAPA '                                               | ' SA '            | ITALIAN            |
| ' SOC A RESPONSABILITÀ LIMITATA '                      | ' SRL '           | ITALIAN            |
| ' HANDELSBOLAG '                                       | ' HB  '           | SWEDISH            |
| ' KOMANDIT GESELLSCHAFT '                              | ' KG '            | GERMAN             |
| ' KOMANDITGESELLSCHAFT '                               | ' KG '            | GERMAN             |
| ' EINGETRAGENE GENOSSENSCHAFT '                        | ' EG '            | GERMAN             |
| ' GENOSSENSCHAFT '                                     | ' EG '            | GERMAN             |
| ' GESELLSCHAFT M B H '                                 | ' GMBH '          | GERMAN             |
| ' OFFENE HANDELS GESELLSCHAFT '                        | ' OHG '           | GERMAN             |
| ' GESMBH '                                             | ' GMBH '          | GERMAN             |
| ' GESELLSCHAFT BURGERLICHEN RECHTS '                   | ' GBR '           | GERMAN             |
| ' GESELLSCHAFT '                                       | ' GMBH '          | GERMAN             |
| ' GMBH CO KG '                                         | ' GMBH & CO KG '  | GERMAN             |
| ' GMBH COKG '                                          | ' GMBH & CO KG '  | GERMAN             |
| ' GMBH U CO KG '                                       | ' GMBH & CO KG '  | GERMAN             |
| ' GMBH U COKG '                                        | ' GMBH & CO KG '  | GERMAN             |
| ' GMBH U CO '                                          | ' GMBH & CO KG '  | GERMAN             |
| ' GMBH CO '                                            | ' GMBH & CO KG '  | GERMAN             |
| ' AG CO KG '                                           | ' AG & CO KG '    | GERMAN             |
| ' AG COKG '                                            | ' AG & CO KG '    | GERMAN             |
| ' AG U CO KG '                                         | ' AG & CO KG '    | GERMAN             |
| ' AG U COKG '                                          | ' AG & CO KG '    | GERMAN             |
| ' AG U CO '                                            | ' AG & CO KG '    | GERMAN             |
| ' AG CO '                                              | ' AG & CO KG '    | GERMAN             |
| ' GMBH CO OHG '                                        | ' GMBH &CO OHG '  | GERMAN             |
| ' GMBH COOHG '                                         | ' GMBH & CO OHG ' | GERMAN             |
| ' GMBH U CO OHG '                                      | ' GMBH & CO OHG ' | GERMAN             |
| ' GMBH U COOHG '                                       | ' GMBH & CO OHG ' | GERMAN             |
| ' AG CO OHG '                                          | ' AG & CO OHG '   | GERMAN             |
| ' AG COOHG '                                           | ' AG & CO OHG '   | GERMAN             |
| ' AG U CO OHG '                                        | ' AG & CO OHG '   | GERMAN             |
| ' AG U COOHG '                                         | ' AG & CO OHG '   | GERMAN             |
| ' SOCIETE ANONYME SIMPLIFIEE '                         | ' SAS '           | FRENCH and BELGIAN |
| ' SOC ANONYME '                                        | ' SA '            | FRENCH and BELGIAN |
| ' STE ANONYME '                                        | ' SA '            | FRENCH and BELGIAN |
| ' SARL UNIPERSONNELLE '                                | ' SARLU '         | FRENCH and BELGIAN |
| ' SOC PAR ACTIONS SIMPLIFIEES '                        | ' SAS '           | FRENCH and BELGIAN |
| ' SAS UNIPERSONNELLE '                                 | ' SASU '          | FRENCH and BELGIAN |
| ' ENTREPRISE UNIPERSONNELLE A RESPONSABILITE LIMITEE ' | ' EURL '          | FRENCH and BELGIAN |
| ' SOCIETE CIVILE IMMOBILIERE '                         | ' SCI '           | FRENCH and BELGIAN |
| ' GROUPEMENT D INTERET ECONOMIQUE '                    | ' GIE '           | FRENCH and BELGIAN |
| ' SOCIETE EN PARTICIPATION '                           | ' SP '            | FRENCH and BELGIAN |
| ' SOCIETE EN COMMANDITE SIMPLE '                       | ' SCS '           | FRENCH and BELGIAN |
| ' ANONYME DITE '                                       | ' SA '            | FRENCH and BELGIAN |
| ' SOC DITE '                                           | ' SA '            | FRENCH and BELGIAN |
| ' & CIE '                                              | ' CO '            | FRENCH and BELGIAN |
| ' BV BEPERKTE AANSPRAKELIJKHEID '                      | ' BVBA '          | BELGIAN            |
| ' COMMANDITAIRE VENNOOTSCHAP OP AANDELEN '             | ' CVA '           | BELGIAN            |
| ' GEWONE COMMANDITAIRE VENNOOTSCHAP '                  | ' GCV '           | BELGIAN            |
| ' SOCIETE EN COMMANDITE PAR ACTIONS '                  | ' SCA '           | BELGIAN            |
| ' ANDELSSELSKABET '                                    | ' AMBA '          | DENMARK            |
| ' ANDELSSELSKAB '                                      | ' AMBA '          | DENMARK            |
| ' INTERESSENTSKABET '                                  | ' IS '            | DENMARK            |
| ' INTERESSENTSKAB '                                    | ' IS '            | DENMARK            |
| ' KOMMANDITAKTIESELSKABET '                            | ' KAS '           | DENMARK            |
| ' KOMMANDITAKTIESELSKAB '                              | ' KAS '           | DENMARK            |
| ' KOMMANDITSELSKABET '                                 | ' KS '            | DENMARK            |
| ' KOMMANDITSELSKAB '                                   | ' KS '            | DENMARK            |
| ' ANDELSLAGET '                                        | ' AL '            | NORWAY             |
| ' ANDELSLAG '                                          | ' AL '            | NORWAY             |
| ' ANSVARLIG SELSKAPET '                                | ' ANS '           | NORWAY             |
| ' ANSVARLIG SELSKAP '                                  | ' ANS '           | NORWAY             |
| ' AKSJESELSKAPET '                                     | ' AS '            | NORWAY             |
| ' AKSJESELSKAP '                                       | ' AS '            | NORWAY             |
| ' ALLMENNAKSJESELSKAPET '                              | ' ASA '           | NORWAY             |
| ' ALLMENNAKSJESELSKAP '                                | ' ASA '           | NORWAY             |
| ' SELSKAP MED DELT ANSAR '                             | ' DA '            | NORWAY             |
| ' KOMMANDITTSELSKAPET '                                | ' KS '            | NORWAY             |
| ' KOMMANDITTSELSKAP '                                  | ' KS '            | NORWAY             |
| ' COMMANDITAIRE VENNOOTSCHAP '                         | ' CV '            | NETHERLANDS        |
| ' COMMANDITAIRE VENNOOTSCHAP OP ANDELEN '              | ' CVOA '          | NETHERLANDS        |
| ' VENNOOTSCHAP ONDER FIRMA '                           | ' VOF '           | NETHERLANDS        |
| ' PUBLIKT AKTIEBOLAG '                                 | ' APB '           | FINLAND            |
| ' KOMMANDIITTIYHTIO '                                  | ' KY '            | FINLAND            |
| ' JULKINEN OSAKEYHTIO '                                | ' OYJ '           | FINLAND            |
| ' SPOLKA AKCYJNA '                                     | ' SA '            | POLAND             |
| ' SPOLKA PRAWA CYWILNEGO '                             | ' SC '            | POLAND             |
| ' SPOLKA KOMANDYTOWA '                                 | ' SK '            | POLAND             |
| ' SPOLKA Z OGRANICZONA ODPOWIEDZIALNOSCIA '            | ' SPZOO '         | POLAND             |
| ' SP Z OO '                                            | ' SPZOO '         | POLAND             |
| ' SPZ OO '                                             | ' SPZOO '         | POLAND             |
| ' SP ZOO '                                             | ' SPZOO '         | POLAND             |
| ' ANONYMOS ETAIRIA '                                   | ' AE '            | GREECE             |
| ' ETERRORRYTHMOS '                                     | ' EE '            | GREECE             |
| ' ETAIRIA PERIORISMENIS EVTHINIS '                     | ' EPE '           | GREECE             |
| ' OMORRYTHMOS '                                        | ' OE '            | GREECE             |
| ' AKCIOVA SPOLECNOST '                                 | ' AS '            | CZECH REPUBLIC     |
| ' KOMANDITNI SPOLECNOST '                              | ' KS '            | CZECH REPUBLIC     |
| ' SPOLECNOST S RUCENIM OMEZENYM '                      | ' SRO '           | CZECH REPUBLIC     |
| ' VEREJNA OBCHODNI SPOLECNOST '                        | ' VOS '           | CZECH REPUBLIC     |
| ' AKTIONIERNO DRUSHESTWO '                             | ' AD '            | BULGARIA           |
| ' KOMANDITNO DRUSHESTWO '                              | ' KD '            | BULGARIA           |
| ' KOMANDITNO DRUSHESTWO S AKZII '                      | ' KDA '           | BULGARIA           |
| ' DRUSHESTWO S ORGRANITSCHENA OTGOWORNOST '            | ' OCD '           | BULGARIA           |


*** Stem Name
:PROPERTIES:
:ID:       org:k5q64a51nki0
:END:

#+BEGIN_SRC R :tangle R/cockburn.r
  ##' @eval attr(cockburn_remove_standard_names, "@title")
  ##' @inherit replace_patterns params return
  ##' @inheritDotParams standardize_options
  ##' @return standardized names table
  ##' @family magerman
  ##' @seealso replace_patterns
  ##'
  ##' @md
  ##' @export
  cockburn_remove_standard_names <- make_alias(replace_patterns
                                             , patterns = cockburn_patterns_stem_name
                                             , replacements = " ")

  attr(cockburn_remove_standard_names, "@title") <-
      "Creates so called stem name (a name with all legal entity identifiers removed)"


#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_remove_standard_names.r
  expect_equal(c("WESTINGHOUSE, |.?^&*@ ELEC  "
               , "GRACE (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©  PUBLIC LIMITED "
               , "GRACE (W/R) & CO LTD ") |>
               cockburn_remove_standard_names()
             , c("WESTINGHOUSE, |.?^&*@ ELEC  ", "GRACE (W EN R) - Ã²Ã¢ÃªÃ®Ã©  PUBLIC LIMITED ", "GRACE (W/R) "))


#+END_SRC


creates a name with all legal entity identifiers removed

#+call: make-rds-patterns-table(data = cockburn_patterns_stem_name, data.name = "cockburn_patterns_stem_name")

#+name: cockburn_patterns_stem_name
| pattern             | replacement | country                      |
|---------------------+-------------+------------------------------|
| ' LTD '             | ' '         | UNITED KINGDOM               |
| ' CO LTD '          | ' '         | UNITED KINGDOM               |
| ' TRADING LTD '     | ' '         | UNITED KINGDOM               |
| ' CORP '            | ' '         | UNITED KINGDOM               |
| ' INTL '            | ' '         | UNITED KINGDOM               |
| ' INC '             | ' '         | UNITED KINGDOM               |
| ' PLC '             | ' '         | UNITED KINGDOM               |
| ' SPA '             | ' '         | UNITED KINGDOM               |
| ' CLA '             | ' '         | UNITED KINGDOM               |
| ' LLP '             | ' '         | UNITED KINGDOM               |
| ' LLC '             | ' '         | UNITED KINGDOM               |
| ' AIS '             | ' '         | UNITED KINGDOM               |
| ' INVESTMENTS '     | ' '         | UNITED KINGDOM               |
| ' PARTNERSHIP '     | ' '         | UNITED KINGDOM               |
| ' & CO '            | ' '         | UNITED KINGDOM               |
| ' CO '              | ' '         | UNITED KINGDOM               |
| ' COS '             | ' '         | UNITED KINGDOM               |
| ' CP '              | ' '         | UNITED KINGDOM               |
| ' LP '              | ' '         | UNITED KINGDOM               |
| ' BLSA '            | ' '         | UNITED KINGDOM               |
| ' GROUP '           | ' '         | UNITED KINGDOM               |
| ' SA '              | ' '         | FRANCE                       |
| ' SARL '            | ' '         | FRANCE                       |
| ' SAS '             | ' '         | FRANCE                       |
| ' EURL '            | ' '         | FRANCE                       |
| ' ETCIE '           | ' '         | FRANCE                       |
| ' ET CIE '          | ' '         | FRANCE                       |
| ' CIE '             | ' '         | FRANCE                       |
| ' GIE '             | ' '         | FRANCE                       |
| ' SC '              | ' '         | FRANCE                       |
| ' SNC '             | ' '         | FRANCE                       |
| ' SP '              | ' '         | FRANCE                       |
| ' SCS '             | ' '         | FRANCE                       |
| ' GMBHCOKG '        | ' '         | GERMANY                      |
| ' EGENOSSENSCHAFT ' | ' '         | GERMANY                      |
| ' GMBHCO '          | ' '         | GERMANY                      |
| ' COGMBH '          | ' '         | GERMANY                      |
| ' GESMBH '          | ' '         | GERMANY                      |
| ' GMBH '            | ' '         | GERMANY                      |
| ' KGAA '            | ' '         | GERMANY                      |
| ' KG '              | ' '         | GERMANY                      |
| ' AG '              | ' '         | GERMANY                      |
| ' EG '              | ' '         | GERMANY                      |
| ' GMBHCOKGAA '      | ' '         | GERMANY                      |
| ' MIT '             | ' '         | GERMANY                      |
| ' OHG '             | ' '         | GERMANY                      |
| ' GRUPPE '          | ' '         | GERMANY                      |
| ' GBR '             | ' '         | GERMANY                      |
| ' SL '              | ' '         | Spain                        |
| ' SA '              | ' '         | Spain                        |
| ' SC '              | ' '         | Spain                        |
| ' SRL '             | ' '         | Spain                        |
| ' ESPANA '          | ' '         | Spain                        |
| ' SA '              | ' '         | Italy                        |
| ' SAS '             | ' '         | Italy                        |
| ' SNC '             | ' '         | Italy                        |
| ' SPA '             | ' '         | Italy                        |
| ' SRL '             | ' '         | Italy                        |
| ' AB '              | ' '         | SWEDEN - front and back      |
| ' HB '              | ' '         | SWEDEN - front and back      |
| ' KB '              | ' '         | SWEDEN - front and back      |
| ' SAS '             | ' '         | Belgium and French           |
| ' SA '              | ' '         | Belgium and French           |
| ' SARL '            | ' '         | Belgium and French           |
| ' SARLU '           | ' '         | Belgium and French           |
| ' SAS '             | ' '         | Belgium and French           |
| ' SASU '            | ' '         | Belgium and French           |
| ' EURL '            | ' '         | Belgium and French           |
| ' ETCIE '           | ' '         | Belgium and French           |
| ' CIE '             | ' '         | Belgium and French           |
| ' GIE '             | ' '         | Belgium and French           |
| ' SC '              | ' '         | Belgium and French           |
| ' SNC '             | ' '         | Belgium and French           |
| ' SP '              | ' '         | Belgium and French           |
| ' SCS '             | ' '         | Belgium and French           |
| ' BV '              | ' '         | Specifically Belgian ones    |
| ' CVA '             | ' '         | Specifically Belgian ones    |
| ' SCA '             | ' '         | Specifically Belgian ones    |
| ' SPRL '            | ' '         | Specifically Belgian ones    |
| ' SCS '             | ' '         | French language equivalents  |
| ' SA '              | ' '         | French language equivalents  |
| ' SPRL '            | ' '         | French language equivalents  |
| ' AMBA '            | ' '         | Denmark - front and back     |
| ' APS '             | ' '         | Denmark - front and back     |
| ' AS '              | ' '         | Denmark - front and back     |
| ' IS '              | ' '         | Denmark - front and back     |
| ' KAS '             | ' '         | Denmark - front and back     |
| ' KS '              | ' '         | Denmark - front and back     |
| ' PF '              | ' '         | Denmark - front and back     |
| ' AL '              | ' '         | Norway - front and back      |
| ' ANS '             | ' '         | Norway - front and back      |
| ' AS '              | ' '         | Norway - front and back      |
| ' ASA '             | ' '         | Norway - front and back      |
| ' DA '              | ' '         | Norway - front and back      |
| ' KS '              | ' '         | Norway - front and back      |
| ' BV '              | ' '         | Netherlands - front and back |
| ' CV '              | ' '         | Netherlands - front and back |
| ' CVOA '            | ' '         | Netherlands - front and back |
| ' NV '              | ' '         | Netherlands - front and back |
| ' VOF '             | ' '         | Netherlands - front and back |
| ' AB '              | ' '         | Finland                      |
| ' APB '             | ' '         | Finland                      |
| ' KB '              | ' '         | Finland                      |
| ' KY '              | ' '         | Finland                      |
| ' OY '              | ' '         | Finland                      |
| ' OYJ '             | ' '         | Finland                      |
| ' OYJ AB '          | ' '         | Finland                      |
| ' OY AB '           | ' '         | Finland                      |
| ' LTD '             | ' '         | Finland                      |
| ' PLC '             | ' '         | Finland                      |
| ' INC '             | ' '         | Finland                      |
| ' SA '              | ' '         | Poland                       |
| ' SC '              | ' '         | Poland                       |
| ' SK '              | ' '         | Poland                       |
| ' SPZOO '           | ' '         | Poland                       |
| ' AE '              | ' '         | Greece                       |
| ' EE '              | ' '         | Greece                       |
| ' EPE '             | ' '         | Greece                       |
| ' OE '              | ' '         | Greece                       |
| ' SA '              | ' '         | Greece                       |
| ' LTD '             | ' '         | Greece                       |
| ' PLC '             | ' '         | Greece                       |
| ' INC '             | ' '         | Greece                       |
| ' AS '              | ' '         | Czech Republic               |
| ' KS '              | ' '         | Czech Republic               |
| ' SRO '             | ' '         | Czech Republic               |
| ' VOS '             | ' '         | Czech Republic               |
| ' AD '              | ' '         | Bulgaria                     |
| ' KD '              | ' '         | Bulgaria                     |
| ' KDA '             | ' '         | Bulgaria                     |
| ' OCD '             | ' '         | Bulgaria                     |
| ' KOOP '            | ' '         | Bulgaria                     |
| ' DF '              | ' '         | Bulgaria                     |
| ' EOOD '            | ' '         | Bulgaria                     |
| ' EAD '             | ' '         | Bulgaria                     |
| ' OOD '             | ' '         | Bulgaria                     |
| ' KOOD '            | ' '         | Bulgaria                     |
| ' ET '              | ' '         | Bulgaria                     |
| ' KOGYO KK '        | ' '         | Japan                        |
| ' KK '              | ' '         | Japan                        |

*** USPTO special
:PROPERTIES:
:ID:       org:mex64a51nki0
:END:

#+BEGIN_SRC R :tangle R/cockburn.r
    ##' @eval attr(cockburn_remove_uspto, "@title")
    ##' @inherit replace_patterns params return
    ##' @inheritDotParams standardize_options
    ##' @return standardized names table
    ##' @family magerman
    ##' @seealso replace_patterns
    ##'
    ##' @md
    ##' @export
    cockburn_remove_uspto <- make_alias(replace_patterns
                                      , patterns = cockburn_patterns_uspto)

    attr(cockburn_remove_uspto, "@title") <-
        "Removes special USPTO codes."




    ##' @eval attr(cockburn_detect_uspto, "@title")
    ##' @inherit detect_patterns params return
    ##' @inheritDotParams standardize_options
    ##' @return standardized names table
    ##' @family magerman
    ##' @seealso detect_patterns
    ##'
    ##' @md
    ##' @export
    cockburn_detect_uspto <- make_alias(detect_patterns
                                      , patterns = ";"
                                      , patterns_codes = "indiv"
                                      , output_codes_col_name = "{col_name_}entity_type"
                                      , return_only_first_detected_code = TRUE)

    attr(cockburn_detect_uspto, "@title") <-
        "Special USPTO codes. Codes as 'indiv'"


#+END_SRC


#+BEGIN_SRC R :tangle inst/tinytest/test_cockburn_detect_uspto.r
  expect_equal(c("WESTINGHOUSE, |.?^&*@ ELEC-CONN.  "
               , "GRACE-CONN. (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©  PUBLIC LIMITED "
               , "Bechara;John") |> 
               cockburn_remove_uspto()
             , c("WESTINGHOUSE, |.?^&*@ ELEC  ", "GRACE (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©  PUBLIC LIMITED ", 
                 "Bechara ; John"))



  expect_equal(c("WESTINGHOUSE, |.?^&*@ ELEC-CONN.  "
               , "GRACE-CONN. (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©  PUBLIC LIMITED "
               , "Bechara;John") |> 
               cockburn_detect_uspto()
             , structure(list(x = c("WESTINGHOUSE, |.?^&*@ ELEC-CONN.  ", "GRACE-CONN. (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©  PUBLIC LIMITED ", 
                                    "Bechara;John"), x_entity_type = c(NA, NA, "indiv")), row.names = c(NA, 
                                                                                                      -3L), class = c("data.table", "data.frame")))



#+END_SRC


#+call: make-rds-patterns-table(data = cockburn_patterns_uspto, data.name = "cockburn_patterns_uspto")

#+name: cockburn_patterns_uspto
| pattern  | replacement |
|----------+-------------|
| '-CONN.' | ''          |
| ';'      | ' ; '       |

** Combined Cockburn Procedures

basically reproduces the 'main_coname2.do' stata file

#+NAME: cockburn_procedures_table
| no | message                                                     | function.call                                    |
|----+-------------------------------------------------------------+--------------------------------------------------|
|    | *Prepossessing*                                             |                                                  |
|  1 | Cleaning spaces                                             | 'standardize_squish_spaces', wrap_in_spaces = TRUE |
|  2 | Upper casing                                                | 'standardize_toupper'                            |
|    |                                                             |                                                  |
|    | *Standartization*                                           |                                                  |
|  3 | Special removals and recoding for USPTO names               | 'cockburn_detect_uspto'                          |
|  4 | Standardization of symbols and removals of some punctuation | 'cockburn_replace_punctuation'                   |
|  5 | Standardization of names (Derwent, etc.)                    | 'cockburn_replace_standard_names'                |
|  6 | Identification of organization type                         | 'cockburn_detect_type'                           |
|  7 | Cleaning organization type                                  | 'cockburn_replace_type'                          |
|  8 | Combining single char sequences                             | 'cockburn_combabbrev'                            |
|  9 | Removal of legal entity identifiers                         | 'cockburn_remove_standard_names'                 |
| 10 | Cleaning spaces                                             | 'standardize_squish_spaces'                      |

#+call: make-rds-patterns-table(data = cockburn_procedures_table, data.name = "cockburn_procedures_table", remove.single.quotes = "FALSE")

#+call: make-rds-procedures-list(data = cockburn_procedures_table, data.name = "cockburn_procedures_list", remove.single.quotes = "FALSE")

#+BEGIN_SRC R :tangle R/cockburn.r
  ##' Standardizes strings using exact procedures described in Cockburn, et al. (2009)
  ##' @param x table or vector
  ##' @param cockburn_procedures list of procedures to pass to `standardize` function. Default is `cockburn_procedures.list`
  ##' @param detect_legal_form Whether to detect legal forms. Default is FALSE
  ##' @param return_x_before_common_words_removal Whether to save standardized column before `common.words.removal` procedure. Default is FALSE
  ##' @inheritDotParams standardize
  ##' @return standardized names table
  ##'
  ##' @references Cockburn, et al. (2009)
  ##' 
  ##' @md 
  ##' @export 
  standardize_cockburn <- function(x
                               , cockburn_procedures = cockburn_procedures_table
                               , detect_legal_form = FALSE
                               , return_x_before_common_words_removal = FALSE
                               , ... ) {
      if(is.data.frame(cockburn_procedures)) {
          cockburn_procedures <- standardize_make_procedures_list(cockburn_procedures)
      }
    ## do some tweaks on cockburn_procedures
    if(!detect_legal_form) {
        cockburn_procedures <-
            cockburn_procedures[
                !(sapply(cockburn_procedures, `[[`, 1) %in% 
                  c("cockburn_detect_type", "cockburn_detect_uspto"))
            ]

    }
      if(return_x_before_common_words_removal) {
        cockburn_procedures[[
            which(sapply(cockburn_procedures, `[[` , 1) %in% "cockburn_combabbrev")
        ]] <- list("cockburn_combabbrev", append_output_copy = TRUE)
    }
    standardize(x, cockburn_procedures, ...)
  }
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_standardize_cockburn.r

  expect_equal(data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                                 , "M S Lab CÖ. <a href=lsdldf> <br> <\\a>"
                                 , "MSLab Co."
                                 , "MSLaeb Comp."
                                 , "MSLab Comp. Ltd."
                                 , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |> rep(20)
                        , foo = "Coffee" ) |>
               standardize_cockburn(quite = TRUE)
             , structure(list(name = c("MAEKAROENI ETOE FKUESNOE", "MS LAB COE A HREF=LSDLDF BR A", 
                                       "MSLAB", "MSLAEB COMP", "MSLAB COMP", "AAAAAEAAECEEEEIIIIDNOOOOOEOUUUUEYŸ") |> rep(20)
                            , foo = "Coffee" |> rep(120)), row.names = c(NA, -120L), class = c("data.table", 
                                                                                               "data.frame")))






  expect_equal(data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                                 , "M S Lab CÖ. <a href=lsdldf> <br> <\\a>"
                                 , "MSLab Co."
                                 , "MSLaeb Comp."
                                 , "MSLab Comp. Ltd."
                                 , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |> rep(20)
                        , foo = "Coffee" ) |>
               standardize_cockburn(detect_legal_form = TRUE, quite = TRUE)
             , structure(list(name = c("MAEKAROENI ETOE FKUESNOE", "MS LAB COE A HREF=LSDLDF BR A", 
                                       "MSLAB", "MSLAEB COMP", "MSLAB COMP", "AAAAAEAAECEEEEIIIIDNOOOOOEOUUUUEYŸ") |> rep(20)
                            , foo = "Coffee" |> rep(120)
                            , name_entity_type = c(rep("firm", 5), NA) |>
                                  rep(20)
                              ), row.names = c(NA, -120L), class = c("data.table", 
                                                                     "data.frame")))




  expect_equal(data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                                 , "M S Lab CÖ. <a href=lsdldf> <br> <\\a>"
                                 , "MSLab Co."
                                 , "MSLaeb Comp."
                                 , "MSLab Comp. Ltd."
                                 , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |> rep(20)
                        , foo = "Coffee" ) |>
               standardize_cockburn(return_x_before_common_words_removal = TRUE
                                , quite = TRUE)
             , structure(list(name = c("MAEKAROENI ETOE FKUESNOE", "MS LAB COE A HREF=LSDLDF BR A", 
                                       "MSLAB", "MSLAEB COMP", "MSLAB COMP", "AAAAAEAAECEEEEIIIIDNOOOOOEOUUUUEYŸ") |> rep(20)
                            , foo = "Coffee" |> rep(120)
                       , std_name_copy = c("  MAEKAROENI ETOE FKUESNOE LTD  ", "  MS LAB COE A HREF=LSDLDF BR A  ", 
                                           "  MSLAB CO  ", "  MSLAEB COMP  ", "  MSLAB COMP LTD  ", "  AAAAAEAAECEEEEIIIIDNOOOOOEOUUUUEYŸ  ") |>
                             rep(20))
                       , row.names = c(NA, -120L), class = c("data.table", 
                                                             "data.frame")))







  ## test progress (but it is so sloww...)
  expect_equal(data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                                 , "M S Lab CÖ. <a href=lsdldf> <br> <\\a>"
                                 , "MSLab Co."
                                 , "MSLaeb Comp."
                                 , "MSLab Comp. Ltd."
                                 , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") |> rep(20)
                        , foo = "Coffee" ) |>
               standardize_cockburn(nrows_min_to_show_progress = 100
                                , detect_legal_form = TRUE
                                , quite = TRUE)
             , structure(list(name = c("MAEKAROENI ETOE FKUESNOE", "MS LAB COE A HREF=LSDLDF BR A", 
                                       "MSLAB", "MSLAEB COMP", "MSLAB COMP", "AAAAAEAAECEEEEIIIIDNOOOOOEOUUUUEYŸ") |> rep(20)
                            , foo = "Coffee" |> rep(120)
                            , name_entity_type = c(rep("firm", 5), NA) |>
                                  rep(20)
                              ), row.names = c(NA, -120L), class = c("data.table", 
                                                                     "data.frame")))

#+END_SRC

* Wasi & Flaaen (2015) - Standardization Procedure

Wasi, N., & Flaaen, A. (2015). Record linkage using Stata: Preprocessing, linking, and reviewing utilities. The Stata Journal, 15(3), 672-697.

https://ebp-projects.isr.umich.edu/NCRN/papers/wasi_flaaen_statarecordlinkageutilities.pdf


** p10_namecomp_patterns.csv

#+call: make-rds-patterns-table(data = wasi_flaaen_patterns_namecomp, data.name = "wasi_flaaen_patterns_namecomp")
#+NAME: wasi_flaaen_patterns_namecomp
| "pattern"         | "replacement" |
|-------------------+---------------|
| DBA               | DBA           |
| D/B/A             | DBA           |
| D.B.A.            | DBA           |
| D B A             | DBA           |
| T/A               | DBA           |
| FKA               | FKA           |
| F/K/A             | FKA           |
| F.K.A.            | FKA           |
| F K A             | FKA           |
| FNA               | FKA           |
| F/N/A             | FKA           |
| F.N.A.            | FKA           |
| F N A             | FKA           |
| FORMERLY KNOWN AS | FKA           |
| FORMERLY          | FKA           |
| AS SUCCESSOR TO   | FKA           |
| SUCCESSOR TO      | FKA           |
| ATTN              | ATTN          |
| C/O               | ATTN          |


** p21_spchar_namespecialcases.csv

.COM,DOTCOM
A+,APLUS
+,&
@WORK,ATWORK


** p22_spchar_remove.csv

!
#
$
%
'
*
=
?
@
^
_
`
~

** p23_spchar_rplcwithspace.csv

(
)
.
,
-
/
:
;
<
>
[
\
]
{
|
}

** p30_std_entity.csv
ASSC,ASSC
ASSO,ASSC
ASSN,ASSC
ASSOC,ASSC
ASSOCATES,ASSC
ASSICATES,ASSC
ASSOCIA,ASSC
ASSOCIATES,ASSC
ASSOCIATION,ASSC
A SOLE PROPRIETOR,ASP
A SOLE PROPRIETORSHIP ,ASP
SOLE PROPRIETORSHIP,ASP
SOLE PROPRIETOR,ASP
SOLE PROP,ASP
CO OPERATIVE,COOP
CO OPERATIVES,COOP
COOPERATIVE,COOP
COOPERATIVES,COOP
CO OP,COOP
COMPANY,CO
COMPNAY,CO
COMPANIES,CO
COMPAN,CO
CORPORATION,CORP
COPORATION,CORP
CORPORTATION,CORP
CORPORATE,CORP
CORPORATTION,CORP
ET AL PA,ET AL PTR
ET AL P A,ET AL PTR
ET AL GEN PTR,ET AL PTR
ET AL PTR,ET AL PTR
ET AL PTRS,ET AL PTR
ET AL PTNR,ET AL PTR
INCORP,INC
INCORPORATION,INC
INCORPORATED,INC
INCORPORAT,INC
LIMITED,LTD
LTD PARTNERSHIP,LTD PTR
PROFESSIONAL CORPORATION,PC
PROF CORPORATION ,PC
A PROF CORP,PC
PROF CORP,PC
PRT,PTR
PRTSHIP,PTR
PRTSP,PTR
PTN,PTR
PTNR,PTR
PTNRS,PTR
PTNRSHIP,PTR
PTNSHP,PTR
PTRS,PTR
PTRSHP,PTR
PTS,PTR
PTSHIP,PTR
PTSHP,PTR
SERVICE CORPORATION,SC
SERVICE CORP,SC
SVC CORP,SC
& AFFILIATES,& AFF
& AFFILIATED COMPANIES,& AFF
& AFFILIATED COS,& AFF
& AFFILIATED CO,& AFF
& ITS AFFILIATED COS,& AFF
& ITS AFFILIATED CO,& AFF
& SUBSIDIARIES,& SUBS
& SUBSIDIARY,& SUBS
& ALL OF ITS US SUBSIDIARIES,& SUBS
& ITS SUBSIDIARIES,& SUBS
& SUBSID,& SUBS

** p40_std_commonwrd_name.csv

ADMINISTRATORS,ADMIN
ADMINISTRATOR,ADMIN
ADMINISTRATION,ADMIN
ADMINISTRATIVE,ADMIN
BROTHERS,BROS
CREDIT UNION,CU
CR UN,CU
CHEMICAL,CHEM
CHEMICALS,CHEM
DEPARTMENT,DEPT
DOTCOMS,DOTCOM
DOT COM,DOTCOM
ELEC,ELEC
ELECTRIC,ELEC
ELECTRICS,ELEC
ELECTRONIC,ELEC
ELECTRONICS,ELEC
ENGINEERS,ENGR
ENGINEERING,ENGR
ENGINEER,ENGR
ENTERPRISE,ENT
ENTERP,ENT
ENTERPRISES,ENT
ENTERPRIZES,ENT
ENTERPRS,ENT
ENTPR,ENT
ENTR,ENT
ENTRPRSE,ENT
ENTRPSE,ENT
FEDERAL CREDIT UNION,FCU
FEDERAL CREDIT UN,FCU
FEDERAL CR UN,FCU
FEDERAL CU,FCU
FED CR UN,FCU
FED CU,FCU
GROUP,GRP
INSURANCE,INS
LABORATORIES,LAB
LABS,LAB
MANUFACTURING,MFG
MANUFACTURI,MFG
MANAGEMENT,MGT
MANAGMENT,MGT
MGMNT,MGT
MGMT,MGT
PRODUCTS,PROD
PRODS,PROD
SYSTEMS,SYS


