% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_dots.r
\name{get_dots}
\alias{get_dots}
\title{An alternative way to interact with \code{...} arguments}
\usage{
get_dots(
  function_or_arg_list = NULL,
  select_args = NULL,
  search_while_calls_have_formals = "...",
  search_while_calls_belong_to_env = NULL,
  search_while_calls_regexp = NULL,
  search_up_nframes = 1L,
  search_up_to_call = NULL,
  skip_checks_for_parent_call = TRUE
)
}
\arguments{
\item{function_or_arg_list}{The end function that meant to accept dots arguments (default arguments accessed with \code{formals(function_or_arg_list)}) or just explicit list of default dots arguments that will be searched up in calling stack and updated if set explicitly in higher calls. If set to NULL then use formals of the parent call (assessed with \code{sys.function(-1L)}).}

\item{select_args}{Which arguments to select from \code{function_or_arg_list}. Ether character or numeric vector.}

\item{search_while_calls_have_formals}{Formals (parameters, arguments) that should be present in each upper call to continue looking up the call stack for updates in dots arguments.}

\item{search_while_calls_belong_to_env}{Environment/package name (character string) to which each function in upper calls to should belong to continue looking up the call stack for updates in dots arguments.}

\item{search_while_calls_regexp}{Regular expression that each function name in upper calls to should matched to continue looking up the call stack for updates in dots arguments.}

\item{search_up_nframes}{Number of frames (aka environments) in calling stack to look up for updates in dots arguments.}

\item{search_up_to_call}{The name of the call before which to continue looking up the call stack for updates in dots arguments.}

\item{skip_checks_for_parent_call}{Whether to skip checking \code{search_while_calls_have_formals} \code{search_while_calls_belong_to_env} \code{search_while_calls_regexp}}
}
\value{
List of updated dots arguments
}
\description{
Provides access to \code{...} dots arguments without explicitly passing it through calling stack and allows updating default values that are explicitly set throughout calling stack (lower calls take prevalence).
}
\examples{
# Basic example
util <- function(foo = 0, bar = 0) {
    # binds updated arguments into environment
    dots <- dots:::get_dots()
    for (v in names(dots)) {
        assign(v, dots[[v]])
    }
    rm(dots, v)
    # report argumetns
    message("foo: ", foo, ", bar: ", bar)
}

util()
#> foo: 0, bar: 0

main <- function (...) {
    util()
    util(foo = 1) 
    util(bar = 1)
}

main(foo = 2, bar = 2)
#> foo: 2, bar: 2
#> foo: 1, bar: 2  # THIS WORKS NOW!
#> foo: 2, bar: 1  # THIS WORKS NOW!

# Nested calls example
util <- function(foo = 0, bar = 0) {
    dots <- dots:::get_dots(search_up_nframes = 3L)
    # bind updated arguments to local environment
    for (v in names(dots)) {
        assign(v, dots[[v]])
    }
    rm(dots, v)
    # report arguments
    message("foo: ", foo, ", bar: ", bar)
}

main <- function (...) {
    util()
    sub_main(foo = 1)
}

sub_main <- function (...) {
    util()
    sub_sub_main(bar = 2)
}

sub_sub_main <- function (...) {
    util()
}

main()
#> foo: 0, bar: 0
#> foo: 1, bar: 0
#> foo: 0, bar: 2

}
