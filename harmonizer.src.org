# - Reference from [[associate-id:org:29i4s7t0y5i0][Harmonizer R package]] on [2021-06-05 Sat 22:51]
#+PROPERTY: header-args:R  :comments link :session :mkdirp yes :padline yes
* Frontpage
:PROPERTIES:
:export_file_name: README.md
:export_options: toc:nil
:export_options+: author:nil
:export_options+: title:nil
:END:


#+begin_export markdown
[![R-CMD-check](https://github.com/stasvlasov/harmonizer/workflows/R-CMD-check/badge.svg)](https://github.com/stasvlasov/harmonizer/actions)
![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/stasvlasov/harmonizer)
#+end_export

The R package =harmonizer= standardizes (harmonizes) organizational names.

The task of merging large datasets becomes more common these days as more and more data is coming. However, there is still no standard tool for that task according to Thoma et al. (2010).

Initially this task was performed manually (e.g., Griliches, 1981) and relatively recently some automatic tools start to emerge. This package is meant to a framework for name harmonization procedures and consolidate prior efforts of researchers that were working on the similar task.

This R package currently includes contributions of Thoma et al. (2010), Magerman et al. (2006) and Cockburn et al. (2009) with number of additional cleaning procedures.

The detailed procedures can be found here:
- [[file:res/magerman.code.org][Magerman et al. (2006)]]
- [[file:res/cockburn.code.org][Cockburn et al. (2009)]]

Harmonization of names is a separate tasks from name matching. Most of the harmonizing procedures works separately on an individual string and independent on the corpus of names. Nevertheless, some of harmonization procedures can also consider the whole corpus of names for harmonizing, e.g., as it is a case in Magerman's umlaut harmonization procedure. Processing of such procedures can not be done now in parallel.

This is work in progress. Please, file an issue or a suggestion if you have any.

** References

Magerman, T., Looy, V., Bart, & Song, X. (2006). /Data Production Methods for Harmonized Patent Statistics: Patentee Name Harmonization/ (SSRN Scholarly Paper No. ID 944470). Rochester, NY: Social Science Research Network. Retrieved from http://papers.ssrn.com/abstract=944470

Thoma, G., Torrisi, S., Gambardella, A., Guellec, D., Hall, B. H., & Harhoff, D. (2010). Harmonizing and combining large datasets - an application to firm-level patent and accounting data. /National Bureau of Economic Research Working Paper Series/, (15851). Retrieved from http://www.nber.org/papers/w15851 http://www.nber.org/papers/w15851.pdf


** Installation

#+BEGIN_SRC R
  devtools::install_github("stasvlasov/harmonizer")
#+END_SRC

** Usage
The package provides its main function =harmonize= that expect character vector of organization names as input and returns its harmonized version.

#+BEGIN_SRC R
  org.names.test <- c("žŸong-ÃÇÈÏ\n\u00b5&oacute;\u00b5<p>, LTD Co;  "
                    , "<br> the $(Ldt &AMP; C&oacute;MP) Ïotta INt"
                    , "Masha  &AMP;Lena Ltd. (Spb)"
                    , "bla-bla-bla Ltd.")
  data.frame(harmonized = harmonize(org.names.test)
           , original = org.names.test)

  #           harmonized                                    original
  #  1    ZYONG ACEI UOU        žŸong-ÃÇÈÏ\nµ&oacute;µ<p>, LTD Co;  
  #  2         IOTTA INT <br> the $(Ldt &AMP; C&oacute;MP) Ïotta INt
  #  3      MASHA & LENA                 Masha  &AMP;Lena Ltd. (Spb)
  #  4       BLA BLA BLA                            bla-bla-bla Ltd.
#+END_SRC


*** Harmonization procedures
:PROPERTIES:
:ID:       org:pm44dhm0fqi0
:END:

Harmonization procedures are flexible and can be specified with setting ~procedures~ option like so:

#+BEGIN_SRC R
    org.names.test %>%
        harmonize(procedures = list(
                      list("harmonize.toascii", detect.encoding = FALSE)
                    , "harmonize.remove.brackets"
                    , "harmonize.toupper"
                    , list("harmonize.squish.spaces", wrap.in.spaces = TRUE)
                    , "cockburn.replace.punctuation"
                    , "harmonize.squish.spaces"))

#+END_SRC

The default harmonization procedures are described in the literate [[file:harmonizer.src.org::*harmonize][source file]].

*** Displaying harmonization progress
Useful for big data tables. The option ~progress.by~ tells how often to update the progress. (If you have 10^7 records it is recommended to set ~progress.by~ as 10^5 or more.) Setting this option will slow the harmonization down a little.

#+BEGIN_SRC R
  org.names.test %>%
      harmonize(progress.by = 1)

  ## Running harmonizer procedures:
  ## * toascii ...			DONE
  ## * remove.brackets ...		DONE
  ## * toupper ...			DONE
  ## * apply.nber ...			 73%
#+END_SRC

*** Visualizing harmonization algorithm
The package can generate simple visualization for harmonization algorithm (procedures). For example:

[[file:./img/harmonization.png]]

*** Comparison of alternative harmonization algorithms

Knowing ground truth whether any two text strings that represents organizational names are the same organizational name or assuming that some algorithm produces such ground truth the package uses simple well known statistics (see table below) of pair-wise name comparison to assess relative performance of specific algorithm.

|                               | /Same set by ground truth/ | /Different sets by ground truth/ |
|-------------------------------+----------------------------+----------------------------------|
| /Same set by algorithm/       | True Positive (*TP*)       | False Positive (*FP*)            |
| /Different sets by algorithm/ | False Negative (*FN*)      | True Negative (*TN*)             |


Relative performance metrics:
- pair-wise precision / cluster precision [TP/(TP +FP)]
- pair-wise recall / cluster recall [TP/(TP +FN)]
- pair-wise / cluster F1 (harmonic mean of precision and recall)
- pairwise accuracy
- average cluster purity
- K metric

# <img src="https://render.githubusercontent.com/render/math?math=pair-wise precision = \frac{TP}{TP + FP}">
# <img src="https://render.githubusercontent.com/render/math?math=pair-wise recall = \frac{TP}{TP + FN}">

** Other relevant literature

Balasubramanian, N., & Sivadasan, J. (2010). /NBER Patent Data-BR Bridge: User Guide and Technical Documentation/ (SSRN Scholarly Paper No. ID 1695013). Rochester, NY: Social Science Research Network. Retrieved from http://papers.ssrn.com/abstract=1695013

Bosch-Capblanch, X. (2011). Harmonisation of variables names prior to conducting statistical analyses with multiple datasets: an automated approach. /Bmc Medical Informatics and Decision Making/, 11. http://doi.org/10.1186/1472-6947-11-33

Callaert, J., Du Plessis, M., Grouwels, J., Lecocq, C., Magerman, T., Peeters, B., … Vereyen, C. (2011). Patent statistics at eurostat: Methods for regionalisation, sector allocation and name harmonisation. Retrieved from https://lirias.kuleuven.be/bitstream/123456789/312061/1/2011-07-05

Codes, E. M. (2006). WORLD PATENTS INDEX. Retrieved from https://www5d.delphion.com/derwent/docs/patentee_codes.pdf

Du Plessis, M., Van Looy, B., Song, X., & Magerman, T. (2010). Data production methods for harmonized patent statistics: Patentee sector allocation 2009. Retrieved from https://lirias.kuleuven.be/handle/123456789/264237

Li, G.-C., Lai, R., D’Amour, A., Doolin, D. M., Sun, Y., Torvik, V. I., … Fleming, L. (2014). Disambiguation and co-authorship networks of the U.S. patent inventor database (1975–2010). /Research Policy/, 43(6), 941–955. http://doi.org/10.1016/j.respol.2014.01.012

Lissoni, F., Coffano, M., Maurino, A., Pezzoni, M., & Tarasconi, G. (2010). APE-INV’s “Name Game” algorithm challenge: A guideline for benchmark data analysis & reporting. /Version/, 1, 875–889.

Peeters, B., Song, X., Callaert, J., Grouwels, J., & Van Looy, B. (2010a). Harmonizing harmonized patentee names: an exploratory assessment of top patentees. Retrieved from https://lirias.kuleuven.be/handle/123456789/264238

Peeters, B., Song, X., Callaert, J., Grouwels, J., & Van Looy, B. (2010b). Harmonizing harmonized patentee names: an exploratory assessment of top patentees. Retrieved from https://lirias.kuleuven.be/bitstream/123456789/264238/1/2010-03-18

Pesenhofer, A., Berger, H., & Dittenbach, M. (2011). Offering New Insights by Harmonizing Patents, Taxonomies and Linked Data. In M. Lupu, K. Mayer, J. Tait, & A. J. Trippe (Eds.), /Current Challenges in Patent Information Retrieval/ (Vol. 29, pp. 357–371). Dordrecht: Springer. Retrieved from ://WOS:000290417900018

Raffo, J., & Lhuillery, S. (2009). How to play the “Names Game”: Patent retrieval comparing different heuristics. /Research Policy/, 38(10), 1617–1627. http://doi.org/10.1016/j.respol.2009.08.001

Van der Loo, M. P. (2014). The stringdist package for approximate string matching. /The R Journal/, 6, 111–122.

Wasi, N., Flaaen, A., & others. (2015). Record linkage using Stata: Preprocessing, linking, and reviewing utilities. /Stata Journal/, 15(3), 672–697.

Winkler, W. E. (2006). /Overview of record linkage and current research directions/. Bureau of the Census. Retrieved from http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.79.1519






** How to cite this R package

#+begin_src latex
@misc{Vlasov2020,
  author = {Vlasov, Stanislav A.},
  title = {harmonizer - an R package to harmonize organizational names.},
  year = {2020},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/stasvlasov/harmonizer}},
  commit = {5fc35d74c0f8e0421845029d4da2f050f352edbb}
}
#+end_src




* Development

For this package development I use Emacs' org-mode that allows literate programming. Literate programming in this case provides ways to do the following:
- Use tables of internal data for harmonization in human readable format and convert it to .rda when deploying package
- Write function definition and tests next to other but tangle it from .org file to different directories and .r files on deployment


** Naming Convention
- All functions should have a verb
- Variables should not have a verb
- Everything that is available to user should start with either harmonizer (data) or harmonize (functions)
- Internal functions and variables does not have to have this prefix
- Second part of the name is a source if the function or a data is taken from this source (e.g. harmonize.magerman.remove.common.words)
- The rest is the name of the function or a variable as precise and informative as possible
- Data for string substitutions, removals or pattern recognition should be named as "patterns" (e.g., harmonizer.magerman.patterns.special.characters)


* Deploy
** README.md
#+name: tangle-readme
#+begin_src emacs-lisp
  (require 'org-goto)
  (save-excursion
    (org-goto--local-search-headings "Frontpage" nil t)
    ;; (org-pandoc-export-to-markdown nil 'subtreep)
    (org-md-export-to-markdown nil 'subtreep))
#+end_src
** Set up tinytest
#+BEGIN_SRC R
  tinytest::setup_tinytest(".")
#+END_SRC

#+BEGIN_SRC R
  rcmdcheck::rcmdcheck()
  tinytest::setup_tinytest(".")
#+END_SRC
** Add github workflows and badges

https://github.com/r-lib/actions/blob/v1/examples/README.md
#+BEGIN_SRC R
  usethis::use_github_action("check-release")
  usethis::use_github_action("test-coverage")
  usethis::use_github_action("pkgdown")
  
  usethis::use_github_actions_badge(name = "R-CMD-check")
#+END_SRC

** Set Enviroment for making the package (.Rprofile)
:PROPERTIES:
:ID:       org:yeu37341cai0
:END:
*** CRAN Packages
:PROPERTIES:
:ID:       org:id2dzmx01ei0
:END:

There packages are used for building ~harmonizer~
#+name: packages
| names          | link                                                                 |
|----------------+----------------------------------------------------------------------|
| devtools       |                                                                      |
| roxygen2       |                                                                      |
| languageserver |                                                                      |
| xml2           |                                                                      |
| tibble         |                                                                      |
| stringi        |                                                                      |
| stringr        |                                                                      |
| magrittr       |                                                                      |
| lubridate      |                                                                      |
| plyr           |                                                                      |
| data.table     |                                                                      |
| dplyr          |                                                                      |
| tinytest       | https://github.com/markvanderloo/tinytest/blob/master/pkg/README.md  |
| checkmate      | https://mllg.github.io/checkmate/                                    |
| boomer         | [[https://moodymudskipper.github.io/boomer/][Debugging Tools to Inspect the Intermediate Steps of a Call]]          |

Note: If =install.packages= is tangled to =.Rprofile= it might cause a recursive installation because installers can runs R sessions in the same folder.

#+name: install-packages
#+header: :var packages = packages
#+BEGIN_SRC R :tangle no
  ## --------------------------------------------------------------------------------
  ## Install Packages if not installed
  ## --------------------------------------------------------------------------------
  for(package in packages$names) {
      if(!require(package, character.only = TRUE)) {
          install.packages(package, repos = 'http://cloud.r-project.org')
      }
  }
  ## --------------------------------------------------------------------------------
#+END_SRC

#+name: get-packages
#+header: :var packages = packages
#+BEGIN_SRC R :tangle no :results replace raw
  paste0(c("c('" , paste(packages$names, collapse = "'\n, '"), "')"), collapse = "")
#+END_SRC

.Rprofile
#+BEGIN_SRC R :tangle no :noweb tangle
    ## -----------------------------------------------------------------------------
    ## First load default packages getOption("defaultPackages")
    ## Otherwise it will add it at the end which can mask some funcitons
    .First.sys()

  ## set default mirror
  options(repos=structure(c(CRAN="http://cloud.r-project.org")))

    ## -----------------------------------------------------------------------------
    ## Load Packages
    ## -----------------------------------------------------------------------------
    for(package in
        <<get-packages()>>) {
        require(package, character.only = TRUE)
    }
#+END_SRC



*** My Packages
:PROPERTIES:
:ID:       org:qa7ezmx01ei0
:END:

#+BEGIN_SRC R :tangle no
  ## --------------------------------------------------------------------------------
  ## Load My pakcages
  ## --------------------------------------------------------------------------------
  ## detach(package:romRDS, unload = TRUE)
  ## remove.packages("romRDS")
  if (!require("romRDS", character.only = TRUE)) {
    if(!require("devtools")) {
      install.packages("devtools"
                     , repos = 'http://cloud.r-project.org'
                     , dependencies = TRUE)
      require("devtools", character.only = TRUE)
    }
    install_github("stasvlasov/romRDS")
    require("romRDS", character.only = TRUE)
  }
  ## --------------------------------------------------------------------------------
#+END_SRC

** Package documentation
:PROPERTIES:
:ID:       org:g5wa69d1ffi0
:END:

#+BEGIN_SRC R :tangle R/harmonizer.r
  #' @details
  #' Harmonizer package standardizes (harmonizes) organizational names
  #'     mainly using procedures described in Thoma et al. (2010) and
  #'     Magerman, Looy, Bart, & Song (2006) but not only.  This is work
  #'     in progress. Please, file an issues or suggestion if you have
  #'     any.  The main function is [harmonize()].
  #' @keywords internal
  "_PACKAGE"
#+END_SRC

** Reset working directory
#+name: reset-working-directory
#+BEGIN_SRC R :tangle no
  ## Remove tangled and generated files
  ## --------------------------------------------------------------------------------
  files_to_remove <- c(
      "DESCRIPTION"
    , "NAMESPACE"
  )
  
  dirs_to_remove <-c(
      "man"
    , "R"
  )
  
  ## remove files in dirs recursively
  sapply(dirs_to_remove
       , function(dir) {
           file.remove(list.files(dir , recursive = TRUE, full.names = TRUE))
       })
  
  ## remove files and empty dirs
  sapply(c(files_to_remove, dirs_to_remove) , file.remove)
  
#+END_SRC

** Tangle source
#+name: tangle-buffer
#+BEGIN_SRC emacs-lisp :results none
  (org-babel-tangle)
#+END_SRC


** Make package data from org-tables

It is a named src R code block. Call it in org file by refering in =#+CALL:= with arguments =data.name= and =data=.

This file exports specific org-table to =.rds= (R data stucture) file to =data.dir= (default to =./data=) and then combines these data files (.rds) into =R/sysdata.rda= (about =R/sysdata.rda= see http://r-pkgs.had.co.nz/data.html).

To call all calls
#+name: call-all-calls
#+BEGIN_SRC emacs-lisp :results none
  (let (org-confirm-babel-evaluate)
      (org-babel-map-call-lines nil (call-interactively 'org-babel-execute-maybe)))
#+END_SRC

#+label: Rename and save org tables to .rds files
#+name: make-rds-patterns-table
#+header: :colnames no
#+header: :var data = "default.data.table"
#+header: :var data.name = "default.data.name"
#+header: :var data.names = "first.row"
#+header: :var data.dir = "./data"
#+header: :var remove.single.quotes = "TRUE"
#+header: :var add.to.rda = "TRUE"
#+header: :var rda.filename = "sysdata"
#+header: :var rda.dir = "./R"
#+begin_src R :tangle no
  require("magrittr")
  require("stringr")
  require("stringi")
  require("data.table")
  require("romRDS")
  
  ## just in case if there is not directory
  dir.create(data.dir, recursive = TRUE, showWarnings = FALSE)
  
  ## make a path for saving .rds
  data.path  <-
      data.name %>% 
      paste0(".rds") %>%
      file.path(data.dir, .)
  
  ## just in case if there is not directory
  dir.create(rda.dir, recursive = TRUE, showWarnings = FALSE)
  
  ## make a path for saving .rda
  rda.path  <-
      rda.filename %>% 
      paste0(".rda") %>%
      file.path(rda.dir, .)
  
  if(length(data) == 1) {
      data %<>%
          extract2(1) %>%
          ## small fix for the stings trimming problem
          {if(as.logical(remove.single.quotes))
               str_replace(.,"^'(.*)'$", "\\1")
           else .} %>%
          ## work around | character in the strings
          stri_replace_all_fixed("\\vert", "|")
      ## save data to .rda (filename is the same as var name)
      saveRDS(data, data.path)
  } else {  
      ## fix for column names
      if(data.names == "first.row") {
          ## only works when option :colnames no
          data.names <- 
              data %>%
              extract(1,) %>%
              unlist %>% 
              tolower %>%
              make.names
          data %<>% 
              extract(-1,) %>%
              set_names(data.names)
      }
      ## small fix for the stings trimming problem
      ## only remove quotes when they is on the both sides of the string
      ## it will then convert everything into strings
      data %<>% 
          {if(as.logical(remove.single.quotes))
               lapply(.,str_replace, "^'(.*)'$", "\\1")
           else .} %>%
          ## work around | character in the strings
          lapply(stri_replace_all_fixed, "\\vert", "|") %>% 
          as.data.table
      ## save data to .rda (filename is the same as var name)
      saveRDS(data, data.path)
  }
  
  message(data.name, " is saved!")
  
  ## add all .rds to R/sysdata.rda
  ## (variable names are the same as .rds files)
  if(!is.null(add.to.rda)) {
      dir(data.dir) %>% 
          sapply(romRDS
               , dir = data.dir
               , quietly = TRUE
               , return.obj.name = TRUE
               , do.not.make = TRUE
               , obj.name.has.extention = TRUE) %>%
          save(list = ., file = rda.path)
  }
  
  message(".rda is updated!")
  
#+end_src


#+name: make-rda
#+header: :var data.dir = "./data"
#+header: :var add.to.rda = "TRUE"
#+header: :var rda.filename = "sysdata"
#+header: :var rda.dir = "./R"
#+BEGIN_SRC R
  require("romRDS")
  require("magrittr")
  
  ## just in case if there is not directory
  dir.create(rda.dir, recursive = TRUE, showWarnings = FALSE)
  
  ## make a path for saving .rda
  rda.path  <-
      rda.filename %>% 
      paste0(".rda") %>%
      file.path(rda.dir, .)
  
  
  ## add all .rds to R/sysdata.rda
  ## (variable names are the same as .rds files)
  if(!is.null(add.to.rda)) {
      dir(data.dir) %>% 
          sapply(romRDS
               , dir = data.dir
               , quietly = TRUE
               , return.obj.name = TRUE
               , do.not.make = TRUE
               , obj.name.has.extention = TRUE) %>%
          save(list = ., file = rda.path)
  }
  
  message(".rda is updated!")
  
#+END_SRC

** Generate package description


#+name: suggest-packages
| names     | link                                                                |
|-----------+---------------------------------------------------------------------|
| tinytest  | https://github.com/markvanderloo/tinytest/blob/master/pkg/README.md |
| fastmatch | [[https://cran.r-project.org/web/packages/fastmatch/index.html][CRAN - Package fastmatch]]                                            |


#+name: dependencies-packages
| names      | link |
|------------+------|
| data.table |      |
| stringi    |      |
| xml2       |      |
| checkmate  |      |
| magrittr   |      |
| stringr    |      |

#+name: generate-package-docs
#+header: :var suggest_packages = suggest-packages
#+BEGIN_SRC R :tangle no
  ## Generate package description
  ## --------------------------------------------------------------------------------

  package.packages <- c(
      "data.table"
    , "magrittr"
    , "stringi"
    , "stringr"
    , "tibble"
    , "xml2"
    , "dplyr"
    , "checkmate")

  ## Print current packages verstions
  package.packages %>% sapply(function(pkg)
      paste0(pkg, " (>= ", packageVersion(pkg), ")"), USE.NAMES = FALSE) %>%
      cat(sep = "\n")

  ## Adjust verstions manually
  package.packages.man.ver  <- c(
      "data.table (>= 1.12)"
    , "magrittr (>= 1.5)"
    , "stringi (>= 1.4)"
    , "stringr (>= 1.4)"
    ## , "dplyr (>= 0.8)"
    ## , "tibble (>= 2.0)"
    , "xml2 (>= 1.0)"
    , "checkmate (>= 2.0.0)"
  )


  use_description(fields =
                      list(Title  = "Harmonization of Organizational Names"
                         , Date = Sys.Date()
                         , "Authors@R" = 'as.person("Stanislav Vlasov <s.vlasov@uvt.nl> [aut, cre]")'
                         , License = "MIT License"
                         , Version = "0.3"
                         , Imports = paste(package.packages.man.ver
                                         , collapse = ", ")
                         , Depends = "R (>= 3.4)"
                         , Suggests = paste(suggest_packages$names, collapse = ", ")
                         , Description = "Harmonizes organizational names using steps described in Thoma et al. (2010) and Magerman, Looy, Bart, & Song (2006) and more."
                         , References = "Magerman, T., Looy, V., Bart, & Song, X. (2006). Data Production Methods for Harmonized Patent Statistics: Patentee Name Harmonization (SSRN Scholarly Paper No. ID 944470). Rochester, NY: Social Science Research Network. Retrieved from http://papers.ssrn.com/abstract=944470, Thoma, G., Torrisi, S., Gambardella, A., Guellec, D., Hall, B. H., & Harhoff, D. (2010). Harmonizing and combining large datasets - an application to firm-level patent and accounting data. National Bureau of Economic Research Working Paper Series, (15851). Retrieved from http://www.nber.org/papers/w15851.pdf"))

  ## Update name spaces and documentation for functions
  roxygenise()

  # This function is a wrapper for the ‘roxygen2::roxygenize()’ but also load the package
  ## document()


#+END_SRC

** Install package
#+name: install-package
#+BEGIN_SRC R :tangle no
  ## Unload and uninstall package
  ## --------------------------------------------------------------------------------
  detach(package:harmonizer, unload = TRUE)
  remove.packages("harmonizer")
  
  ## Install package
  ## --------------------------------------------------------------------------------
  install(".")
#+END_SRC

** Test package

#+BEGIN_SRC R :tangle no
  
  ## Deploy from web
  ## --------------------------------------------------------------------------------
  install_github("stasvlasov/harmonizer")
  
  
  ## Load main functions
  source("R/harmonizer.r")
  
  ## Load data used in funcitons
  load("R/sysdata.rda")
  
  ## load procedures functions
  source("R/magerman.r")
  source("R/cockburn.r")
  
  
  ## Test
  ## --------------------------------------------------------------------------------
  library("harmonizer")
  
  harmonize(c("Lala Ltd.", "bla-bla Ltd."))
  
  harmonize_magerman(c("Lala Ltd.", "bla-bla Ltd."))
  
#+END_SRC


* Functions
** get_dots

#+name: inject-get-dots
#+BEGIN_SRC emacs-lisp :tangle no
  (save-window-excursion
    (let* (tangling-from-harmonizer-R-package
           (dots-get-dots-block-name "get_dots")
           (dots-r-pkg-path "~/org/research/dots/dots.src.org")
           ;; assume running in target pkg dir
           (r-pkg-path (file-name-directory (buffer-file-name)))
           (tangle-to-file (concat r-pkg-path "R/get_dots.r"))
           ;; this is used as condition in 'bind-get-dots' call in dots.src.org
           tangling-from-harmonizer-R-package
           ;; turn off babel prompts
           org-confirm-babel-evaluate)
      (with-current-buffer (find-file dots-r-pkg-path)
        (org-babel-goto-named-src-block dots-get-dots-block-name)
        ;; With one universal prefix argument, only tangle the block at point.
        (org-babel-tangle '(4) tangle-to-file))))
#+END_SRC


** harmonize.utils
*** harmonize.make.procedures.list
:PROPERTIES:
:ID:       org:i762gum0fqi0
:END:
#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' Makes list of procedures calls from table.
  ##'
  ##' Table should have at least two columns - messages and fuctions calls. Each function call should be a string of the following format "'function.name', arg1 = val1, arg2 = val2" (same as arguments for `do.call` function).
  ##' 
  ##' @param procedures.table Table to use
  ##' @param message.field name of the column with messages that will be displayed when each call is executed
  ##' @param function.call.field name of the column where function (harmonization procedures) calls are listed.
  ##' @param no.field name of the column where the number of procedure is specified. Also this field indicates if the row in the table is just a comment in which case it will be removed if `remove.comments` is set (which is set by default)
  ##' @param remove.comments Whether to remove comments.
  ##' 
  ##' @return List of named function calls. Names are messages.
  ##' 
  ##' @md 
  ##' @import magrittr data.table
  harmonize.make.procedures.list <- function(procedures.table
                                           , message.field = "message"
                                           , function.call.field = "function.call"
                                           , no.field = "no"
                                           , remove.comments = TRUE
                                           , sort.by.no.field = TRUE
                                           , comments = c("#", "-", "")) {
      procedures.table %<>% defactor
      if(remove.comments) {
          procedures.table %<>%
              extract(!(procedures.table[[no.field]] %in% comments), )
      }
      if(sort.by.no.field) {
          procedures.table %<>%
              extract(order(procedures.table[[no.field]]), )
      }
      procedures.table %>% 
          extract2(function.call.field) %>%
          paste0("list(", ., ")") %>%
          lapply(function(str) eval(parse(text = str))) %>%
          lapply(function(lst) if(length(lst) == 1) unlist(lst) else lst) %>% 
          set_names(procedures.table[[message.field]])
  }
#+END_SRC


Test:
#+BEGIN_SRC R :tangle no
  data.frame(no = c(3,2,"-", "")
           , message = c("hello", "world", "man", "dfsdf")
           , function.call = c("'c', 1, b=3", "'sum', 8,8,9", "'version'", "")) %>% 
      harmonize.make.procedures.list

  magerman.procedures.table <- readRDS("data/magerman.procedures.table.rds")

  harmonize.make.procedures.list(magerman.procedures.table)
#+END_SRC


*** harmonize.x.split
:PROPERTIES:
:ID:       org:ije1f8s0lei0
:END:

#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' Splits the object (table) in chunks by rows
  ##'
  ##' Convenient to apply some function to the table in chunks, e.g., if you want to add display of progress.
  ##'
  ##' @param x object or table
  ##' @param by number of rows to split by
  ##' @param len length of the table (nrow)
  ##' 
  ##' @return List of (sub)tables
  ##'
  ##' @export
   harmonize.x.split <- function(x, by, len) {
     split(x, rep(seq(1, len %/% by +1)
                , each = by
                , length.out = len))
   }
#+END_SRC


  #+name: 
#+BEGIN_SRC R
    ## data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
       ##                   , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
       ##                   , "MSLab Co."
       ##                   , "MSLaeb Comp."
       ##                   , "MSLab Comp."
       ##                   , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") %>%
       ##              rep(50)
       ##          , foo = "lalala" ) %>% 
       ##   harmonize.x.split(10, nrow(.)) %>%
       ##   sapply(class)
    
       ## c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
       ## , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
       ## , "MSLab Co."
       ## , "MSLaeb Comp."
       ## , "MSLab Comp."
       ## , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") %>%
       ##   rep(50) %>% 
       ##   harmonize.x.split(10, length(.))
#+END_SRC

*** harmonize.squish.spaces
:PROPERTIES:
:ID:       org:dlp0f8s0lei0
:END:

#+BEGIN_SRC R :tangle R/harmonizer.r
  #' Removes redundant whitespases
  #' @param x table or vector
  #'
  #' @param wrap.in.spaces If set then adds leaing and ending spaces. Default is FALSE.
  #'
  #' @inheritDotParams harmonize.x
  #'
  #' @return updated table or vector
  #' @import magrittr stringr
  #' @export
  harmonize.squish.spaces <- function(x, wrap.in.spaces = FALSE, ...) {
    harmonize.x(x, ...) %>% # get x.vector
      str_squish %>%
      {if(wrap.in.spaces) paste0(" ", ., " ") else .} %>% 
      harmonize.x(x, ., ...) # put x.vector to x
  }

  ## #' Removes redundant whitespases
  ## #' @param x table or vector
  ## #'
  ## #' @param trim Whether to trim the beging (i.e., "left"), ending (i.e., "right") or "both" whitespaces.
  ## #' @inheritDotParams harmonize.x
  ## #'
  ## #' @return updated table or vector
  ## #' @import magrittr stringr
  ## #' @export
  ## harmonize.clean.spaces <- function(x
  ##                                  , trim = "both"
  ##                                  , ...) {
  ##   harmonize.x(x, ...) %>% # get x.vector
  ##     str_replace_all("\\s+", " ") %>%
  ##     {if(is.null(trim)) .
  ##      else stri_trim(., side = trim)} %>%
  ##     harmonize.x(x, ., ...) # put x.vector to x
  ## }
#+END_SRC


  #+name: 
#+BEGIN_SRC R
    ## test
      ## harmonize.squish.spaces("  String with trailing,  middle, and leading white space\t"
      ##                        , wrap.in.spaces = TRUE)
      ## harmonize.squish.spaces("\n\nString with excess,  trailing and leading white   space\n\n"
      ##                         , wrap.in.spaces = FALSE)
    
    
      ## test
      ## harmonize.clean.spaces("  String with trailing,  middle, and leading white space\t"
      ##                        , trim = FALSE)
      ## harmonize.clean.spaces("\n\nString with excess,  trailing and leading white   space\n\n")
      
#+END_SRC
*** harmonize.toupper
:PROPERTIES:
:ID:       org:xys0f8s0lei0
:END:

#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' Uppercases vector of interest in the object (table)
  ##' 
  ##' @param data data
  ##' 
  ##' @inheritDotParams harmonize.x
  ##'
  ##' @import magrittr
  ##' 
  ##' @return updated data (as data.table)
  ##' @export
  harmonize.toupper <- function(data, ...) {
    get_target(data, ...) %>% 
      toupper %>% 
      harmonize.x(data, ., ...)
  }
#+END_SRC


#+name: 
#+BEGIN_SRC R
  ## Tests
  data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                    , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
                    , "MSLab Co."
                    , "MSLaeb Comp."
                    , "MSLab Comp."
                    , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") %>%
               rep(10)
           , foo = "lalala" ) %>% harmonize.toupper(col = 2, name = "bar")
#+END_SRC

*** harmonize.remove.brackets
:PROPERTIES:
:ID:       org:9ew0f8s0lei0
:END:

#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' Removes brackets and content in brackets
  ##' @param x object (table)
  ##' @inheritDotParams harmonize.x
  ##' @return updated object
  ##' 
  ##' @import stringr magrittr
  ##' @export
  harmonize.remove.brackets  <- function(x, ...) {
    harmonize.x(x, ...) %>% 
      str_replace_all("<[^<>]*>|\\([^()]*\\)|\\{[^{}]*\\}|\\[[^\\[\\]]*\\]", "") %>%
      harmonize.x(x, ., ...)
  }
#+END_SRC


  #+name: 
#+BEGIN_SRC R
    ## test
      ## remove.brackets breaks the encoding (so it is better to apply decoding first)
      ## harmonize.remove.brackets("fa\xE7ile (lalala) lkj (sdfs) AAA [sdf]")
#+END_SRC

*** harmonize.remove.quotes
:PROPERTIES:
:ID:       org:4vz0f8s0lei0
:END:

#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' Removes double quotes (deprecated)
  ##' 
  ##' (This is a separate procedure because read.csv can not get this substitution in old version of harmonizer)
  ##'
  ##' @param x an object
  ##' @inheritDotParams harmonize.x
  ##' @return updated object
  ##' 
  ##' @import stringr magrittr
  harmonize.remove.quotes <- function(x, ...) {
    harmonize.x(x, ...) %>% 
      stri_replace_all_fixed("\"", "") %>% 
      harmonize.x(x, ., ...)
  }
#+END_SRC
*** harmonize.unlist.column
:PROPERTIES:
:ID:       org:3ya1f8s0lei0
:END:
#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' If column in the `x` table is list unlist it if possible
  ##' @param x object
  ##' @param replace_zero_length_with Default is replace NULLs with NA_character_ because vector of just NA is a logical class
  ##' @return updated object
  ##' @export
  unlist_if_possible <- function(x, replace_zero_length_with = NA_character_) {
      if(is.list(x)) {
          len <- sapply(x, length)
          if(all(len == 1)) {
              unlist(x, recursive = FALSE, use.names = FALSE)
          } else if(all(len %in% 0:1)) {
              x[len == 0] <- replace_zero_length_with
              unlist(x, recursive = FALSE, use.names = FALSE)
          } else {
              return(x)
          }
      } else {
          ## assume that x is atomic
          return(x)
      }
  }
#+END_SRC


  #+name: 
#+BEGIN_SRC R
    ## Tests
      ## c(1,2,3,4) %>% harmonize.unlist.column
      ## list(c("a"), NULL, 3, "5", character(0)) %>% harmonize.unlist.column
      ## list(c("a"), 3, "5") %>% harmonize.unlist.column
      ## list(c("a", "b", "c"), NULL, 3, "5", character(0)) %>% harmonize.unlist.column
#+END_SRC
*** harmonize.dehtmlize
:PROPERTIES:
:ID:       org:4tffib50bci0
:END:

#+BEGIN_SRC R :tangle R/harmonizer.r
  #' Converts HTML characters to UTF-8 (this one is 1/3 faster than htmlParse but it is still very slow)
  ## from - http://stackoverflow.com/questions/5060076
  #' @param x object (table)
  #' @param as.single.string If set then collapse characters in the main column of the `x` (i.e., `x.col`) as to a single string. It will increase performance (at least for relatively short tables). Default is FALSE
  #' @param as.single.string.sep delimiter for collapsed strings to uncollapse it later. Default is "#_|".
  #' @param read.xml If set the it will parse XML. Default is FALSE which means it parses HTML
  #' @inheritDotParams harmonize.x
  #' @return updated object
  #'
  #' @import xml2 magrittr
  #' @export
  harmonize.dehtmlize <- function(x
                                , as.single.string = FALSE
                                , as.single.string.sep = "#_|"
                                , read.xml = FALSE
                                , ...) {
    x.vector <- harmonize.x(x, ...)
    if(as.single.string) {
      x.vector %>%
        paste0(collapse = as.single.string.sep) %>%
        paste0paste0("<x>", ., "</x>") %>% 
        {if(read.xml) read.xml(.)
         else read_html(.)} %>%
        xml_text %>% 
        strsplit(as.single.string.sep, fixed = TRUE)[[1]]
    } else {
      sapply(x.vector, function(str) {
        paste0("<x>", str, "</x>") %>%
          {if(read.xml) read.xml(.)
           else read_html(.)} %>%
          xml_text
      })    
    } %>% 
      harmonize.x(x, ., ...) %>%
      return()
  }
#+END_SRC


#+name: 
#+BEGIN_SRC R
  ## tests
    ## set.seed(123)
    ## c("abcd", "&amp; &apos; &gt;", "&amp;", "&euro; &lt;") %>% 
    ##   sample(100, replace = TRUE) %>% 
    ##   data.table("lala") %>%
    ##   harmonize.dehtmlize
#+END_SRC

*** harmonize.detect.enc
:PROPERTIES:
:ID:       org:e2bfib50bci0
:END:

#+BEGIN_SRC R :tangle R/harmonizer.r
  #' Detects string encoding
  #' @param x object
  #' @param codes.append basically `harmonized.append` parameter passed to `harmonize.x` but with new defaults. Default is TRUE.
  #' @param codes.suffix basically `harmonized.suffix` parameter passed to `harmonize.x` but with new defaults. Default is "encoding"
  #' @param return.codes.only If set it overwrites `return.x.cols` and `x.harmonized.col.update` parameters passed to `harmonize.x`. Default is FALSE.
  #' @inheritDotParams harmonize.x
  #' @return updated object
  #'
  #' @import stringi magrittr
  #' @export
  harmonize.detect.enc <- function(x
                                 , codes.append = TRUE
                                 , codes.suffix = "encoding"
                                 , ...) {
    available.enc.list <- iconvlist()
    x.vector <- harmonize.x.dots(x
                               , harmonized.suffix = codes.suffix
                               , harmonized.append = codes.append)
    stri_enc_detect(x.vector) %>%
      lapply(function(enc) {
        enc %<>% extract2("Encoding")
        first.ok.enc <- (enc %in% available.enc.list) %>% which %>% extract(1)
        if(length(first.ok.enc) == 0) ""
        else enc[[first.ok.enc]]
      }) %>%
      unlist %>%
      harmonize.x.dots(x, .
                     , harmonized.suffix = codes.suffix
                     , harmonized.append = codes.append) %>% 
      return()
  }
#+END_SRC


#+name: 
#+BEGIN_SRC R
  ## inheritDotParams harmonize.x -harmonized.suffix -harmonized.append
  
  ## ## Test
  ## c("FAÇILE"
  ## , "fa\xE7ile"
  ## , "c\u00b5c\u00b5ber") %>%
  ##   harmonize.detect.enc(codes.append = FALSE
  ##                      , return.x.cols = 1)
  
  ## c("FAÇILE"
  ## , "fa\xE7ile"
  ## , "c\u00b5c\u00b5ber") %>%
  ##   harmonize.detect.enc
#+END_SRC
*** harmonize.toascii
:PROPERTIES:
:ID:       org:mzn0tpb0wei0
:END:
#+BEGIN_SRC R :tangle R/harmonizer.r
  #' Translates non-ascii symbols to its ascii equivalent
  #' 
  #' @param str String to translate
  #' @param detect.encoding Detect encoding of individual elements
  #' @inheritDotParams harmonize.x
  #' 
  #' @import stringi stringr magrittr
  #' 
  #' @export
  harmonize.toascii <- function(x
                              , detect.encoding = FALSE
                              , ...) {
    str <- harmonize.x(x, ...)
    utf <- harmonizer.patterns.ascii$utf %>% paste(collapse = "")
    ascii <- harmonizer.patterns.ascii$ascii %>% paste(collapse = "")
    {if(detect.encoding)  # detect encoding of individual elements
       mapply(function(name, enc)
         iconv(name
             , from = enc
             , to = "UTF-8"
             , sub = "") %>%
         {chartr(utf, ascii, .)}
       , str
       , harmonize.detect.enc(str, return.x.cols = NULL)
       , SIMPLIFY = FALSE, USE.NAMES = FALSE) %>%
         unlist %>% 
         iconv(to = "ASCII", sub = "")
     else
       enc2utf8(str) %>% 
         {chartr(utf, ascii, .)} %>% 
         iconv(to = "ASCII", sub = "")} %>%
      harmonize.x(x, ., ...)
  }
#+END_SRC



#+name: 
#+BEGIN_SRC R
    #'
      #' It takes characters from this string:
      #' ŠŒŽšœžŸ¥µÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýÿ
      #' And translates to this one
      #' SOZsozYYuAAAAAAACEEEEIIIIDNOOOOOOUUUUYsaaaaaaaceeeeiiiionoooooouuuuyy
    
      ## Test
      ## harmonize.detect.enc(c("FAÇILE"
      ##         , "fa\xE7ile"
      ##         , "c\u00b5c\u00b5ber"))
    
      ## c("FAÇILE"
      ## , "fa\xE7ile"
      ## , "c\u00b5c\u00b5ber") %>%
      ##   data.table("coffee") %>% 
      ## harmonize.toascii(detect.encoding = TRUE)
#+END_SRC

**** ASCII equivalents table

A table for converting ~ŠŒŽšœžŸ¥µÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýÿ~ string to ~SOZsozYYuAAAAAAACEEEEIIIIDNOOOOOOUUUUYsaaaaaaaceeeeiiiionoooooouuuuyy~

#+NAME: harmonizer.patterns.ascii
| utf | ascii |
|-----+-------|
| Š   | S     |
| Œ   | O     |
| Ž   | Z     |
| š   | s     |
| œ   | o     |
| ž   | z     |
| Ÿ   | Y     |
| ¥   | Y     |
| µ   | u     |
| À   | A     |
| Á   | A     |
| Â   | A     |
| Ã   | A     |
| Ä   | A     |
| Å   | A     |
| Æ   | A     |
| Ç   | C     |
| È   | E     |
| É   | E     |
| Ê   | E     |
| Ë   | E     |
| Ì   | I     |
| Í   | I     |
| Î   | I     |
| Ï   | I     |
| Ð   | D     |
| Ñ   | N     |
| Ò   | O     |
| Ó   | O     |
| Ô   | O     |
| Õ   | O     |
| Ö   | O     |
| Ø   | O     |
| Ù   | U     |
| Ú   | U     |
| Û   | U     |
| Ü   | U     |
| Ý   | Y     |
| ß   | s     |
| à   | a     |
| á   | a     |
| â   | a     |
| ã   | a     |
| ä   | a     |
| å   | a     |
| æ   | a     |
| ç   | c     |
| è   | e     |
| é   | e     |
| ê   | e     |
| ë   | e     |
| ì   | i     |
| í   | i     |
| î   | i     |
| ï   | i     |
| ð   | o     |
| ñ   | n     |
| ò   | o     |
| ó   | o     |
| ô   | o     |
| õ   | o     |
| ö   | o     |
| ø   | o     |
| ù   | u     |
| ú   | u     |
| û   | u     |
| ü   | u     |
| ý   | y     |
| ÿ   | y     |

#+call: make-rds-patterns-table(data = harmonizer.patterns.ascii, data.name = "harmonizer.patterns.ascii")
*** harmonize.match.arg
:PROPERTIES:
:ID:       org:g18cg5z0nmi0
:END:
#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' Matches the argument vector to (default) choices and ensures the correct length
  ##' @param arg An argument vector to check if it is matches the values
  ##' @param arg.length Desired length of the `arg` to check against or to ensure
  ##' @param arg.length.check Whether to check `arg` length
  ##' @param ensure.length Whether to repeat `arg` `length` times if `arg` is length of 1
  ##' @param choices Vector of values to match `arg`
  ##' @param arg.call Saves `arg` call. Do not touch!
  ##' @param env Saves environment where the function was called from. Do not touch!
  ##' @param length Check if the `arg` is this lenght. If `arg` is length of 1 and `ensure.length` is set to TRUE (default) then it will repeat `arg` `length` times and return
  ##' @return Argument vector
  ##' 
  ##' @md 
  ##' @import magrittr data.table stringr
  ##' @export 
  harmonize.match.arg <- function(arg
                                , arg.length = 1
                                , arg.length.check = TRUE
                                , ensure.length = TRUE
                                , choices = NULL
                                , arg.call = substitute(arg)
                                , env = parent.frame()) {
    ## check arguments
    harmonize_is_ok_type(arg, type = "atomic")
    harmonize_is_ok_type(arg.length, type = "numeric", x.length = 1)
    harmonize_is_ok_type(choices, type = "atomic")
    harmonize_is_ok_type(arg.length.check, type = "logical")
    harmonize_is_ok_type(ensure.length, type = "logical")
    ## fools protection
    ## if(!missing(env) | !missing(arg.call))
    ##   stop("Arguments 'arg.call' and 'env' should not be set")
    ## if choices are missing use defaults
    if(missing(choices)) {
      choices <- eval(evalq(formals(), envir = env)[[deparse(arg.call)]])
    }
    ## if arg is missing use first element
    if(missing(arg.call) && # allow to provide alternative defaults
       deparse(arg) != arg.call && # check if an argument is not the value
       eval(call("missing", arg.call), envir = env)) {
      arg <- choices[[1]]
    }
    ## check if arg matches choices and length
    arg %<>% defactor_vector
    if(all(arg %in% choices)) {
      if(arg.length.check && ensure.length && length(arg) == 1)
        return(rep(arg, arg.length))
      else if(arg.length.check && length(arg) != arg.length)
        stop("'", arg.name, "' should be of length ", arg.length)
      else
        return(arg)
    } else {
      stop("Argument does not match choices/defauls '", deparse(choices), "'!")
    }
  }
#+END_SRC



Tests:

#+BEGIN_SRC R :tangle no
    ## testing harmonize.match.arg

  ## This one is not so good
  match.arg(c("a", "", "c", "c"), c("a", "b", "c"), several.ok = TRUE)
  ## harmonize.match.arg is better

  harmonize.match.arg(c("a", "", "c", "c"), choices = c("a", "b", "c"))
  harmonize.match.arg(c("a", "c", "c"), choices = c("a", "b", "c"), arg.length.check = FALSE)


    a <- function(patterns.type = c("fixed"
                             , "begins"
                             , "ends"
                             , "regex"
                             , "exact"
                             , "exact.trimmed")) {
      harmonize.match.arg(patterns.type, arg.length = 2)
    }

  a()

    a("fixed")

    a(c("ends", "ends"))


  ## testing alternative specification of default choises
  b <- function(patterns.type = c("fixed"
                             , "begins"
                             , "ends"
                             , "regex"
                             , "exact"
                             , "exact.trimmed")) {
    harmonize.match.arg(c("ends", "ends")
                      , arg.length = 2
                      , arg.call = quote(patterns.type))
    }


  b()


#+END_SRC

** Vector Handeling Functions
:PROPERTIES:
:ID:       org:kakfib50bci0
:END:
*** harmonize.x.length and width
:PROPERTIES:
:ID:       org:rixkspb0wei0
:END:
#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' Gets lengths of the object
  ##'
  ##' @param data input data (table)
  ##' @return Length (`nrow`) of the object. If it is atomic it returns its length.
  ##' @export
  harmonize_data_length <- function(data) {
     if (is.atomic(data)) length(data) else nrow(data)
  }


  ##' Gets lengths of the object
  ##'
  ##' @param x input data (table)
  ##' @return Length (`nrow`) of the object. If it is atomic it returns its length.
  ##' @export
  x_length <- function(x) {
      if (is.atomic(x) || is.null(x)) {
          length(x)
      } else if(is.list(x)) {
          length(x[[1]])
      } else {
          nrow(x)
      }
  }




  ##' Gets width of the object
  ##'
  ##' @param data object (table)
  ##' @return Width (ncol) of the object. If it is atomic it is 1.
  ##' @export
  harmonize_data_width <- function(data) {
     if (is.atomic(data)) 1 else ncol(data)
  }


  x_width <- function(x) {
      if (is.atomic(x)) {
          return(1)
      } else {
          return(ncol(x))
      }
  }
#+END_SRC

*** harmonize.empty
:PROPERTIES:
:ID:       org:3971f8s0lei0
:END:
#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' Checks if all elements in vercor(s) are either "", NA, NULL or have zero length
  ##' @param data input data to check each vector
  ##' @return logical vector of the same length
  ##' @export
  harmonize_is_data_empty <- function(data) {
      data_list_checks <-
          lapply(data, function(x) {
              if (length(x) == 0) TRUE else all(x == "" | is.na(x))
          })
      unlist(data_list_checks, recursive = FALSE)
  }


  ##' Removes elements that are either "", NA, NULL or have zero length
  ##' @param x vector
  ##' @return updated vector with empty elements removed
  ##' @export
  harmonize_omit_empty <- function(x) {
      if(length(x) == 0) return(x)
      x[!sapply(harmonize_is_data_empty(x), isTRUE)]
  }



  ## eval things if x empty otherwise return x
  harmonize_eval_if_empty <- function(x, ..., env = parent.frame()) {
    if(harmonize_is_data_empty(x))
      eval(..., envir = env)
    else x
  }
#+END_SRC

#+BEGIN_SRC R :tangle no
  ## list("INCORPORATED", NULL, NULL, NULL, NULL) %>% is.empty
  ## c(NA, "", 3,4, "wsd", NULL) %>% is.empty

  ## test
  ## list("INCORPORATED", NULL, NULL, NULL, NULL) %>% empty.omit

  ## (function() {
  ##   a <- 5
  ##   harmonize.if.empty("", a)
  ## })()

#+END_SRC

#+BEGIN_SRC R :tangle no
  ## list("INCORPORATED", NULL, NULL, NULL, NULL) %>% is.empty
  ## c(NA, "", 3,4, "wsd", NULL) %>% is.empty

  ## test
  ## list("INCORPORATED", NULL, NULL, NULL, NULL) %>% empty.omit

  ## (function() {
  ##   a <- 5
  ##   harmonize.if.empty("", a)
  ## })()

#+END_SRC




*** harmonize.add.suffix
:PROPERTIES:
:ID:       org:c77b69d1ffi0
:END:
#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' Adds a suffix to the string and counter at the end if needed
  ##'
  ##' @param name Variable name
  ##' @param suffix Suffix
  ##' @param x.names Vector of variable names in x to check for duplicates and if we need to add a counter at the end
  ##' @import magrittr stringr
  ##'
  ##' @return Returns a new name
  harmonize_add_suffix <- function(name, suffix, x.names
                                 , search.suffix.in.name = TRUE
                                 , suffix.nbr.init = 1
                                 , suffix.nbr = NULL) {
    ## remove suffix from name if it is already there..
    name.base <- if(search.suffix.in.name)
                   str_remove(name, paste0("\\.", suffix, "(\\.\\d+$|$)"))
                 else name
    name.with.suffix <- paste0(name.base, ".", suffix)
    name.with.suffix.regex.nbr <-
      paste0("(?<=", escape_regex(name.with.suffix), "\\.)", "\\d+$")
    suffix.nbr.init <- if(name.with.suffix %in% x.names)
                         suffix.nbr.init - 1
                       else NULL
    suffix.nbr <-
      c(x.names, ifelse(search.suffix.in.name, name, NULL)) %>% 
      str_extract(name.with.suffix.regex.nbr) %>%
      as.numeric %>%
      {if(all(is.na(.))) suffix.nbr.init
       else max(., na.rm = TRUE)} %>%
      add(1)
    ## return name
    if(length(suffix.nbr) == 0)
      name.with.suffix
    else
      name.with.suffix %>%
        paste0(".", suffix.nbr)
  }
#+END_SRC

#+name: 
#+BEGIN_SRC R
  ## testing
  ## harmonize.add.suffix("x.pro.11", "pro"
  ##                    ## , c("x", "x.pro.20", "foo" , "x.pro.0", "x.pro.3", "var")
  ##                    , c("x", "foo" , "x.pro.8", "var")
  ##                    ## , c("x", "foo" , "x", "var")
  ##                      )
#+END_SRC

*** harmonize.defactor
:PROPERTIES:
:ID:       org:x3j0f8s0lei0
:END:
#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' Converts factor to character
  ##' @param x a vector
  ##' @param check.numeric check if vector is numeric. Default is TRUE. Takes longer with this check but avoids type conversion (numeric to character).
  ##' @return character vector
  defactor_vector <- function(x, check.numeric = FALSE) {
    if(is.factor(x) & check.numeric) {
      levs <- levels(x)
      ## check if levels are numeric (longer)
      ## https://stackoverflow.com/questions/3418128
      if(suppressWarnings(identical(levs
                                  , as.character(as.numeric(levs)))))
        as.numeric(levs)[x]
      else
        levs[x]
    }
    else if(is.factor(x))
      levels(x)[x]
    else x
  }


  ##' Defactor the object
  ##' 
  ##' Returns object of the same type without factors
  ##'
  ##' @param x an object
  ##' @param conv2dt What to convert to data.table
  ##' @param ... 
  ##' @inheritDotParams defactor_vector
  ##' @return object of the same type without factors
  ##'  
  ##' @import data.table
  ##' 
  ##' @export
  defactor <- function(x
                               , conv2dt = c("only.tables"
                                              , "all.but.atomic"
                                              , "all.but.lists"
                                              , "all"
                                              , "none"), ...) {
    conv2dt <-  match.arg(conv2dt)
    if(is.atomic(x)) {
      if(conv2dt %in% c("only.tables", "all.but.atomic", "none"))
        defactor_vector(x, ...)
      else
        data.table(defactor_vector(x, ...))
    } else if(class(x)[1] == "list")
      if((conv2dt %in% c("only.tables", "all.but.lists", "none")))
        lapply(x, defactor, conv2dt = "none", ...)
      else
        data.table(lapply(x, defactor, conv2dt = "none", ...))
    else if(conv2dt != "none")
      as.data.table(lapply(x, defactor_vector, ...))
    else if(is.matrix(x))
      as.matrix(lapply(x, defactor_vector, ...))
    else if(is.data.table(x))
      as.data.table(lapply(x, defactor_vector, ...))
    else if(is.data.frame(x))
      as.data.frame(lapply(x, defactor_vector, ...)
                  , stringsAsFactors = FALSE)
    else x
  }
#+END_SRC

#+BEGIN_SRC R :tangle no
    ## Test
  ## factor(sample(c("a", "b", "b"), 20, replace = TRUE)) %>% defactor_vector

  
  ## Tests
  data.frame(num = factor(sample(runif(5), 20, replace = TRUE))
           , let = factor(sample(c("a", "b", "b"), 20, replace = TRUE))) %>%
    harmonize.defactor
  
  
  list(c(1,2,3), 4,5,6,7) %>% 
    harmonize.defactor(conv2dt = "all.but.atomic")
  
  
  list(c(1,2,3), 4,5,6,7) %>% 
    harmonize.defactor(conv2dt = "only.table")
  
  
  c(c(1,2,3), 4,5,6,7) %>% 
    harmonize.defactor(conv2dt = "only.table")
  
#+END_SRC

*** harmonize.is.ok
:PROPERTIES:
:ID:       org:ld4hpqj01li0
:END:

#+BEGIN_SRC R :tangle R/check_utils.r
  ##' Checks if a column(s) name/number is valid.
  ##' 
  ##' @param col column name/number or vector of columns name/number
  ##' @param x table
  ##' @param required is set NULL is not allowed. Default is FALSE.
  ##' @param allow.negative If `col` is used for negation. Default is FALSE.
  ##' @param allow.zero Allow `col` to be 0. Default is FALSE.
  ##' @param several.ok If set `col` should refer to one column. Default is FALSE.
  ##' @param arg.name Name to use when reporting errors. By default set as `deparse(substitute(col))`
  ##' @return TRUE if `col` value is ok and FALSE if it is NULL
  ##' 
  ##' @md 
  harmonize_is_ok_col <- function(col, x
                                , required = FALSE
                                , allow.negative = FALSE
                                , allow.zero = FALSE
                                , several.ok = FALSE
                                , ban.values = NULL
                                , arg.name = deparse(substitute(col))) {
      x.names <- if(is.atomic(x)) attr(x, "name", TRUE) else names(x)
      if(length(col) > 1)
          if(!several.ok) stop("'", arg.name, "' should be single column")
          else all(sapply(col, harmonize_is_ok_col
                        , x, required
                        , allow.negative = ifelse(allow.negative
                                                , all(col < 0)
                                                , FALSE)
                        , allow.zero = allow.zero
                        , arg.name = arg.name
                        , ban.values = ban.values
                        , several.ok = FALSE))
      else if(is.null(col))
          if(required) stop("'", arg.name, "' is required.")
          else FALSE
      else if(length(col) != 1) stop("'", arg.name, "' should be of length 1.")
      else if(col %in% ban.values)
          stop("'", arg.name, "' is not allowed to be: "
             , paste(ban.values, collapse = ", "))
      else if(is.numeric(col) & !is.na(col))
          if(!allow.negative & col < 0) stop("'", arg.name, "' can not be negartive number or mixed.")
          else if(allow.zero & col == 0) TRUE
          else if(abs(col) %in% 1:harmonize_data_width(x)) TRUE
          else stop("'", arg.name, "' number is out of range. Check ncol(x).")
      else if(is.character(col))
          if(col %in% x.names) TRUE
          else stop("'", arg.name, "' name is out of range. Check names(x).")
      else stop("'", arg.name, "' should be ethier numeric or character.")
  }




  ##' Checks if object is valid type and length.
  ##' 
  ##' @param x Object to check.
  ##' @param x.length Length the object should adhere to. Default is objects length so it will always adhere.
  ##' @param type Type of the object. Default is "logical". If several types are provided that means that it cheches if the x is of either of types! (basically OR function)
  ##' @param allow.na Is NA allowed? Default is TRUE.
  ##' @param allow.null Is NULL allowed? Default is TRUE.
  ##' @param arg.name Name to use when reporting errors. By default set as `deparse(substitute(x))`
  ##' @return TRUE if type is match, FALSE if x is NULL and it is allowed. Through an error otherwise
  ##' 
  ##' @md 
  harmonize_is_ok_type <- function(x
                                 , x.length = length(x)
                                 , type = c("logical"
                                          , "character"
                                          , "numeric"
                                          , "list"
                                          , "atomic"
                                          , NA)
                                 , allow.na = TRUE
                                 , allow.null = TRUE
                                 , arg.name = deparse(substitute(x))) {
      ## if type is missing then assume checking "toggle" argument (TRUE/FALSE)
      if(missing(type)) {
          type <- match.arg(type)
          if(missing(allow.na)) allow.na <- FALSE
          if(missing(allow.null)) allow.null <- FALSE
          if(missing(x.length)) x.length <- 1
      } else {
          type <- match.arg(type, several.ok = TRUE)
      }
      if(allow.null & (length(x) == 0)) return(FALSE)
      else if(!(length(x) %in% x.length))
          stop("Parameter '" ,arg.name, "' has length of ", length(x), " but should be of ", x.length)
      if(allow.na & all(is.na(x))) return(TRUE)
      else if(!allow.na & any(is.na(x))) 
          stop("NAs are not allowed in parameter '", arg.name, "'")
      ## Check types
      if(any(class(x) %in% type)) return(TRUE)
      if(("atomic" %in% type) && is.atomic(x)) return(TRUE)
      # need to check numerics separately because of integers and doubles
      if(("numeric" %in% type) && is.numeric(x)) return(TRUE)
      if(any(is.na(type))) return(TRUE)
      stop("Parameter '", arg.name, "' is type of ", class(x), " but should be one of ", type)
  }

  ##' Checks if ... (dots) arguments are valid.
  ##' 
  ##' @param dots.names Character vector of names of ... (dots) arguments. Usually obtained with `names(as.list(...))`.
  ##' @param formals Character vector of names to match dots agains. Usually obtained with `names(formals(function_name))`.
  ##' @return TRUE if arguments are ok. FALSE if no arguments are provided (NULL or list())
  ##' 
  ##' @md 
  harmonize_is_ok_dots <- function(dots.names, formals) {
      if(harmonize_is_ok_type(dots.names
                            , type = "character"
                            , allow.na = FALSE)) {
          if(any(duplicated(dots.names))) {
              stop("Same name arguments used in ... (dots).")
          }
          is.in.formals <- function(name) {
              ifelse(name %in% formals
                   , TRUE
                   , stop("'", name, "' is not in '"
                        , paste(formals, collapse = ", "), "'"))
          }
          all(sapply(dots.names, is.in.formals))
      } else FALSE
  }
#+END_SRC


*** harmonize.x
:PROPERTIES:
:ID:       org:rjvdj9s0lei0
:END:
#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' Gets a vector to harmonize and puts it back.
  ##'
  ##' The function `harmonize.x` basically works as two functions depending whether the second optional parameter `inset.vector` is provided. If `inset.vector` is not provided the function returns a vector that we want to process (harmonize) from object `x` and inset it back to the original object later.  If `inset.vector` (harmonized vector) is provided the function returns updated `x`.
  ##' 
  ##' @param x an object
  ##' @param inset.vector a vector to inset. Optional. Default is NULL
  ##' @param x.col vector of interest in `x` object
  ##' @param x.col.update Update values in `x.col` column. Default is FALSE. If set `inset.append`, `inset.name` and `inset.suffix` are ignored. Also if set the default for `return.x.cols.all` will be set to TRUE.
  ##' @param x.rows Logical vector to filter records of interest. Default is NULL which means do not filter records
  ##' @param x.atomic.name If `x` is vector use this name for original column if it is in results. Default is "x". If `x` is table the name of `x.col` will be used.
  ##' @param inset.omitted.val If `x.rows` is set merge these values to the results. It should be a vector of length 1 or `nrow(x)`. If the value is NULL (default) then use values of `x.col`.
  ##' @param inset.append If set then put `inset.vector` as the last instead of first vector/column. Default is FALSE.
  ##' @param inset.suffix If `inset.name` is not set the use this as suffix (default is "harmonized"). If the name with the same suffix already exists in `return.x.cols` it will add counter at the end to avoid variables with the same names.
  ##' @param inset.name Use this name for the first column in results (harmonized names). Default is NULL, which means that either x.atomic.name if x is vector or original x.col name will be used with `inset.suffix` at the end.
  ##' @param return.x.cols If x is table, set the columns to cbind to the result table. Default is cbind all but the original (unharmonized) column (x.col).
  ##' @param return.x.cols.all Whether to bind all columns in x. Defaults depends on values of `x.col.update` and `inset.append`. If either is set then defaut values is TRUE otherwise FALSE. If set to TRUE by user the return.x.cols is ignored.
  ##'
  ##' @return Vector or data.table
  ##'
  ##' @md
  ##' @import magrittr stringr data.table
  ##' @export
  harmonize.x <- function(x
                        , inset.vector = NULL
                        , x.col = 1
                        , x.col.update = FALSE
                        , x.rows = NULL
                        , x.atomic.name = "x"
                        , inset.omitted.val = NULL
                        , inset.append = FALSE
                        , inset.suffix = "harmonized"
                        , inset.name = NA
                        , return.x.cols =
                            -ifelse(is.numeric(x.col), x.col, match(x.col, names(x)))
                        , return.x.cols.all = inset.append | x.col.update ) {
    ## ------------------------------
    if(is.null(inset.vector)) {
      ## if nothing was provided as x.vector then make and return one
      harmonize.x.check.args()
      harmonize_target_get(x, col = x.col, rows = x.rows)
    } else {
      ## if inset.vector is provided put it back to x according to settings
      harmonize.x.check.args()
      harmonize.x.inset.check.args()
      harmonize.x.inset()
    }
  }





  ## functions that only runs within harmonize.x
  ## --------------------------------------------------------------------------------

  ## Tests Arguments
  harmonize.x.check.args <- function(env = parent.frame()) {
    evalq({
      ## - check x.col
      if(harmonize_is_ok_col(x.col, x, required = TRUE)) {
        x.col %<>% ifelse(is.numeric(.), ., match(., names(x)))
      }
      ## - check x.rows
      if(!harmonize_is_ok_type(x.rows, harmonize_data_length(x), type = "logical")) {
        x.rows <- TRUE  # select all if x.rows NULL 
      }
    }, envir = env)
  }


  harmonize.x.inset.check.args <- function(env = parent.frame()) {
      evalq({
          ## - check inset.vector
          harmonize_is_ok_type(inset.vector
                             , x.length = if(isTRUE(x.rows)) harmonize_data_length(x)
                                          else sum(x.rows)
                             , type = c("atomic", "list"))
          ## - check inset.omitted.val
          if(!harmonize_is_ok_type(inset.omitted.val
                                 , x.length = c(1, harmonize_data_length(x))
                                 , type = "atomic")) {
              inset.omitted.val <- get_vector(x, x.col)
          } else if(length(inset.omitted.val) == 1) {
              inset.omitted.val %<>% defactor %>% rep(harmonize_data_length(x))
          } else {
              inset.omitted.val %<>% defactor
          }
          ## - check return.x.cols
          harmonize_is_ok_type(return.x.cols.all)
          ## return.x.cols.all could be TRUE if inset.append | x.col.update
          ## if return.x.cols.all is not set manually but return.x.cols is
          ## then respect return.x.cols
          if(return.x.cols.all && (!missing(return.x.cols.all) || missing(return.x.cols)))
              ## set return.x.cols to all
              return.x.cols <- 1:harmonize_data_width(x)
          else if(harmonize_is_ok_col(return.x.cols, x
                                    , allow.negative = TRUE
                                    , several.ok = TRUE))
              return.x.cols %<>% switch(is.numeric(.) + 1, match(., names(x)), .)
          else {
              ## set it to zero if it is null
              return.x.cols <- 0
          }
          ## - check inset.append
          harmonize_is_ok_type(inset.append)
          ## - check x.col.update
          harmonize_is_ok_type(x.col.update)
          if(x.col.update &&
             ((all(return.x.cols < 0) && (-x.col %in% return.x.cols)) ||
              (all(return.x.cols >= 0) && !(x.col %in% return.x.cols)))) {
              stop("'x.col.update' is set but 'x.col' is excluded by 'return.x.cols'")
          }
          ## - check names
          if(!x.col.update) {
              harmonize_is_ok_type(inset.name, x.length = 1
                                 , type = "character", allow.null = FALSE)
              if(inset.name %in% names(x)[return.x.cols]) {
                  stop("The harmonized column name: ", inset.name, " is alredy exists.")
              }
              harmonize_is_ok_type(inset.suffix, x.length = 1
                                 , type = "character"
                                 , allow.na = FALSE, allow.null = FALSE)
              harmonize_is_ok_type(x.atomic.name, x.length = 1
                                 , type = "character"
                                 , allow.na = FALSE, allow.null = FALSE)
          }
      }, envir = env)
  }

  ##' Gets a target vector to harmonize.
  ##'
  ##' @param data Input data. Can be vector, data.frame or a data.table
  ##' @param col Column of interest in the input `data`. The vector we would like to work with. This parameter is ignored if input `data` is a vector (checked by `is.atomic`)
  ##' @param rows Rows of interest
  ##'
  ##' @return A vector. Factors in imput `data` are converted to string.
  ##'
  ##' @md
  harmonize_target_get <- function(data, col, rows) {
      get_vector(data, col)[rows]
  }



  ## get_vector <- function(x, col, col_check = TRUE) {
  ##     if (is.atomic(x)) {
  ##         harmonize_defactor(x)
  ##     } else {
  ##         if(col_check) {
  ##             check_col(col, x, report_for_call = sys.call(which = -2))
  ##         }
  ##         harmonize_defactor(x[[col]])
  ##     }
  ## }

  ## binds to existing table
  harmonize.x.inset <- function(env = parent.frame()) {
      evalq({
          ## inset filtered rows (this makes list if inset.vector is list)
          inset.vector %<>% inset(inset.omitted.val, x.rows, .)
          ## inset inset.vector to x
          if(is.atomic(x) & isFALSE(return.x.cols == 1)) {
              inset.vector
          } else if(x.col.update) {
              x %>%
                defactor(conv2dt = "all") %>% 
                inset2(x.col, value = inset.vector) %>% 
                extract(., ,return.x.cols, with = FALSE)
          } else if(isTRUE(return.x.cols == 0)) {
              inset.vector
          } else {
            ## set harmonized name
            x.names <- if(is.atomic(x)) x.atomic.name else names(x)
            inset.name %<>%
                harmonize_eval_if_empty(
                    harmonize_add_suffix(x.names[x.col]
                                       , inset.suffix
                                       , x.names[return.x.cols])) %>%
                make.names
            ## (pre)append inset.vector to x
            x %<>% defactor(conv2dt = "all") # returns data.table
              inset.vector %>%
                  data.table %>%          # should make one column even if inset is list
                  set_names(inset.name) %>%
                  harmonize.x.cbind(x[, return.x.cols, with = FALSE], inset.append)
          }
      }, envir = env)
  }

  harmonize.x.cbind <- function(inset.vector, x, append = FALSE) {
    if(isTRUE(append))
      cbind(x, inset.vector)
    else
      cbind(inset.vector, x)
  }


  ## functions that only runs within get_vector and inset_vector
  ## --------------------------------------------------------------------------------

  ## Tests Arguments
  check_args_col_rows <- function() {
      .Deprecated("check_col")
      .Deprecated("check_rows")
      evalq({
          ## - check col
          if(harmonize_is_ok_col(col, x, required = TRUE)) {
              col %<>% ifelse(is.numeric(.), ., match(., names(x)))
          }
          ## - check rows
          if(!harmonize_is_ok_type(rows, harmonize_data_length(x), type = "logical")) {
              rows <- TRUE  # select all if rows NULL
          }
      }, envir = parent.frame())
  }
#+END_SRC

Tests:
#+BEGIN_SRC R
  ## harmonize.x tests
  ## ------------------------------
  
  ## debug(harmonize.x)
  ## undebug(harmonize.x)
  
  data.table(x.pro.30 = c(1,2,3,4)
           , y = c(7,8,9,0)
           , x.pro.5 = 0) %>%
    harmonize.x(c(5,5,5)
              , x.rows = c(T,T,F,T)
              , inset.suffix = "pro")
  
  data.frame(c(1,2,3,4)
           , c("7","8","9","a")) %>%
    harmonize.x(x.col = 2
              , x.rows = c(T,T,F,T))
  
  data.table(c(1,2,3,4)
           , c(7,8,9,0)) %>%
    harmonize.x(inset.vector = c(5,5,5)
              , x.rows = c(T,T,F,T)
              , inset.append = TRUE)
  
  
  
  data.table(c(1,2,3,4)
           , c(7,8,9,0)) %>%
    harmonize.x(inset.vector = NULL
              , x.rows = c(F,F,F,F)
              , inset.append = TRUE)
  ## rerutns
  ## numeric(0)
  
  c(1,2,3,4) %>%
    harmonize.x(inset.vector = NULL
              , x.rows = c(F,F,F,F)
              , inset.append = TRUE)
  
  
  data.frame(num = c(1,2,3,4)
           , str = c("7","8","9","a")
           , x.rows = c(T,T,F,T))  %>%
    harmonize.x(inset.vector = c(5,5,5)
              , x.col = "str"
              , x.rows = .$x.rows
              , inset.omitted.val = .$str
              , return.x.cols = -c(1, 3)
              , x.col.update = TRUE)
  
  
  ## error is expected
  data.frame(num = c(1,2,3,4)
           , str = c("7","8","9","a")
           , x.rows = c(F,F,F,F))  %>%
    harmonize.x(inset.vector = character(0)
              , x.col = "num"
              , x.rows = .$x.rows
              , return.x.cols = -c(1, 3)
              , x.col.update = TRUE)
  
  
  data.frame(num = c(1,2,3,4)
           , str = c("7","8","9","a")
           , x.rows = c(T,T,F,T))  %>%
    harmonize.x(inset.vector = c(5,5,0)
              , x.col = "str"
              , x.rows = .$x.rows
              , inset.omitted.val = .$str
              , return.x.cols = -c(1, 3)
              , x.col.update = TRUE)
  
  
  
  data.frame(num = c(1,2,3,4)
           , str = c("7","8","9","a")
           , x.rows = c(T,T,F,T))  %>%
    harmonize.x(inset.vector = c(5,5,0)
              , x.col = "str"
              , x.rows = .$x.rows
              , inset.omitted.val = .$str
              , return.x.cols = NULL
              , x.col.update = FALSE)
  
  
  
  ## testing lists
  data.table(x.pro.30 = list(c(1,2,3,4), 2,3,4)
           , y = c(7,8,9,0)
           , x.pro.5 = c(0,0,0,0)) %>%
    harmonize.x(x.rows = c(T,T,F,T)
              , inset.suffix = "pro")
#+END_SRC

**** Old version (before refactoring, bad example)              :noexport:
#+BEGIN_SRC R :tangle no
  ##' Gets vector, (harmonize it) and put it back.
  ##'
  ##' The function `harmonize.x` basically works as two functions depending whether the second optional parameter `x.inset` is provided. If `x.inset` is not provided the function returns a vector (x.vector) that we want to process (harmonize) from object `x` and inset it back to the original object.  If `x.inset` (harmonized x.vector) is provided the function returns updated `x` object with x.vector inserted/updated in it.
  ##' 
  ##' @param x an object
  ##' @param x.inset a vector to inset. Optional. Default is NULL
  ##' @param x.col vector of interest in `x` object
  ##' @param x.rows Logical vector to filter records to harmonize. Default is NULL which means do not filter records
  ##' @param x.rows.col Column that indicates which records to harmonize. If it is set then `x.rows` is ignored
  ##' @param x.vector.name If `x` is vector use this name for original column if it is in results. Default is "x". If `x` is table the name of `x.col` will be used.
  ##' @param x.harmonized.col Column in `x` where we want to put/update the `x.inset` vector. Default is NULL which means that we just put `x.inset` as a first vector/column and remove `x.col`. If set and `x.col` and `x.harmonized.col` are the same `x.col` wont be removed.
  ##' @param x.harmonized.col.update Update values in this column if `x.rows` or `x.rows.col` is set. If set `harmonized.omitted.val` is ignored.
  ##' @param harmonized.omitted.val If x.rows or x.rows.col is set. Use this value to fill the rest. Default is NA
  ##' @param harmonized.append If set then put `x.inset` as the last instead of first vector/column. Default is FALSE.
  ##' @param harmonized.name Use this name for the first column in results (harmonized names). Default is NULL, which means that either x.vector.name if x is vector or original x.col name will be used with `harmonized.suffix` at the end.
  ##' @param harmonized.suffix If `harmonized.name` is not set the use this as suffix (default is "harmonized"). If the name with the same suffix already exists in `return.x.cols` it will add counter at the end to avoid variables with the same names.
  ##' @param return.x.cols If x is table, set the columns to cbind to the result table. Default is -1, meaning cbind all but the first (original/unharmonized) column.
  ##' @param return.x.cols.all Whether to bind all columns in x. Default is FALSE. If set the return.x.cols is ignored
  ##'
  ##'
  ##' @return Vector or data.table
  ##'
  ##' @md
  ##' @import magrittr stringr data.table
  ##' @export
  harmonize.x <- function(x
                        , x.inset = NULL
                        , x.col = 1
                        , x.rows = NULL
                        , x.rows.col = NULL
                        , x.vector.name = "x"
                        , x.harmonized.col = NULL
                        , x.harmonized.col.update = TRUE
                        , harmonized.omitted.val = NA
                        , harmonized.append = FALSE
                        , harmonized.name = NA
                        , harmonized.suffix = "harmonized"
                        , return.x.cols =
                            -ifelse(is.numeric(x.col), x.col, match(x.col, names(x)))
                        , return.x.cols.all = FALSE) {
    x.is.atomic <- is.atomic(x)
    x.length <- if(x.is.atomic) length(x) else nrow(x)
    ## check x.col
    if(length(x.col) != 1)
      stop("x.col should be of length 1")
    if(!is.numeric(x.col) & !is.character(x.col))
      stop("x.col should be ethier numeric or character")
    ## check x.rows.col
    if(!is.null(x.rows.col)) {
      ## check if x[[x.rows.col]] is logical
      if(all(is.logical(x[[x.rows.col]]), na.rm = TRUE)) {
        x.rows <- x[[x.rows.col]]
      } else {
        stop("x[[x.rows.col]] should be logical type column!")
      }
    }
    ## check x.rows
    if(!is.null(x.rows)) {
      ## check if x.rows is logical
      if(is.logical(x.rows)) {
        ## check if x.rows has different length as x
        if(is.logical(x.rows) & length(x.rows) != x.length)
          stop("x.rows has different length as x (length/nrow)!")
        ## check whether all x.rows are FALSE
      } else stop("x.rows should be logical type!")
    }
    ## if nothing was provides as x.vector then make and return one
    if(is.null(x.inset)) {
      ## ------------------------------
      ## get vector to harmonize
      x %>%
        {if(x.is.atomic) . else .[[x.col]]} %>% 
        {if(is.null(x.rows)) . else .[x.rows]} %>%
        harmonize.defactor %>% return()
      ## ------------------------------
    } else {  # if x.inset is provided
      ## ------------------------------
      x.width <- if(x.is.atomic) 1 else ncol(x)
      x.names <- if(x.is.atomic) x.vector.name else names(x)
      ## check x.harmonized.col
      if(!is.null(x.harmonized.col))
        if(length(x.harmonized.col) != 1)
          stop("x.harmonized.col is wrong type, should be length 1")
        else if(x.is.atomic & x.harmonized.col != 1)
          stop("x is vector so the x.harmonized.col could only be 1")
        else if(is.numeric(x.harmonized.col) & x.harmonized.col > x.width)
          stop("Do not have x.harmonized.col in x. Check ncol(x).")
        else if(!is.numeric(x.harmonized.col) & !(x.harmonized.col %in% x.names))
          stop("Do not have x.harmonized.col in x. Check names(x).")
        else ## convert x.harmonized.col to numeric
          x.harmonized.col %<>% ifelse(is.numeric(.), ., match(., names(x)))
      ## harmonize.defactor and convert to data.table
      x %<>% {if(x.is.atomic) harmonize.defactor(.)
              else harmonize.defactor(as.data.table(.))}
      ## TODO: check return.x.cols...
      ## set return.x.cols
      if(length(return.x.cols) == 0) return.x.cols <- 0
      ## set harmonized name
      x.vector.name %<>%
        {if(x.is.atomic) .
         else names(x[,..x.col]) %>%
                ## remove suffix from name if it is already there..
                str_remove(paste0("\\.", harmonized.suffix, "(\\.\\d+$|$)"))}
      harmonized.name %<>%
        {if(is.na(.)) {
           if(return.x.cols.all)
             harmonize.add.suffix(x.vector.name
                                , harmonized.suffix
                                , x.names)
           else
             harmonize.add.suffix(x.vector.name
                                , harmonized.suffix
                                , x.names[return.x.cols])
         } else .}
      ## inset filtered rows
      x.inset %>% 
        {if(!is.null(x.rows))
           if(!is.null(x.harmonized.col))
             if(x.is.atomic)
               inset(x, x.rows, .)
             else
               inset(x[[x.harmonized.col]], x.rows, .)
           else
             inset(rep(harmonized.omitted.val, x.length), x.rows, .)
         else .} %>% 
        ## bind to existing table
        {if(return.x.cols.all |
            (x.is.atomic &
             ifelse(length(return.x.cols) == 1
                  , return.x.cols == 1
                  , FALSE))) {
           if(isTRUE(harmonized.append)) {
             cbind(x, data.table(.)) %>%
               setnames(c(x.names, harmonized.name))
           } else {
             cbind(data.table(.), x) %>%
               setnames(c(harmonized.name, x.names))
           }
         } else if(x.is.atomic) {
           .
         } else if(x.harmonized.col.update & !is.null(x.harmonized.col)) {
           x[[x.harmonized.col]] <- .
           ## do not remove x.col if it is the same as x.harmonized.col
           return.x.cols %<>%
             extract(. != -x.harmonized.col) %>%
             {if(length(.) == 0) 1:ncol(x) else .}
           as.data.table(x[,..return.x.cols])
         } else {
           if(isTRUE(harmonized.append)) {
             cbind(x[,..return.x.cols], data.table(.)) %>% 
               setnames(c(x.names[return.x.cols], harmonized.name))
           } else {
             cbind(data.table(.), x[,..return.x.cols]) %>% 
               setnames(c(harmonized.name, x.names[return.x.cols]))
           }
         }
        } %>% return()
      ## ------------------------------
    }
  }



  ## undebug(harmonize.x)

  ## tests
  ## ------------------------------
  ## data.table(x.pro.30 = c(1,2,3,4)
  ##          , y = c(7,8,9,0)
  ##          , x.pro.5 = 0) %>%
  ##   harmonize.x(c(5,5,5)
  ##             , x.rows = c(T,T,F,T)
  ##             , harmonized.suffix = "pro")

  ## data.frame(c(1,2,3,4)
  ##          , c("7","8","9","a")) %>%
  ##   harmonize.x(x.col = 2
  ##             , x.rows = c(T,T,F,T))

  ## data.table(c(1,2,3,4)
  ##          , c(7,8,9,0)) %>%
  ##   harmonize.x(x.inset = c(5,5,5)
  ##             , x.rows = c(T,T,F,T)
  ##             , harmonized.append = TRUE)


  ## data.table(c(1,2,3,4)
  ##          , c(7,8,9,0)) %>%
  ##   harmonize.x(x.inset = NULL
  ##             , x.rows = c(F,F,F,F)
  ##             , harmonized.append = TRUE)



  ## c(1,2,3,4) %>%
  ##   harmonize.x(x.inset = NULL
  ##             , x.rows = c(F,F,F,F)
  ##             , harmonized.append = TRUE)



  ## data.frame(num = c(1,2,3,4)
  ##          , str = c("7","8","9","a")
  ##          , x.rows = c(T,T,F,T))  %>%
  ##   harmonize.x(x.inset = c(5,5,5)
  ##             , x.col = "num"
  ##             , x.rows.col = "x.rows"
  ##             , x.harmonized.col = 1
  ##             , return.x.cols = -c(1, 3)
  ##             , x.harmonized.col.update = TRUE)


  ## data.frame(num = c(1,2,3,4)
  ##          , str = c("7","8","9","a")
  ##          , x.rows = c(F,F,F,F))  %>%
  ##   harmonize.x(x.inset = character(0)
  ##             , x.col = "num"
  ##             , x.rows.col = "x.rows"
  ##             , x.harmonized.col = 1
  ##             , return.x.cols = -c(1, 3)
  ##             , x.harmonized.col.update = TRUE)

  ## inset(c(1,2,3), c(F,F,F), Inf)
  ## is.null(Inf)
#+END_SRC
*** harmonize_options
:PROPERTIES:
:ID:       org:p323mg11m9j0
:END:

#+BEGIN_SRC R :tangle R/harmonize_options.r
  ##' Does nothing but stores (as its own default arguments) options that control vector handeling through harmonization process. These options are available in most harmonizer functions that accept `...` parameter.
  ##' 
  ##' @param col Column of interest (the one we need to harmonize) in the `x` object (if it is data.frame like).
  ##' @param rows Logical vector to filter records of interest. Default is NULL which means do not filter records.
  ##' @param omitted_rows_values If `rows` parameter is set then merge `omitted_rows_values` with the results (filtered by `rows`). Either single string or a character vector of length `nrow(x)`. If NULL (the default) then original values of `col` are merged with results.
  ##' @param output Where to inset retults (harmonized vector) in the `x` object. Default options is 'replace_col' which overwrides the `col` in `x` with results. Other options:
  ##' - 'omit' :: do not write results back to table (usually used when `append_copy` is set for temporary values)
  ##' - 'prepend_to_col' :: prepend to `col`
  ##' - 'append_to_col' :: append to `col`
  ##' - 'prepend_to_x' :: prepend to `x` data.frame like object
  ##' - 'append_to_x' :: append to `x` data.frame like object
  ##' @param name Use this name for the column with results (harmonized values). Default is NA, which means that either `name_for_x_atomic` if `x` is vector or original col name will be used with `name_suffix` at the end.
  ##' @param name_for_x_atomic If `x` is vector use this name for original column if it is in results. Default is "x". If `x` is table the name of `col` will be used.
  ##' @param name_suffix If `name` is not set the use this as suffix (default is "harmonized"). If the name with the same suffix already exists in `select_x_cols` it will add counter at the end to avoid variables with the same names.
  ##' @param append_copy Whether to append a copy of result vector to `x` object
  ##' @param append_copy_name_format How the append copy wiil be named
  ##' @param select_cols If x` object is table, set the columns to cbind to the result table. Default is cbind all but the original (unharmonized) column (col).
  ##' 
  ##' @return Always NULL. It does nothing.
  harmonize_options <- function(col = 1
                              , rows = NULL
                              , omitted_rows_values = NULL
                              , output = "replace_col"
                              , name = NULL
                              , name_for_x_atomic = "x"
                              , name_suffix = "_harmonized"
                              , append_copy = FALSE
                              , append_copy_name_format = "%name_harmonizing_%number_%procedure"
                              , select_cols = NULL) {
      ## do nothing
      return()
  }
#+END_SRC

*** check_harmonize_options
:PROPERTIES:
:ID:       org:5aj0v1y0lbj0
:END:

#+BEGIN_SRC R :tangle R/check_harmonize_options.r
  report_arg_checks <- function (collection
                               , which_call_to_report = -2L
                               , call_to_report = NULL) {
      checkmate::assertClass(collection, "AssertCollection")
      if (!collection$isEmpty()) {
          msgs <- paste("-", collection$getMessages())
          context <- "Harmonizer :: %i argument checks failed in '%s' call:"
          if(is.call(try(
              call <- sys.call(which_call_to_report)
            , silent = TRUE))) {
              call_to_report <- deparse1(call)
          }
          err = c("\n", strwrap(sprintf(context, length(msgs), call_to_report))
                , strwrap(msgs, indent = 4, exdent = 6))
          stop(simpleError(paste0(err, collapse = "\n"), call = sys.call(1L)))
      }
      invisible(TRUE)
  }

  check_col <- function(col, x
                      , which_call_to_report = -1L
                      , missing_ok = FALSE
                      , null_ok = FALSE) {
      assertion_fails <- checkmate::makeAssertCollection()
      checkmate::assert_multi_class(col, c("character", "numeric"), add = assertion_fails)
      if (is.character(col)) {
          checkmate::assert_multi_class(x, c("data.frame", "data.table"), add = assertion_fails)
          checkmate::assert_character(col
                                    , min.chars = 1
                                    , len = 1
                                    , any.missing = missing_ok
                                    , null.ok = null_ok
                                    , add = assertion_fails)
          checkmate::assert_choice(col
                                 , names(x)
                                 , null.ok = null_ok
                                 , add = assertion_fails)
      } else if(is.numeric(col)) {
          checkmate::assert_int(col
                              , lower = 1
                              , upper = x_length(x)
                              , na.ok = missing_ok
                              , null.ok = null_ok
                              , add = assertion_fails)
      }
      report_arg_checks(assertion_fails
                      , which_call_to_report)
  }






  check_x <- function(x, which_call_to_report = -1L) {
      assertion_fails <- checkmate::makeAssertCollection()
      checkmate::assert_multi_class(x, c("character", "data.frame", "data.table"), add = assertion_fails)
      report_arg_checks(assertion_fails
                      , which_call_to_report)
  }


  ##' Assumes that rows (if logical) are same length as x
  ##' @param rows either numeric of logical vector
  ##' @param x The object to harmonize
  ##' @param null_ok Whether NULL is valid value
  ##' @param na_ok Whether NA is valid value
  ##' @param which_call_to_report When reporting issues which function call to indicate for reference
  ##' @return nothing
  check_rows <- function(rows, x
                       , which_call_to_report = -1L
                       , null_ok = TRUE
                       , na_ok = FALSE) {
      assertion_fails <- checkmate::makeAssertCollection()
      checkmate::assert_multi_class(rows
                                  , classes = c("logical", "numeric")
                                  , null.ok = null_ok
                                  , add = assertion_fails)
      if(is.logical(rows)) {
          checkmate::assert_logical(rows
                                  , any.missing = na_ok
                                  , len = x_length(x)
                                  , null.ok = null_ok
                                  , add = assertion_fails)
      } else if(is.numeric(rows)) {
          checkmate::assert_integerish(rows
                                     , any.missing = na_ok
                                     , min.len = 1
                                     , max.len = x_length(x)
                                     , unique = TRUE
                                     , lower = 1
                                     , upper = x_length(x)
                                     , null.ok = null_ok
                                     , add = assertion_fails)
      }
      report_arg_checks(assertion_fails
                      , which_call_to_report)
  }


  check_harmonize_options <- function(dots
                                    , x
                                    , which_call_to_report = -1L
                                    , check_name_duplicates = FALSE) {
      ## check own arguments
      checkmate::assert_int(which_call_to_report)
      checkmate::assert_flag(check_name_duplicates)
      ## check harmonize_options
      assertion_fails <- checkmate::makeAssertCollection()
      with(dots, {
          ## check x
          check_x(x, which_call_to_report)
          ## check 'col'
          if(!is.atomic(x)) {
              check_col(col, x, which_call_to_report)
          }
          ## check 'rows'
          check_rows(rows, x, which_call_to_report)
          ## check 'omitted_rows_values'
          if(length(omitted_rows_values) == 1) {
              checkmate::assert_string(
                             omitted_rows_values
                           , na.ok = TRUE
                           , add = assertion_fails)
          } else {
              checkmate::assert_character(
                             omitted_rows_values
                           , null.ok = TRUE
                           , len = x_length(x)
                           , add = assertion_fails)
          }
          ## check 'placement'
          checkmate::assert_choice(
                         output
                       , choices = c(
                             "replace_col"
                           , "prepend_to_col"
                           , "append_to_col"
                           , "prepend_to_x"
                           , "append_to_x"
                           , "omit")
                       , add = assertion_fails)
          ## check 'name'
          checkmate::assert_string(
                         name
                       , null.ok = TRUE
                       , add = assertion_fails)
          if(check_name_duplicates && !is.null(name) && !is.atomic(x)) {
              checkmate::assert_names(
                             name
                           , type = "ids"
                           , what = "colnames"
                           , disjunct.from = names(x)
                           , add = assertion_fails)
          }
          ## check 'name_for_x_atomic'
          checkmate::assert_string(
                         name_for_x_atomic
                       , add = assertion_fails)
          checkmate::assert_names(
                         name_for_x_atomic
                       , type = "ids"
                       , what = "colnames"
                       , add = assertion_fails)
          ## check 'name_suffix'
          checkmate::assert_string(
                         name_suffix
                       , add = assertion_fails)
          ## check if col_name + 'name_suffix' is distinct from names(x)
          if(check_name_duplicates && !is.atomic(x) && is.null(name)) {
              checkmate::assert_names(
                             paste0(names(x)[[col]], name_suffix)
                           , type = "ids"
                           , what = "colnames"
                           , disjunct.from = names(x)
                           , add = assertion_fails)
          }
          ## check 'append_copy'
          checkmate::assert_flag(
                         append_copy
                       , add = assertion_fails)
          ## check 'append_copy_name_format'
          checkmate::assert_string(
                         append_copy_name_format
                       , min.chars = 1
                       , add = assertion_fails)
      })
      report_arg_checks(assertion_fails
                      , which_call_to_report)
  }
  #+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_check_harmonize_options.r
  require("data.table")

  check_harmonize_options <- harmonizer:::check_harmonize_options
  get_dots <- harmonizer:::get_dots
  harmonize_options <- harmonizer:::harmonize_options


  testing_check_arguments <- function(x, ...) {
      dots <- get_dots(harmonize_options
                     , search_while_calls_have_formals = c("x", "...")
                     , search_up_nframes = 5L
                     , search_up_to_call = c("harmonize", "harmonizer::harmonize"))
      check_harmonize_options(dots, x)
      return(TRUE)
  }

  expect_true(testing_check_arguments(data.table(a = c(1,2), b = c("a", "b")), name = "c"))
  ## bad output name
  expect_error(testing_check_arguments(data.table(a = c(1,2), b = c("a", "b")), output = "omitted"))


  testing_check_arguments <- function(x, ...) {
      dots <- get_dots(harmonize_options
                     , search_while_calls_have_formals = c("x", "...")
                     , search_up_nframes = 5L
                     , search_up_to_call = c("harmonize", "harmonizer::harmonize"))
      check_harmonize_options(dots, x
                            , check_name_duplicates = TRUE)
      return(TRUE)
  }


  ## taken name
  expect_error(testing_check_arguments(data.table(a = c(1,2), b = c("a", "b")), name = "b"))
  ## testing append copy prefix (taken name)
  expect_error(testing_check_arguments(data.table(a = c(1,2), b = c("a", "b"), a_harmonized = TRUE)))
  ## test rows
  expect_error(testing_check_arguments(data.table(a = c(1,2), b = c("a", "b")), rows = c(1,1)))
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_check_utils.r
  ## test col checks
  check_col <- harmonizer:::check_col

  fun <- function(col, x) {
      check_col(col, x)
      return(x[[col]])
  }


  expect_error(fun(list("5"), c("1" = "1","3" = 5)))
  expect_error(fun("5", c("1" = "1","3" = 5)))
  expect_error(fun(4, c("1" = "1","3" = 5)))
  expect_error(fun(c(1,2), c("1" = "1","3" = 5)))
  expect_equal(fun(2, c("1" = "1","3" = 5)), "5")





  ## test rows check
  check_rows <- harmonizer:::check_rows

  fun <- function(rows, x) {
      check_rows(rows, x)
      return(x[rows])
  }

  expect_error(fun(list("5"), c("1" = "1","3" = 5)))
  expect_error(fun("5", c("1" = "1","3" = 5)))
  expect_error(fun(4, c("1" = "1","3" = 5)))
  expect_error(fun(c(2,2), c("1" = "1","3" = 5))) # duplicates
  expect_equal(fun(c(1,2), c("1" = "1","3" = 5)), c("1" = "1","3" = 5))
  expect_equal(fun(2, c("1" = "1","3" = 5)), c("3" = "5"))







  ## test x checks
  check_x <- harmonizer:::check_x

  expect_error(check_x(list(1,2,3)))
  expect_error(check_x(1))
  expect_equal(check_x(c("1", 2, 3)), TRUE)


  ## ## test
  ## test.col <- 2
  ## harmonize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)))
  ## test.col <- 4
  ## harmonize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)))
  ## test.col <- "drink"
  ## harmonize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)))
  ## test.col <- "food"
  ## harmonize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)))
  ## test.col <- NA
  ## harmonize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)))
  ## test.col <- NULL
  ## harmonize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)))
  ## test.col <- NULL
  ## harmonize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE)
  ## test.col <- c("nu", "coffee")
  ## harmonize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE)
  ## test.col <- c(1,2)
  ## harmonize.is.ok.col(test.col, data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE)
  ## test.col <- c(1,3,0)
  ## harmonize.is.ok.col(test.col,  data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE, allow.negative = TRUE, allow.zero = TRUE)
  ## harmonize.is.ok.col(test.col,  data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE, allow.negative = TRUE, allow.zero = TRUE, several.ok = FALSE)
  ## test.col <- -c(1,2)
  ## test.col <- c(1,-2)
  ## harmonize.is.ok.col(test.col,  data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE, allow.negative = TRUE, allow.zero = TRUE)

  ## test.col <- c(1,3)
  ## harmonize.is.ok.col(test.col,  data.frame(nu = 1:5, NA, drink = rep("coffee", 5)), required = TRUE, allow.negative = TRUE, allow.zero = TRUE, ban.values = c(3,4,5))




  ## test
  ## test.arg <- FALSE
  ## harmonize.is.ok.type(test.arg)
  ## test.arg <- c(1,2,3,4,NA)
  ## harmonize.is.ok.type(test.arg)
  ## test.arg <- c(1,2,3,4,NA)
  ## harmonize.is.ok.type(test.arg, type = "numeric")
  ## test.arg <- c(T,T,F,T,NA)
  ## harmonize.is.ok.type(test.arg)
  ## test.arg <- c(NA, NA)
  ## harmonize.is.ok.type(test.arg, type = "numeric")
  ## test.arg <- NULL
  ## harmonize.is.ok.type(test.arg, type = "numeric")
  ## test.arg <- NA
  ## harmonize.is.ok.type(test.arg)
  ## test.arg <- list(1,2,3,NULL)
  ## harmonize.is.ok.type(test.arg, type = "list")
  ## test.arg <- list(1,2,3,NULL)
  ## harmonize.is.ok.type(test.arg, type = c("list", "numeric"))




  ## ## test
  ## harmonize.is.ok.dots(names(list(x.col = 4, x.col.update = FALSE))
  ##                      , names(formals("harmonize.x"))[-c(1:2)] )

  ## harmonize.is.ok.dots(names(list())
  ##                      , names(formals("harmonize.x"))[-c(1:2)] )

  ## harmonize.is.ok.dots(c(NA, NA, 1)
  ##                      , names(formals("harmonize.x"))[-c(1:2)] )

  ## harmonize.is.ok.dots(NULL
  ##                      , names(formals("harmonize.x"))[-c(1:2)] )
#+END_SRC

*** get_harmonize_options
:PROPERTIES:
:ID:       org:y3obsm80daj0
:END:

#+BEGIN_SRC R :tangle R/get_harmonize_options.r
  ##' Gets `harmonize_options` at point with consistent updates up through calling stack.
  ##'
  ##' Limited to max stack of 3 calls and calls that include at least `data` and `...` formals (`harmonizer` functions specific) up to `.GlobalEnv` or `harmonize` call.
  ##' 
  ##' @return Returns list of updated arguments specified in `harmonize_options` function
  ##' 
  ##' 
  ##' @md 
  get_harmonize_options <- function() {
      evalq({
          get_dots(harmonize_options
                 , search_while_calls_have_formals = c("x", "...")
                 , search_up_nframes = 5L
                 , search_up_to_call = c("harmonize", "harmonizer::harmonize")
                 , skip_checks_for_parent_call = FALSE)
      }, envir = parent.frame())
  }


  get_col_and_rows <- function() {
      evalq({
          get_dots(harmonize_options
                 , select_args = c("col", "rows")
                 , search_while_calls_have_formals = c("x", "...")
                 , search_up_nframes = 5L
                 , search_up_to_call = c("harmonize", "harmonizer::harmonize")
                 , skip_checks_for_parent_call = FALSE)
      }, envir = parent.frame())
  }

#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_get_harmonize_options.r
  ## hack to make functions available in the environment
  harmonize_options <- harmonizer:::harmonize_options
  ## I do not test get_harmonize_options directly (and I will not use it in general) because it referes to the parent environment where internal functions are unknown

  expect_equal(harmonizer:::get_dots(harmonize_options
                                   , search_while_calls_have_formals = c("x", "...")
                                   , search_up_nframes = 5L
                                   , search_up_to_call = c("harmonize", "harmonizer::harmonize")
                                   , skip_checks_for_parent_call = FALSE)
             , as.list(formals("harmonize_options")))

  harmonize_test <- function (x, ...) harmonizer:::get_dots(harmonize_options
                                                          , search_while_calls_have_formals = c("x", "...")
                                                          , search_up_nframes = 5L
                                                          , search_up_to_call = c("harmonize", "harmonizer::harmonize")
                                                          , skip_checks_for_parent_call = FALSE)

  ## should update defauls
  expect_equal(harmonize_test()$col, 1)
  expect_equal(harmonize_test(col = 2)$col, 2)

  harmonize_test <- \(x, col = 2, ...) harmonizer:::get_dots(harmonize_options
                                   , search_while_calls_have_formals = c("x", "...")
                                   , search_up_nframes = 5L
                                   , search_up_to_call = c("harmonize", "harmonizer::harmonize")
                                   , skip_checks_for_parent_call = FALSE)

  expect_equal(harmonize_test()$col, 2)
  expect_equal(harmonize_test(col = 3)$col, 3)

  ## Condkitioning on checking arguments (formals) in calls 

  ## should not update defauls (with skip_checks_for_parent_call = TRUE)
  harmonize_test_1 <- \() harmonizer:::get_dots(harmonize_options
                                   , search_while_calls_have_formals = c("x", "...")
                                   , search_up_nframes = 5L
                                   , search_up_to_call = c("harmonize", "harmonizer::harmonize")
                                   , skip_checks_for_parent_call = FALSE)
  harmonize_test_2 <- \(x, col = 123) harmonize_test_1()
  expect_equal(harmonize_test_2()$col, 1)

  harmonize_test_1 <- \() harmonizer:::get_dots(harmonize_options
                                   , search_while_calls_have_formals = c("x", "...")
                                   , search_up_nframes = 5L
                                   , search_up_to_call = c("harmonize", "harmonizer::harmonize")
                                   , skip_checks_for_parent_call = FALSE)
  harmonize_test_2 <- \(col = 123, ...) harmonize_test_1()
  expect_equal(harmonize_test_2()$col, 1)


  ## should not update defauls (with skip_checks_for_parent_call = FALSE)
  harmonize_test <- \(x, col = 123) harmonizer:::get_dots(harmonize_options
                                   , search_while_calls_have_formals = c("x", "...")
                                   , search_up_nframes = 5L
                                   , search_up_to_call = c("harmonize", "harmonizer::harmonize")
                                   , skip_checks_for_parent_call = FALSE)
  expect_equal(harmonize_test()$col, 1)

  harmonize_test <- \(col = 123, ...) harmonizer:::get_dots(harmonize_options
                                   , search_while_calls_have_formals = c("x", "...")
                                   , search_up_nframes = 5L
                                   , search_up_to_call = c("harmonize", "harmonizer::harmonize")
                                   , skip_checks_for_parent_call = FALSE)
  expect_equal(harmonize_test()$col, 1)




  ## should update defauls
  harmonize_test <- \(x, col = 123, ...) {
      harmonize_ <- \(x, ...) harmonizer:::get_dots(harmonize_options
                                   , search_while_calls_have_formals = c("x", "...")
                                   , search_up_nframes = 5L
                                   , search_up_to_call = c("harmonize", "harmonizer::harmonize")
                                   , skip_checks_for_parent_call = FALSE)
      harmonize_() 
  }
  expect_equal(harmonize_test()$col, 123)

  ## should not update defauls
  harmonize_test <- \(x, col = 123, ...) {
      harmonize <- \(x, ...) harmonizer:::get_dots(harmonize_options
                                   , search_while_calls_have_formals = c("x", "...")
                                   , search_up_nframes = 5L
                                   , search_up_to_call = c("harmonize", "harmonizer::harmonize")
                                   , skip_checks_for_parent_call = FALSE)
      harmonize() 
  }
  expect_equal(harmonize_test()$col, 1)
#+END_SRC

*** get_vector

#+BEGIN_SRC R :tangle R/get_vector.r
  ##' Gets vector by column and defactor if needed. Optionaly one can
  ##' provide a fallback_value which will be returned if col is not
  ##' specified.
  ##'
  ##' @param x Input data. Can be vector, data.frame or a data.table
  ##' @param col Column of interest in the input data `x`. The vector we
  ##'     would like to work with. Ignored if input `x` is a atomic
  ##'     vector.
  ##' @param rows Rows of interest
  ##' @param choices Optional set of choices that return value should be
  ##'     subset of. Do no check if it is NULL.
  ##' @param fallback_value If col is NULL then return this value (but
  ##'     see `fallback_value_supersedes` argument). Also check if it is
  ##'     a character vector and same lenght as x. If it is of length 1
  ##'     then replicate it to match x's length.
  ##' @param fallback_value_supersedes A bolean toggle. When set col is
  ##'     ignored when fallback_value is provided. Otherwise (the
  ##'     default) if col is provided then fallback_value is ignored.
  ##' @param fallback_value_any_missing Toggle check if missing values
  ##'     are allowed in fallback_value
  ##' @param fallback_value_ensure_length Toggle if fallback_value
  ##'     should we make it same length as `x`
  ##' @param check_x_col_rows Toggle wheather to use check_x, check_col,
  ##'     check_rows?
  ##' @param which_call_to_report Which call to report if argument
  ##'     checks fail.
  ##' @return A vector. Factors in imput `data` are converted to string.
  ##'
  ##' @md
  get_vector <- function(x, col
                       , rows = NULL
                       , choices = NULL
                       , fallback_value = NULL
                       , fallback_value_supersedes = FALSE
                       , fallback_value_any_missing = TRUE
                       , fallback_value_ensure_length = TRUE
                       , check_x_col_rows = TRUE
                       , which_call_to_report = -1L) {
      assertion_fails <- checkmate::makeAssertCollection()
      ## arg checks
      if (check_x_col_rows) check_x(x, which_call_to_report)
      checkmate::assert_flag(fallback_value_supersedes, add = assertion_fails)
      checkmate::assert_flag(fallback_value_any_missing, add = assertion_fails)
      checkmate::assert_flag(fallback_value_ensure_length, add = assertion_fails)
      ## get vector
      if ((fallback_value_supersedes || is.null(col))
          && !is.null(fallback_value)) {
          ## check choices
          if (!is.null(choices)) {
              checkmate::assert_subset(fallback_value
                                     , choices = choices
                                     , fmatch = TRUE
                                     , add = assertion_fails)
          }
          ## get fallback vector
          if (fallback_value_ensure_length &&
              length(fallback_value) == 1) {
              checkmate::assert_string(fallback_value
                                     , na.ok = fallback_value_any_missing
                                     , add = assertion_fails)
              v <- rep(fallback_value, x_length(x))
          } else {
              checkmate::assert_character(fallback_value
                                        , any.missing = fallback_value_any_missing
                                        , len = x_length(x)
                                        , add = assertion_fails)
              v <- fallback_value
          }
      } else {
          ## get column
          if (is.atomic(x)) {
              v <- defactor(x)
          } else {
              if (check_x_col_rows) check_col(col, x, which_call_to_report)
              v <- defactor(x[[col]])
          }
          ## check choices
          if (!is.null(choices)) {
              checkmate::assert_subset(v
                                     , choices = choices
                                     , fmatch = TRUE
                                     , .var.name =
                                           paste0("x[[", checkmate::vname(col), "]]")
                                     , add = assertion_fails)
          }
      }
      ## select rows
      if (!is.null(rows)) {
          if (check_x_col_rows) check_rows(rows, x, which_call_to_report = which_call_to_report)
          v <- v[rows]
      }
      report_arg_checks(assertion_fails, which_call_to_report)
      return(v)
  }
  #+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_get_vector.r
  get_vector <- harmonizer:::get_vector

  ## missing col
  expect_error(get_vector(c("a", "b", "c")))

  ## select rows
  expect_equal(
      get_vector(c("a", "b", "c"), 1, rows = c(1,3))
    , c("a", "c"))

  ## select col
  expect_equal(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(2, rows = c(1,3))
    , c("a", "c"))

  ## fallback
  expect_equal(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(2, rows = c(1,3), fallback_value = c("x"))
    , c("a", "c"))


  expect_equal(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(2, rows = c(1,3)
               , fallback_value = c("x")
               , fallback_value_supersedes = TRUE)
    , c("x", "x"))

  expect_equal(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(NULL, rows = c(1,3)
               , fallback_value = c("x"))
    , c("x", "x"))

  expect_equal(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(NULL, rows = c(1,3)
               , fallback_value = c("x", "y", "z"))
    , c("x", "z"))

  ## choises
  expect_error(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(NULL, rows = c(1,3)
               , fallback_value = c("x")
               , choices = "a"
               , fallback_value_supersedes = TRUE))

  expect_error(
      data.table(NA
               , c("a", "b", "c")
               , c(1,2,3)) |>
      get_vector(2, rows = c(1,3)
               , choices = "x"))

#+END_SRC

*** get_target & inset_target
:PROPERTIES:
:ID:       org:77wbsm80daj0
:END:
#+BEGIN_SRC R :tangle R/handel_target.r
  get_col_as_number <- function(col, x) {
      if(is.character(col)) {
          which(names(x) %in% col)
      } else {
          col
      }
  }

  make_target_name <- function(col, x, name, name_suffix) {
      if(!is.null(name)) {
          return(name)
      } else {
          return(paste0(names(x)[col], name_suffix))
      }
  }

  infer_post_inset_col_from_pre_inset_col <- function(col, x, output) {
      if(is.character(col)) {
          which(names(x) %in% col)
      } else {
          switch(
              output
            , replace_col = col
            , append_to_col = col
            , prepend_to_col = col + 1
            , append_to_x = col
            , prepend_to_x = col + 1)
      }
  }

  infer_if_post_inset_col_possible <- function(col, x, output) {
      col <- get_col_as_number(col, x)
      switch(
          output
        , replace_col = TRUE
        , append_to_col = ifelse(col == ncol(x), FALSE, TRUE)
        , prepend_to_col = ifelse(col == 1, FALSE, TRUE)
        , append_to_x = ifelse(col == ncol(x), FALSE, TRUE)
        , prepend_to_x = ifelse(col == 1, FALSE, TRUE))
  }


  infer_moving_target_from_post_inset_col <- function(col, x, output, as_name = FALSE) {
      col <- get_col_as_number(col, x)
      return_col <- switch(
          output
        , replace_col = col
        , append_to_col = col + 1
        , prepend_to_col = col - 1
        , append_to_x = ncol(x)
        , prepend_to_x = 1)
      if(as_name) {
          names(x)(return_col)
      } else {
          return_col
      }
  }


  ## this assumes that nothing else was never added...
  infer_moving_target_from_pre_inset_col <- function(col, x, output, as_name = FALSE) {
      col <- get_col_as_number(col, x)
      return_col <- switch(
          output
        , replace_col = col
        , append_to_col = col + 1
        , prepend_to_col = col
        , append_to_x = ncol(x)
        , prepend_to_x = 1)
      if(as_name) {
          names(x)(return_col)
      } else {
          return_col
      }
  }

  ## assume that other stuff is always append to x or col so inference will keep working
  infer_moving_target_from_names <- function(dots, x
                                           , return_null_for_new_col = FALSE
                                           , return_name_for_new_col = FALSE) {
      with(dots, {
          if(output == "replace_col") return(get_col_as_number(col, x))
          if(infer_if_post_inset_col_possible(col, x, output)) {
              target_name_generated <-
                  infer_post_inset_col_from_pre_inset_col(col, x, output) |>
                  make_target_name(x, name, name_suffix)
              if(target_name_generated %in% names(x)) {
                  ## case of subsequent calls
                  return(get_col_as_number(target_name_generated, x))
              }
          }
          if(return_null_for_new_col) return(NULL)
          if(return_name_for_new_col) return(make_target_name(col, x, name, name_suffix))
          get_col_as_number(col, x)
      })
  }




  ##' Gets a target vector to harmonize.
  ##'
  ##' @param data Input data. Can be vector, data.frame or a data.table
  ##' @param col Column of interest in the input `data`. The vector we would like to work with. This parameter is ignored if input `data` is a vector (checked by `is.atomic`)
  ##' @param rows Rows of interest
  ##' @param ... Ignored arguments that are meant for `inset_vector`
  ##' @return A vector. Factors in imput `data` are converted to string.
  ##'
  ##' @md
  get_target <- function(x, return_null_for_new_col = FALSE, ...) {
      with(dots <- get_harmonize_options(), {
          ## check arguments
          check_harmonize_options(dots, x)
          col <- infer_moving_target_from_names(dots, x, return_null_for_new_col)
          if(is.null(col)) return(NULL)
          get_vector(x, col, rows, check_x_col_rows = FALSE)
      })
  }



  format_append_copy <- function(format, name = "") {
      procedure_number <- 
          get0("harmonizer_harmonize_procedure_number", ifnotfound = "", envir = parent.frame())
     procedure_name <-
          get0("harmonizer_harmonize_procedure_name", ifnotfound = "", envir = parent.frame())
      lowdash_procedure_number <-
          ifelse(procedure_number == "", "", paste0("_", procedure_number))
      lowdash_procedure_name <-
          ifelse(procedure_name == "", "", paste0("_", procedure_name))
      lowdash_name <- ifelse(name == "", "", paste0("_", name))
      name_lowdash <- ifelse(name == "", "", paste0(name, "_"))
      stringi::stri_replace_all_fixed(format
                                    , pattern = c("{col_name}", "{_col_name}", "{col_name_}"
                                                , "{procedure_number}", "{_procedure_number}"
                                                , "{procedure_name}", "{_procedure_name}")
                                    , replacement = c(name, lowdash_name, name_lowdash
                                                     , procedure_number, lowdash_procedure_number
                                                     , procedure_name, lowdash_procedure_name)
                                    , vectorise_all = FALSE)
  }





  ##' Insets target vector back to input object (`x`)
  ##' 
  ##' @param vector Character vector to inset into the `x` object
  ##' @param x Data to harmonize. Character vector or data.frame or
  ##'     data.table
  ##' @param omitted_rows_values_for_new_col Alternative value
  ##'     `omitted_rows_values` to use in case we create new column in
  ##'     x. For example, it is use in insetting codes to avoid the
  ##'     default `omitted_rows_values` use initial `col` in which case
  ##'     codes will be mixed with input values
  ##' @param allow_na_in_vector Whether to allow NA in inset vector
  ##' @param which_call_to_report System call number (e.g., -2L) to
  ##'     include in report if arguments checks fails
  ##' 
  ##' @return Data.table or character vector
  ##' @inheritDotParams harmonize_options
  inset_target <- function(vector, x
                         , omitted_rows_values_for_new_col = NULL
                         , allow_na_in_vector = TRUE
                         , which_call_to_report = -5L
                         , ...) {
      vector <- defactor_vector(vector)
      with(dots <- get_harmonize_options(), {
          ## check harmonize_options
          check_harmonize_options(dots, x)
          assertion_fails <- checkmate::makeAssertCollection()
          ## -----
          ## inset omitted_rows_values if needed
          ## -----
          checkmate::assert_multi_class(vector
                                      , classes = c("list", "character", "logical", "numeric")
                                      , add = assertion_fails)
          if(!is.null(rows)
             && ((is.logical(rows) && !all(rows))
                 || (is.numeric(rows) && !setequal(rows, 1:x_length(x))))) {
              ## check vector lenth
              getFromNamespace(paste0("assert_", class(vector)), "checkmate")(
                  vector
                , len = ifelse(is.numeric(rows), length(rows), sum(rows))
                , any.missing = allow_na_in_vector
                , add = assertion_fails
              )
              report_arg_checks(assertion_fails, which_call_to_report)
              ## process `omitted_rows_values`
              omitted_rows_values_col <-
                  infer_moving_target_from_names(
                      dots
                    , x
                    , return_null_for_new_col =
                          !is.null(omitted_rows_values_for_new_col))
              if(is.null(omitted_rows_values_col) &&
                 is.null(omitted_rows_values)) {
                  omitted_rows_values <- omitted_rows_values_for_new_col
              }
              omitted_rows_values <-
                  get_vector(x
                           , col = omitted_rows_values_col
                           , fallback_value = omitted_rows_values
                           , fallback_value_supersedes = TRUE
                           , check_x_col_rows = FALSE)
              ## inject ommited rows
              vector <- `[<-`(omitted_rows_values, rows, vector)
          } else {
              ## just check the vector length
              getFromNamespace(paste0("assert_", class(vector)), "checkmate")(
                  vector
                , len = x_length(x)
                , any.missing = allow_na_in_vector
                , add = assertion_fails
              )
              report_arg_checks(assertion_fails, which_call_to_report)
              if(is.numeric(rows)) {
                  ## case of permutations for same length
                  vector <- vector[rows]
              }
          }
          ## -----
          ## inset full vector
          ## -----
          if(output != "omit") {
              if(is.atomic(x) && output == "replace_col") {
                  ## just replace x if it is atomic
                  x <- vector
              } else {
                  x <- defactor(x, conv2dt = "all")
                  width_pre_inset <- x_width(x)
                  col_post_inset <- infer_post_inset_col_from_pre_inset_col(col, x, output)
                  col_or_name_if_new <-
                      infer_moving_target_from_names(dots, x, return_name_for_new_col = TRUE)
                  ## fuckin data.table syntax is so cryptic
                  x[, (col_or_name_if_new) := vector]
                  ## now if we added new col
                  if(x_width(x) == width_pre_inset + 1) {
                      ## if new col was added place last col into target posision
                      target <- infer_moving_target_from_post_inset_col(col_post_inset, x, output)
                      cols_nums <-
                          1:width_pre_inset |>
                          append(width_pre_inset + 1, after = target - 1)
                      data.table::setcolorder(x, cols_nums)
                  }
              }
          }
          ## -----
          ## apped copy
          ## -----
          if(append_copy) {
              x <- defactor(x, conv2dt = "all")
              col_post_inset <- infer_post_inset_col_from_pre_inset_col(col, x, output)
              append_copy_name <- format_append_copy(append_copy_name_format, name = names(x)[col_post_inset])
              checkmate::assert_names(append_copy_name, add = assertion_fails)
              report_arg_checks(assertion_fails, which_call_to_report)
              x[, (append_copy_name) := vector]
          }
          report_arg_checks(assertion_fails, which_call_to_report)
          return(x)
      })
  }
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_format_append_copy.r
  format_append_copy <- harmonizer:::format_append_copy

  expect_equal({
      harmonizer_harmonize_procedure_number <- 6
      harmonizer_harmonize_procedure_name <- "nber_replacement"
      "{col_name_}harmonizing{_procedure_number}{_procedure_name}" |>
          format_append_copy("col")
  }
  , "col_harmonizing_6_nber_replacement")
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_get_target.r
  require("data.table")

  get_target <- harmonizer:::get_target

  expect_equal(
      data.table(x.pro.30 = list(c(1,2,3,4), 2,3,4)
               , y = c(7,8,9,0)
               , x.pro.5 = c(0,0,0,0)) |>
      get_target(rows = c(T,T,F,T))
    , list(c(1, 2, 3, 4), 2, 4))

  expect_equal(
      data.frame(c(1,2,3,4)
               , c("7","8","9","a")) |>
      get_target(col = 2
               , rows = c(T,T,F,T))
    , c("7", "8", "a"))


  ## test output

  expect_equal(
      data.frame(x = c(1,2,3,4)
               , x_harmonized = c("7","8","9","a")) |>
      get_target(col = 1
               , rows = c(T,T,F,T)
               , output = "append_to_col")
    , c("7", "8", "a"))

  expect_equal(
      data.frame(x = c(1,2,3,4)
               , aaa = c("7","8","9","a")) |>
      get_target(col = 1
               , rows = c(T,T,F,T)
                 , name = "aaa"
               , output = "append_to_col")
    , c("7", "8", "a"))


  expect_equal(
  data.frame(x_harmonized = c(1,2,3,4)
               , x = c("7","8","9","a")) |>
      get_target(col = 1
               , rows = c(T,T,F,T)
               , output = "prepend_to_col")
    , c(1,2,4))



  expect_equal(
      data.frame(x = c(1,2,3,4)
               , y = TRUE
               , x_harmonized = c("7","8","9","a")) |>
      get_target(col = 1
               , rows = c(T,T,F,T)
               , output = "append_to_x")
    , c("7", "8", "a"))


  expect_equal(
      data.frame(x_harmonized = c(1,2,3,4)
               , y = TRUE
               , x = c("7","8","9","a")) |>
      get_target(col = 2
               , rows = c(T,T,F,T)
               , output = "prepend_to_x")
    , c(1,2,4))
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_inset_target.r
  require("data.table")

  inset_target <- harmonizer:::inset_target


  ## test vectors
  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , c("1",2,3,4,5))
    , c("a", "b", "c", "d", "e"))


  expect_equal(
      inset_target(c("a", "b",  "d", "e")
                 , c("1",2,3,4,5)
                 , rows = c(1,2,4,5))
    , c("a", "b", "3", "d", "e"))


  ## test output
  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j")))
    , data.table(c1 = c("a", "b", "c", "d", "e"), x = c("x", "y", "z", "i", "j")))

  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , output = "prepend_to_col")
      , data.table(c1_harmonized = c("a", "b", "c", "d", "e"), c1 = c(1, 2, 3, 4, 5), x = c("x", "y", "z", "i", "j")))


  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , output = "append_to_col")
    , data.table(c1 = c(1, 2, 3, 4, 5), c1_harmonized = c("a", 
                                                          "b", "c", "d", "e"), x = c("x", "y", "z", "i", "j")))


  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , output = "append_to_x")
    , data.table(c1 = c(1, 2, 3, 4, 5), x = c("x", "y", "z", "i", 
                                              "j"), c1_harmonized = c("a", "b", "c", "d", "e")))

  ## test omited values

  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j")))
    , data.table(c1 = c("a", "b", "c", "d", "e"), x = c("x", "y", "z", "i", "j")))

  ## case of all rows
  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(TRUE, TRUE, TRUE, TRUE, TRUE))
    , data.table(c1 = c("a", "b", "c", "d", "e"), x = c("x", "y", "z", "i", "j")))

  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(1, 2, 3, 4, 5))
    , data.table(c1 = c("a", "b", "c", "d", "e"), x = c("x", "y", "z", "i", "j")))


  expect_error(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(5, 5, 3, 4, 5)))


  expect_equal(
      inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(3, 2, 1, 4, 5))
    , data.table(c1 = c("c", "b", "a", "d", "e"), x = c("x", "y", "z", "i", "j")))




  ## error for incorrect vector length
  expect_error(inset_target(c("a", "b", "c", "d", "e")
                 , data.table(c1 = c(1,2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(TRUE, FALSE, TRUE, FALSE, TRUE)))

  ## subsetting rows
  expect_equal(
      inset_target(c("a", "b", "c")
                 , data.table(c1 = c("1",2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(TRUE, FALSE, TRUE, FALSE, TRUE))
    , data.table(c1 = c("a", "2", "b", "4", "c"), x = c("x", "y", "z", "i", "j")))


  expect_equal(
      inset_target(c("a", "b", "c")
                 , data.table(c1 = c("1",2,3,4,5), x = c("x", "y", "z", "i", "j"))
                 , rows = c(1,3,5))
    , data.table(c1 = c("a", "2", "b", "4", "c"), x = c("x", "y", "z", "i", "j")))
#+END_SRC

*** inset_vector (old)                                          :depricate:
:PROPERTIES:
:ID:       org:p11ds0x069j0
:END:
old version
#+BEGIN_SRC R :tangle no
  ##' Insets target vector back to input object (`data`)
  ##'
  ##' @param data an object
  ##' @param vector a vector to inset. Optional. Default is NULL
  ##' @param col vector of interest in `data` object
  ##' @param update Update values in `col` column. Default is FALSE. If set `append`, `name` and `name_suffix` are ignored. Also if set the default for `select_all_data_cols` will be set to TRUE.
  ##' @param rows Logical vector to filter records of interest. Default is NULL which means do not filter records
  ##' @param omitted_rows_values If `rows` is set merge these values to the results. It should be a vector of length 1 or `nrow(data)`. If the value is NULL (default) then use original values of `col`.
  ##' @param append If set then put `vector` as the last instead of first vector/column. Default is FALSE.
  ##' @param name_suffix If `name` is not set the use this as suffix (default is "harmonized"). If the name with the same suffix already edataists in `select_data_cols` it will add counter at the end to avoid variables with the same names.
  ##' @param name Use this name for the first column in results (harmonized names). Default is NULL, which means that either name_if_data_atomic if data is vector or original col name will be used with `name_suffix` at the end.
  ##' @param name_if_data_atomic If `data` is vector use this name for original column if it is in results. Default is "data". If `data` is table the name of `col` will be used.
  ##' @param select_data_cols If data is table, set the columns to cbind to the result table. Default is cbind all but the original (unharmonized) column (col).
  ##' @param select_all_data_cols Whether to bind all columns in `data`. Defaults depends on values of `update` and `append`. If either is set then defaut values is TRUE otherwise FALSE. If set to TRUE by user the select_data_cols is ignored.
  ##'
  ##' @return returns updated `data` object
  ##'
  ##' @md
  ##' @import magrittr stringr data.table
  inset_vector <- function(data
                         , vector
                         , col = 1
                         , update = FALSE
                         , append = FALSE
                         , rows = NULL
                         , omitted_rows_values = NULL
                         , name = NA
                         , name_suffix = "harmonized"
                         , name_if_data_atomic = "names"
                         , select_data_cols =
                               -ifelse(is.numeric(col), col, match(col, names(data)))
                         , select_all_data_cols = append | update ) {
      ## process arguments
      check_args_col_rows()
      check_args_for_inset_vector()    
      ## inset filtered rows (this makes list if vector is list)
      vector %<>% inset(omitted_rows_values, rows, .)
      ## inset vector to data
      if(is.atomic(data) & isFALSE(select_data_cols == 1)) {
          vector
      } else if(update) {
          data %>%
              harmonize_defactor(conv2dt = "all") %>% 
              inset2(col, value = vector) %>% 
              extract(., ,select_data_cols, with = FALSE)
      } else if(isTRUE(select_data_cols == 0)) {
          vector
      } else {
          ## set harmonized name
          data.names <- if(is.atomic(data)) name_if_data_atomic else names(data)
          name %<>%
              harmonize_eval_if_empty(
                  harmonize_add_suffix(data.names[col]
                                     , name_suffix
                                     , data.names[select_data_cols])) %>%
              make.names
          ## (pre)append vector to data
          data %<>% harmonize_defactor(conv2dt = "all") # returns data.table
          vector %>%
              data.table %>%          # should make one column even if inset is list
              set_names(name) %>%
              harmonize.x.cbind(data[, select_data_cols, with = FALSE], append)
      }
  }







  check_args_for_inset_vector <- function(env = parent.frame()) {
      evalq({
          ## - check vector
          harmonize_is_ok_type(vector
                             , allow.null = FALSE
                             , x.length = if(isTRUE(rows)) harmonize_data_length(x)
                                          else sum(rows)
                             , type = c("atomic", "list"))
          ## - check omitted_rows_values
          if(!harmonize_is_ok_type(omitted_rows_values
                                 , x.length = c(1, harmonize_data_length(x))
                                 , type = "atomic")) {
              omitted_rows_values <- harmonize_data_get_col(x, col)
          } else if(length(omitted_rows_values) == 1) {
              omitted_rows_values <-
                  harmonize_defactor(omitted_rows_values) |>
                  rep(harmonize_data_length(x))
          } else {
              omitted_rows_values <- harmonize_defactor(omitted_rows_values)
          }
          ## - check select_cols
          harmonize_is_ok_type(select_all_data_cols)
          ## select_all_data_cols could be TRUE if append | update
          ## if select_all_data_cols is not set manually but select_cols is
          ## then respect select_data_cols
          if(select_all_data_cols && (!missing(select_all_data_cols) || missing(select_cols)))
              ## set select_data_cols to all
              select_data_cols <- 1:harmonize_data_width(x)
          else if(harmonize_is_ok_col(select_data_cols, x
                                    , allow.negative = TRUE
                                    , several.ok = TRUE))
              select_data_cols %<>% switch(is.numeric(.) + 1, match(., names(x)), .)
          else {
              ## set it to zero if it is null
              select_data_cols <- 0
          }
          ## - check append
          harmonize_is_ok_type(append)
          ## - check update
          harmonize_is_ok_type(update)
          if(update &&
             ((all(select_data_cols < 0) && (-col %in% select_data_cols)) ||
              (all(select_data_cols >= 0) && !(col %in% select_data_cols)))) {
              stop("'update' is set but 'col' is excluded by 'select_data_cols'")
          }
          ## - check names
          if(!update) {
              harmonize_is_ok_type(name, x.length = 1
                                 , type = "character", allow.null = FALSE)
              if(name %in% names(x)[select_data_cols]) {
                  stop("The harmonized column name: ", name, " is alredy exists.")
              }
              harmonize_is_ok_type(name_suffix
                                 , x.length = 1
                                 , type = "character"
                                 , allow.na = FALSE, allow.null = FALSE)
              harmonize_is_ok_type(name_if_data_atomic
                                 , x.length = 1
                                 , type = "character"
                                 , allow.na = FALSE, allow.null = FALSE)
          }
      }, envir = env)
  }

#+END_SRC

Testing
#+BEGIN_SRC R
  ## inset_vector tests
  ## ------------------------------
  
  ## debug(inset_vector)
  ## undebug(inset_vector)
  
  data.table(x.pro.30 = c(1,2,3,4)
           , y = c(7,8,9,0)
           , x.pro.5 = 0) %>%
      inset_vector_new(c(5,5,5)
                     , rows = c( TRUE, TRUE, FALSE, TRUE)
                     , name_suffix = "pro")
  
  
  
  rows <- c(T, T, F, T)
  harmonize_is_ok_type(rows, 4, type = "logical")
  
  
  data.table(c(1,2,3,4)
           , c(7,8,9,0)) %>%
    inset_vector_new(vector = c(5,5,5)
              , rows = c(T,T,F,T)
              , append = TRUE)
  
  
  
  data.table(c(1,2,3,4)
           , c(7,8,9,0)) %>%
    inset_vector_new(vector = NULL
              , rows = c(F,F,F,F)
              , append = TRUE)
  ## rerutns
  ## numeric(0)
  
  c(1,2,3,4) %>%
    inset_vector_new(vector = NULL
              , rows = c(F,F,F,F)
              , append = TRUE)
  
  
  data.frame(num = c(1,2,3,4)
           , str = c("7","8","9","a")
           , rows = c(T,T,F,T))  %>%
    inset_vector_new(vector = c(5,5,5)
              , col = "str"
              , rows = .$rows
              , omitted_rows_values = .$str
              , select_data_cols = -c(1, 3)
              , update = TRUE)
  
  
  ## error is expected
  data.frame(num = c(1,2,3,4)
           , str = c("7","8","9","a")
           , rows = c(F,F,F,F))  %>%
    inset_vector_new(vector = character(0)
              , col = "num"
              , rows = .$rows
              , select_data_cols = -c(1, 3)
              , update = TRUE)
  
  
  data.frame(num = c(1,2,3,4)
           , str = c("7","8","9","a")
           , rows = c(T,T,F,T))  %>%
    inset_vector_new(vector = c(5,5,0)
              , col = "str"
              , rows = .$rows
              , omitted_rows_values = .$str
              , select_data_cols = -c(1, 3)
              , update = TRUE)
  
  
  
  data.frame(num = c(1,2,3,4)
           , str = c("7","8","9","a")
           , rows = c(T,T,F,T))  %>%
    inset_vector(vector = c(5,5,0)
              , col = "num"
              , rows = .$rows
              , omitted_rows_values = .$str
              , select_data_cols = NULL
              , update = FALSE)
  
#+END_SRC




*** harmonize.x.dots                                            :depricate:
:PROPERTIES:
:ID:       org:ngbgs341vli0
:END:
#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' Same as `harmonize.x` but checks and updates dots values if needed. Runs only in environment where ... (dots) ment for `harmonize.x` exists.
  ##' 
  ##' @param x Table or vector
  ##' @param inset.vector Vector to inset to `x`. If not provided it will return a vector.
  ##' @param env Do not set. This function needs its calling environment.
  ##' @param dots Do not set. This function needs ... (dots) values of calling environment.
  ##' @inheritDotParams harmonize.x
  ##' @return Table or vector
  ##' 
  ##' @md 
  ##' @import magrittr
  ##' @export 
  harmonize.x.dots <- function(x
                             , inset.vector = NULL
                             , env = parent.frame()
                             , dots = eval(expression(list(...)), envir = env)
                             , ...) {
    ## check dots for consistensy
    formals.names <-
      formals("harmonize.x") %>%
      names %>%
      extract(!(. %in% c("x", "inset.vector")))
    harmonize_is_ok_dots(names(dots), formals.names)
    ## check ... (args) for consistensy
    args <- as.list(match.call()) %>%
      extract(-1) %>%
      extract(!(names(.) %in% c("x", "inset.vector", "dots", "env")))
    ## smart inset from ... to dots
      if(harmonize_is_ok_dots(names(args), formals.names)) {
          ## remove old args
          dots[names(dots) %in% names(args)] <- NULL
          ## get new args
          args.val <- sapply(args, eval, envir = env, simplify = FALSE)
          ## add new args to does
          dots %<>% c(args.val, .)
    }          
    ## call harmonize.x with updated dots
    do.call("harmonize.x", c(list(x = x, inset.vector = inset.vector), dots))
  }


  ##' If no argument `arg.name` is provided in ... (dots) then use `arg.val` as new default. Otherwise use value specified in ... (dots) by user.
  ##' 
  ##' @param arg.name Name of argument in dots to update defaults
  ##' @param arg.val New default value
  ##' @param env Do not set. This function needs its calling environment.
  ##' @param dots Do not set. This function needs ... (dots) values of calling
  ##' @return Updated value for dots argument.
  ##' 
  ##' @md 
  dots.default <- function(arg.name, arg.val
                         , env = parent.frame()
                         , dots = eval(expression(list(...)), envir = env)) {
    if(arg.name %in% names(dots))
      dots[[arg.name]]
    else eval(arg.val, envir = env)
  }


  ##' Combines (with `&` funciton) two logical vectors. One is `arg.name` from dots the other is `arg.val`. Checks if they are the same length.
  ##' 
  ##' @param arg.name Name of argument in dots to combine (&) `arg.val` with
  ##' @param arg.val Logical vector for combining with `arg.name` value in dots
  ##' @param env Do not set. This function needs its calling environment.
  ##' @param dots Do not set. This function needs ... (dots) values of calling 
  ##' @return Updated value for dots argument.
  ##' 
  ##' @md 
  dots.and <- function(arg.name, arg.val
                     , env = parent.frame()
                     , dots = eval(expression(list(...)), envir = env)) {
    harmonize_is_ok_type(arg.val, allow.na = FALSE, allow.null = FALSE, type = "logical")
    if(arg.name %in% names(dots)) {
      dots.logical <- dots[[arg.name]]
      ## dots.logical <- get(arg.name, envir = env)
      if(!harmonize_is_ok_type(dots.logical, length(arg.val), allow.na = FALSE)) {
        dots.logical <- TRUE
      }
      eval(arg.val, envir = env) & dots.logical
    } else eval(arg.val, envir = env)
  }
#+END_SRC

#+BEGIN_SRC R :tangle no
   ## ## test
  harmonize.x.dots.test <- function(x, ...)
    harmonize.x.dots(x)

  ## ## new names
  harmonize.x.dots.test <- function(x, ...) {
    a  <- c(T,F,F,T)
    b  <- 2
    d <- TRUE
    harmonize.x.dots(x, c(0,0)
                   , x.rows = dots.and("x.rows", a)
                   , x.col = dots.default("x.col", b)
                   , x.col.update = FALSE
                   , return.x.cols = NULL)

  }

  ## ## debug(harmonize.x.dots)
  ## ## undebug(harmonize.x.dots)

  data.frame(num = c(1,2,3,4)
           , str = c("7","8","9","a")
           , x.rows = c(T,T,F,T)) %>%
      harmonize.x.dots.test()

  data.frame(num = c(1,2,3,4)
           , str = c("7","8","9","a")
           , x.rows = c(T,T,F,T)) %>%
    harmonize.x(c(0,0)
                   , x.rows = c(T,F,F,T)
                   , x.col = 2
                   , x.col.update = TRUE
                   , return.x.cols = NULL)

  data.frame(num = c(1,2,3,4)
           , str = c("7","8","9","a")) %>%
    harmonize.x.dots.test(x.rows = c(F,T,F,T)
                        , x.col = 2
                        , x.col.update = FALSE)


#+END_SRC

** replace and detect functions

*** harmonize_escape_regex
:PROPERTIES:
:ID:       org:uj31f8s0lei0
:END:

#+BEGIN_SRC R :tangle R/escape_patterns.r
  ##' Escapes special for regex characters
  ##' @param string character vector
  ##' @return character vector with all special to regex characters escaped
  ##'
  ##' @export
  escape_regex <- function(string) stringi::stri_replace_all_regex(string, "(\\W)", "\\\\$1")


  ##' Escapes special for different types of pattern
  ##' @param string character vector (patterns)
  ##' @param type How the characters in patterns should be 'escaped' for
  ##'     proper matching. The options are:
  ##' @param escape_fixed Whether to escape string for 'fixed' and
  ##'     'exact' types and just trimmed string for "trim_exact". Default is FALSE
  ##' @param return_docs Return character vector of documentation for
  ##'     each type (for using with roxygen2 documentations in many
  ##'     places)
  ##' @param return_choices Return character vector of available escape
  ##'     types
  ##' @return character vector with all special to regex characters
  ##'     escaped
  ##' @eval escape_regex_for_type(return_docs = TRUE)
  ##' @md
  escape_regex_for_type <- function(string
                                  , type
                                  , escape_fixed = FALSE
                                  , return_docs = FALSE
                                  , return_choices = FALSE) {
      types_specs <- list(
          list(type = "fixed"
             , docs = "Match pattern string as it is within the target vector"
             , func = \(string, escape_fixed) {
                 if(escape_fixed) escape_regex(string)
                 else string
             })
        , list(type = "begins"
             , docs = "Match pattern string as it is in the beggining of the target vector"
             , func = \(string, escape_fixed) {
                 paste0("^", escape_regex(string))
             })
        , list(type = "trim_begins"
             , docs = "Match pattern string as it is in the beginning of the target vector ignoring preceding white-spaces"
             , func = \(string, escape_fixed) {
                 paste0("^\\s*", escape_regex(string))
             })
        , list(type = "ends"
             , docs = "Match pattern string as it is in the end of the target vector"
             , func = \(string, escape_fixed) {
                 paste0(escape_regex(string), "$")
             })
        , list(type = "trim_ends"
             , docs = "Match pattern string as it is in the end of the target vector ignoring leading white-spaces"
             , func = \(string, escape_fixed) {
                 paste0(escape_regex(string), "\\s*$")
             })
        , list(type = "exact"
             , docs = "Match pattern string exactly (i.e., match equal strings)"
             , func = \(string, escape_fixed) {
                 if(escape_fixed) paste0("^", escape_regex(string), "$")
                 else string
             })
        , list(type = "trim_exact"
             , docs = "Match pattern string exactly (i.e., match equal strings) ignoring surrounding white-spaces"
             , func = \(string, escape_fixed) {
                 if(escape_fixed) paste0("^\\s*", escape_regex(string), "\\s*$")
                 else stringi::stri_trim_both(string)
             })
        , list(type = "regex"
             , docs = "Match regex pattern"
             , func = \(string, escape_fixed) {
                 string
             }))
      if(return_docs) {
          return(sapply(types_specs, \(x) paste("* ", x$type, " - ", x$docs)))
      }
      if(return_choices) {
          return(sapply(types_specs, `[[`, "type"))
      }
      types_funcs <- lapply(types_specs, `[[`, "func")
      names(types_funcs) <- lapply(types_specs, `[[`, "type")
      ## this will return the right func and call it
      do.call(switch, c(list(EXPR = type), types_funcs))(string, escape_fixed)
  }

  ##' Escapes special for regex characters conditionally
  ##' @param patterns character vector
  ##' @param escape_fixed Whether to escape strings for 'fixed' and
  ##'     'exact' types in case all types are the same
  ##'     (length(unique(types)) == 1). The "trim_exact" types get
  ##'     trimed if not escaped. Otherwise if types heterogenious
  ##' @param types character vector of the same length as `strings` with
  ##'     instructions whether and how to to escape regex
  ##'     characters. Options are:
  ##' @eval escape_regex_for_type(return_docs = TRUE)
  ##' @return string with all special to regex characters escaped
  ##'
  ##' @import stringr
  escape_regex_for_types <- function(patterns, types, escape_fixed = FALSE) {
      choices <- escape_regex_for_type(return_choices = TRUE)
      if(length(types) == 1 || length(unique(types)) == 1) {
          type <- types[1]
          checkmate::assert_choice(type, choices, fmatch = TRUE)
          escape_regex_for_type(patterns, type, escape_fixed = escape_fixed)
      } else {
          checkmate::assert_subset(types, choices, fmatch = TRUE)
          mapply(\(p, t) escape_regex_for_type(p, t, escape_fixed = TRUE)
               , patterns , types
               , SIMPLIFY = TRUE)
      }
  }
#+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_escape_regex_for_types.r
  escape_regex_for_types <- harmonizer:::escape_regex_for_types

  expect_equal(
      c("MSlab$", "TriloBit.?", "(^0-3)", "Ltd.", "lalala") |>
      escape_regex_for_types(c("regex", "fixed", "regex", "ends", "trim_exact"), escape_fixed = FALSE)
    , c(`MSlab$` = "MSlab$", `TriloBit.?` = "TriloBit\\.\\?", `(^0-3)` = "(^0-3)", Ltd. = "Ltd\\.$", lalala = "^\\s*lalala\\s*$")
  )

  expect_equal(
      c("MSlab$", "TriloBit.?", "(^0-3)", "Ltd.", "lalala") |>
      escape_regex_for_types(c("regex", "fixed", "regex", "ends", "trim_exact"))
    , c(`MSlab$` = "MSlab$", `TriloBit.?` = "TriloBit\\.\\?", `(^0-3)` = "(^0-3)", 
        Ltd. = "Ltd\\.$", lalala = "^\\s*lalala\\s*$")
  )
  #+END_SRC

#+BEGIN_SRC R
  ## alternative:
  ## escape.regex  <- function (string) {
  ##   gsub("([.|()\\^{}+$*?]|\\[|\\])", "\\\\\\1", string)
  ## }
#+END_SRC

*** replace_patterns
:PROPERTIES:
:ID:       org:xcpfib50bci0
:END:
:LOGBOOK:
- Reference from [[id:org:6chkzp10fbj0][Refactor replace_patterns]] on [2022-01-02 Sun 14:42]
:END:

#+BEGIN_SRC R :tangle R/replace_patterns.r
  replace_exact <- function(x
                          , patterns
                          , replacements) {
      if ((requireNamespace("fastmatch", quietly = TRUE))) {
          match <- fmatch
      }
      matches <- match(x, patterns)
      x[!is.na(matches)] <- replacements[matches][!is.na(matches)]
      return(x)
  }

  stri_replace_do <- function(str, arg_list) {
      do.call(stringi::stri_replace, c(list(str), arg_list))
  }

  replace_fixed_by_mode <- function(x
                                  , patterns
                                  , replacements
                                  , modes) {
      Reduce(stri_replace_do
               , Map(list
                   , fixed = patterns
                   , replacement = replacements
                   , mode = modes)
               , init = x)
  }

  replace_regex_by_mode <- function(x
                                  , patterns
                                  , replacements
                                  , modes) {
      Reduce(stri_replace_do
               , Map(list
                   , regex = patterns
                   , replacement = replacements
                   , mode = modes)
               , init = x)
  }



  ##' A wrapper for string replacement and cbinding some columns.
  ##'
  ##' Optionally matches only at the beginning or at the end of the
  ##' string.
  ##' 
  ##' @param x Vector or table to harmonize.
  ##' @param patterns Accepts both vector or table. If patterns is a
  ##'     table can also include replacements column.
  ##' @param patterns_col If patterns is not a vector which column to
  ##'     use. Default is 1.
  ##' @param patterns_mode Mode of matching. Could be one of c("all",
  ##'     "first", "last"). The default is "all" (it is 2x faster than
  ##'     "first" and "last" because of handy stri_replace_all_*
  ##'     functions). Also possible to pass a vector (same length as
  ##'     patterns)
  ##' @param patterns_mode_col Column in patterns table with the mode of
  ##'     matching
  ##' @param patterns_type Type of pattern for matching. Default is
  ##'     "fixed" (calling
  ##'     code{\link[stringi]{stri_replace_all_fixed}}). Other options
  ##'     are:
  ##' @eval escape_regex_for_type(return_docs = TRUE)
  ##' @param patterns_type_col Column with the type of pattern in case
  ##'     when patterns should have different types
  ##' @param patterns_replacements_col If patterns is not a vector and
  ##'     includes replacements which column to use for
  ##'     replacements. Default is 2.
  ##' @param replacements If patterns does not have column with
  ##'     replacements provide it here.
  ##' @inheritDotParams harmonize_options
  ##'
  ##' @return If nothing was indicated to cbind to results then it
  ##'     returns harmonized vector. If something is needs to be cbind
  ##'     then it returns data.table
  ##' @import stringi stringr magrittr
  ##' 
  ##' @export
  replace_patterns <- function(x
                              , patterns
                              , patterns_col = 1
                              , patterns_mode = "all"
                              , patterns_mode_col = NULL
                              , patterns_type = "fixed"
                              , patterns_type_col = NULL
                              , patterns_replacements_col = 2
                              , replacements = if(is.atomic(patterns)) "" else NULL
                              , ...) {
      ## get vectors and check arguments
      x_vector <- get_target(x)
      ## types (choices are checked in escape_regex_for_types)
      types_vector <- get_vector(patterns, patterns_type_col
                               , fallback_value = patterns_type)
      ## get patterns and escape regex if types are heterogeneous
      patterns_vector <-
          get_vector(patterns, patterns_col) |>
          escape_regex_for_types(types_vector)
      ## modes
      modes_vector <- get_vector(patterns, patterns_mode_col
                               , fallback_value = patterns_mode
                               , choices = c("all", "first", "last"))
      ## replacements
      replacements_vector <- get_vector(patterns, patterns_replacements_col
                                      , fallback_value = replacements
                                      , fallback_value_supersedes = TRUE)
      ## conditions are organized from fastest to slowest replace procedures
      if (all(types_vector == "exact") || all(types_vector == "trim_exact")) {
          if (all(types_vector == "trim_exact")) {
              x_vector <- stringi::stri_trim_both(x_vector)
          }
          x_vector <- replace_exact(x_vector
                                  , patterns_vector
                                  , replacements_vector)
      } else if (all(modes_vector == "all")) {
          if (all(types_vector == "fixed")) {
              x_vector <-
                  stringi::stri_replace_all_fixed(x_vector
                                                , patterns_vector
                                                , replacements_vector
                                                , vectorize_all = FALSE)
          } else {
              x_vector <-
                  stringi::stri_replace_all_regex(x_vector
                                                , patterns_vector
                                                , replacements_vector
                                                , vectorize_all = FALSE)
          }
      } else if (all(types_vector == "fixed")) {
          x_vector <- replace_fixed_by_mode(x_vector
                              , patterns_vector
                              , replacements_vector
                              , modes_vector)
      } else {
          x_vector <- replace_regex_by_mode(x_vector
                                          , patterns_vector
                                          , replacements_vector
                                          , modes_vector)
      }
      inset_target(x_vector, x)
  }
  #+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_replace_patterns.r
  require(data.table)
  ## Test replace_patterns

  expect_equal(
  replace_patterns(data.table(x.lala = c("lala MSlab MSlab"
                                        , "this company called TriloBit.? maybe"
                                        , "MS007lab, Ltd. Ltd.")
                             , x.rows = c(TRUE, TRUE, FALSE)
                             , harm = c(1,25,"MSlab"))
                  , patterns = c("MSlab", "TriloBit.?", "[0-3]+", "Ltd.")
                  , patterns_type = c("regex", "fixed", "regex", "ends")
                  , col = 1
                  , rows = c(TRUE, TRUE, FALSE)
                  , patterns_replacements_col = 1
                  , patterns_mode = "first")
  , data.table(x.lala = c("lala  MSlab", "this company called  maybe", 
                          "MS007lab, Ltd. Ltd."), x.rows = c(TRUE, TRUE, FALSE), harm = c("1", 
                                                                                          "25", "MSlab")))



  ## multy mode test
  expect_equal(
    replace_patterns(data.table(x.lala = c("lala MSlab MSlab"
                 , "this company called TriloBit.? maybe TriloBit.?"
                 , "MS007lab, Ltd. Ltd.")
           , x.rows = c(TRUE, FALSE, TRUE)
           , harm = c(1,25,"MSlab"))
            , patterns = c("MSlab", "TriloBit.?", "[0-3]+", "Ltd.")
                    , patterns_type = c("regex", "fixed", "regex", "fixed")
                    , col = 1
                    , x.rows = c(TRUE, FALSE, TRUE)
                    , patterns_replacements_col = 1
           , patterns_mode = c("last", "first", "all", "all"))[] 
  , data.table(x.lala = c("lala MSlab ", "this company called  maybe TriloBit.?", 
  "MS7lab,  "), x.rows = c(TRUE, FALSE, TRUE), harm = c("1", "25", 
  "MSlab")))




  ## patterns as table test
  expect_equal(
    replace_patterns(data.frame(x.lala = c("lala MSlab MSlab"
                 , "this company called TriloBit.? maybe TriloBit.?"
                 , "MS007lab, Ltd. Ltd.")
           , x.rows = c(TRUE, FALSE, TRUE)
           , harm = c(1,25,"MSlab"))
             , patterns =
                        data.frame(pats = c("MSlab", "TriloBit.?", "[0-3]+", "Ltd.")
                                 , type = c("regex", "fixed", "regex", "ends")
                                 , mode = c("all", "first", "all", "all")
                                 , replacements = c("MSMS", "TBTB", "NRNR", "COMP"))
                    , col = 1
                    , rows = c(TRUE, FALSE, TRUE)
                    , patterns_mode_col = 3
                    , patterns_type_col = "type" 
           , patterns_replacements_col = "replacements")
  , data.table(x.lala = c("lala MSMS MSMS", "this company called TriloBit.? maybe TriloBit.?", 
  "MSNRNR7lab, Ltd. COMP"), x.rows = c(TRUE, FALSE, TRUE), harm = c("1", 
                                                                    "25", "MSlab"))
  )


  ## test for all x.rows FALSE
  expect_equal(
      replace_patterns(data.frame(x.lala = c("lala MSlab MSlab"
                 , "this company called TriloBit.? maybe TriloBit.?"
                 , "MS007lab, Ltd. Ltd.")
           , x.rows = c(TRUE, FALSE, TRUE)
           , harm = c(1,25,"MSlab"))
             , patterns =
                        data.frame(pats = c("MSlab", "TriloBit.?", "[0-3]+", "Ltd.")
                                 , type = c("regex", "fixed", "regex", "ends")
                                 , mode = c("all", "first", "all", "all")
                                 , replacements = c("MSMS", "TBTB", "NRNR", "COMP"))
                    , patterns_type_col = "type"
                    , col = 1
                    , col.update = TRUE
                    , rows = c(FALSE, FALSE, FALSE)
                    , patterns_replacements_col = "replacements"
           , patterns_mode_col = 3)
  , data.table(x.lala = c("lala MSlab MSlab", "this company called TriloBit.? maybe TriloBit.?", 
  "MS007lab, Ltd. Ltd."), x.rows = c(TRUE, FALSE, TRUE), harm = c("1", 
  "25", "MSlab")))






#+END_SRC

testing performance
#+BEGIN_SRC R
  ## Test for stri_replace_all_regex(vectorize_all = FALSE) timing vs for loop
  ## for loop ~2.5 times longer!!!
  system.time(stri_replace_all_regex(rep(words, 100)
                                   , paste0("^"
                                          , combn(letters, 2) %>%
                                            apply(2, paste, collapse = ""))
                                   , "!!"
                                   , vectorize_all = FALSE))

  system.time({
    str <- rep(words, 100)
    for (i in paste0("^"
                   , combn(letters, 2) %>%
                     apply(2, paste, collapse = ""))) {
      str %<>% stri_replace_all_regex(i, "!!", vectorize_all = TRUE)
    }
  })
#+END_SRC

**** old code
old R/harmonize.replace.r
#+BEGIN_SRC R :tangle no
  #' A wrapper for string replacement and cbinding some columns.
  #'
  #' Optionally matches only at the beginning or at the end of the string.
  #' 
  #' @param x Vector or table to harmonize.
  #' @param patterns Accepts both vector or table. If patterns it is table can also include replacements column.
  #' @param patterns.col If patterns is not a vector which column to use. Default is 1.
  #' @param patterns.mode Mode of matching. Could be one of c("all", "first", "last"). The default is "all" (it is 2x faster than "first" and "last" because of handy stri_replace_all_* functions). Also possible to pass a vector (same length as patterns)
  #' @param patterns.mode.col  Column in patterns table with the mode of matching
  #' @param patterns.type Kind of pattern. Default is "fixed" (calling code{\link[stringi]{stri_replace_all_fixed}}). Other options are "begins", "ends" - which means that it should only match fixed pattern at the beginning of the string or at the and. Another possible value is "regex" (calling code{\link[stringi]{stri_replace_all_regex}})
  #' @param patterns.type.col Column with the type of pattern in case when patterns should have different types
  #' @param patterns.replacements.col If patterns is not a vector and includes replacements which column to use for replacements. Default is 2.
  #' @param replacements If patterns does not have column with replacements provide it here.
  #' @inheritDotParams harmonize.x
  #'
  #' @return If nothing was indicated to cbind to results then it returns harmonized vector. If something is needs to be cbind then it returns data.table
  #' @import stringi stringr magrittr
  #' 
  #' @export
  harmonize.replace <- function(x
                              , patterns
                              , patterns.col = 1
                              , patterns.mode = c("all", "first", "last")
                              , patterns.mode.col = NULL
                              , patterns.type = c("fixed"
                                                , "begins"
                                                , "begins.trimmed"
                                                , "ends"
                                                , "ends.trimmed"
                                                , "regex"
                                                , "exact"
                                                , "exact.trimmed")
                              , patterns.type.col = NULL
                              , patterns.replacements.col = 2
                              , replacements = NULL
                              , ...) {
      ## check arguments and get vectors
      x.vector <- harmonize.x(x, ...)
      patterns.vector <- harmonize.x(patterns, x.col = patterns.col)
      types.vector <- harmonize.replace..get.types.vector()
      modes.vector <- harmonize.replace..get.modes.vector()
      replacements.vector <- harmonize.replace..get.replacements.vector()
      ## do replace and return
      harmonize.replace..do() %>% harmonize.x(x, ., ...)
  }

  harmonize.replace..get.types.vector <- function(env = parent.frame()) {
    evalq({
      ## patterns.vector should be ready
      if(missing(patterns.type.col)) {
        harmonize.match.arg(patterns.type
                          , arg.length = length(patterns.vector))
      } else {
        harmonize.match.arg(arg = harmonize.x(patterns, x.col = patterns.type.col)
                          , arg.length = length(patterns.vector)
                          , arg.call = quote(patterns.type))
      }
    }, envir = env)
  }

  harmonize.replace..get.modes.vector <- function(env = parent.frame()) {
      evalq({
      ## patterns.vector should be ready
      if(missing(patterns.mode.col)) {
        harmonize.match.arg(patterns.mode, arg.length = length(patterns.vector))
      } else {
        harmonize.match.arg(arg = harmonize.x(patterns, x.col = patterns.mode.col)
                          , arg.length = length(patterns.vector)
                          , arg.call = quote(patterns.mode))
      }
    }, envir = env)
  }

  harmonize.replace..get.replacements.vector <- function(env = parent.frame()) {
  evalq({
      ## patterns.vector should be ready
      if(missing(replacements) && !is.atomic(patterns)) {
        harmonize.x(patterns, x.col = patterns.replacements.col)
      } else if(harmonize_is_ok_type(replacements
                                   , x.length = c(1, length(patterns.vector))
                                   , type = "atomic")) {
          defactor_vector(replacements) %>%
              {if(length(.) == 1) rep(., length(patterns.vector)) else .}
      } else {
          ## replace with nothig by default
          rep("", length(patterns.vector))
      }
    }, envir = env)
  }

  ## a wrapple for stri_replace to use in Reduce
  stri_replace.do <- function(str, arg.list) {
    do.call(stri_replace, c(list(str), arg.list))
  }

  harmonize.replace..do <- function(env = parent.frame()) {
    evalq({
      ## make patterns.vector excaped according to types.vector
      patterns.vector %<>% harmonize_escape_types(types.vector)
      ## conditions are organized from fastest to slowest replace procedures
      if(all(types.vector == "exact") || all(types.vector == "exact.trimmed")) {
        x.vector %>% 
          {if(all(types.vector == "exact.trimmed")) str_trim(.) else .} %>% 
          match(patterns.vector) %>% 
          extract(replacements.vector, .) %>% 
          inset(x.vector, !is.na(.), .)
      } else if(all(modes.vector == "all")) {
        if(all(types.vector == "fixed")) {
          stri_replace_all_fixed(x.vector
                               , patterns.vector
                               , replacements.vector
                               , vectorize_all = FALSE)
        } else {
          stri_replace_all_regex(x.vector
                               , patterns.vector
                               , replacements.vector
                               , vectorize_all = FALSE)
        }
      } else if(all(types.vector == "fixed")) {
        Map(list
          , fixed = patterns.vector
          , replacement = replacements.vector
          , mode = modes.vector) %>%
          Reduce(stri_replace.do, ., init = x.vector) # same as for loop
      } else {
        Map(list
          , regex = patterns.vector
          , replacement = replacements.vector
          , mode = modes.vector) %>%
          Reduce(stri_replace.do, ., init = x.vector) # same as for loop
      }
    }, envir = env)
  }
#+END_SRC


even older
#+BEGIN_SRC R :tangle no
  #' A wrapper for string replacement and cbinding some columns.
  #'
  #' Optionally matches only at the beginning or at the end of the string.
  #' 
  #' @param x Vector or table to harmonize.
  #' @param patterns Accepts both vector or table. If patterns it is table can also include replacements column.
  #' @param patterns.col If patterns is not a vector which column to use. Default is 1.
  #' @param patterns.mode Mode of matching. Could be one of c("all", "first", "last"). The default is "all" (it is 2x faster than "first" and "last" because of handy stri_replace_all_* functions). Also possible to pass a vector (same length as patterns)
  #' @param patterns.mode.col  Column in patterns table with the mode of matching
  #' @param patterns.type Kind of pattern. Default is "fixed" (calling code{\link[stringi]{stri_replace_all_fixed}}). Other options are "begins", "ends" - which means that it should only match fixed pattern at the beginning of the string or at the and. Another possible value is "regex" (calling code{\link[stringi]{stri_replace_all_regex}})
  #' @param patterns.type.col Column with the type of pattern in case when patterns should have different types
  #' @param patterns.replacements.col If patterns is not a vector and includes replacements which column to use for replacements. Default is 2.
  #' @param replacements If patterns does not have column with replacements provide it here.
  #' @param replacements.col If replacements is not a vector which column to use. Default is 1.
  #' @inheritDotParams harmonize.x
  #'
  #' @return If nothing was indicated to cbind to results then it returns harmonized vector. If something is needs to be cbind then it returns data.table
  #' @import stringi stringr magrittr
  #' 
  #' @export
  harmonize.replace <- function(x
                              , patterns
                              , patterns.col = 1
                              , patterns.mode = "all"
                              , patterns.mode.col = NULL
                              , patterns.type = "fixed"
                              , patterns.type.col = NULL
                              , patterns.replacements.col = 2
                              , replacements = NULL
                              , replacements.col = 1
                              , ...) {
    ## check pattern type
    patterns.is.atomic <- is.atomic(patterns)
    patterns.type %<>% {if(!is.null(patterns.type.col) & !patterns.is.atomic) {
                          patterns[[patterns.type.col]]
                        } else {.}}
    patterns.mode %<>% {if(!is.null(patterns.mode.col) & !patterns.is.atomic) {
                          patterns[[patterns.mode.col]]
                        } else {.}}
    ## get replacesments vectors
    replacements %<>%
      {if (is.null(.)) if (patterns.is.atomic) ""
                       else patterns[[patterns.replacements.col]]
       else if (is.atomic(.)) .
       else .[[replacements.col]]}
    ## get replacesments patterns
    patterns %<>%
      {if (patterns.is.atomic) . else .[[patterns.col]]} %>%
      harmonize.escape.types(., patterns.type)
    ## harmonize
    ## ---------
    x.vector <- harmonize.x(x, ...)
    if(length(patterns.mode) == 1) {
      if(patterns.mode == "all") {
        x.vector %<>% 
          {if(length(patterns.type) == 1) {
             if(patterns.type == "fixed")
               stri_replace_all_fixed(.
                                    , patterns
                                    , replacements
                                    , vectorize_all = FALSE)
             else if(patterns.type == "exact") {
               patterns %>% 
                 extract(match(x,.)) %>%
                 inset(x, !is.na(.), .)
             }
             else if(patterns.type == "exact.trimmed") {
             patterns %>% 
               extract(match(str_trim(x),.)) %>%
               inset(x, !is.na(.), .)
             }
           } else {
            stri_replace_all_regex(.
                                 , patterns
                                 , replacements
                                 , vectorize_all = FALSE)
           }}
      } else if(patterns.mode %in% c("first", "last")) {
        patterns.length <- length(patterns)
        replacements %<>% {if(length(.) == 1) rep(., patterns.length) else .}
        if(length(patterns.type) == 1 &
           patterns.type[1] == "fixed") {
          for (i in 1:patterns.length) {
            x.vector %<>% stri_replace(fixed = patterns[i]
                                     , replacement = replacements[i]
                                     , mode = patterns.mode)
          }
        } else {
          for (i in 1:patterns.length) {
            x.vector %<>% stri_replace(regex = patterns[i]
                                     , replacement = replacements[i]
                                     , mode = patterns.mode)
          }
        }
      } else {
        stop("Wrong type of patterns.type!")
      }
    } else if(length(patterns.mode) == length(patterns)) {
      patterns.length <- length(patterns)
      replacements %<>% {if(length(.) == 1) rep(., patterns.length) else .}
      a <- NULL #???
      for (i in 1:patterns.length) {
        x.vector %<>% stri_replace(regex = patterns[i]
                                 , replacement = replacements[i]
                                 , mode = patterns.mode[i])
      }
    } else stop("Wrong length of patterns.mode")
    ## ---------
    ## inset x.vector
    harmonize.x(x, x.vector, ...) %>% return()
  }


  do.call

  Reduce
#+END_SRC


*** detect_patterns
:PROPERTIES:
:ID:       org:bb21tpb0wei0
:END:

#+BEGIN_SRC R :tangle R/detect_patterns.r
  ##' transpose list of vectors
  transpose_list_of_vectors <- function(l) {
      do.call(mapply, c(FUN = list(c), l, list(USE.NAMES = FALSE, SIMPLIFY = FALSE)))
  }

  and_rows <- function(rows_1, rows_2, x) {
      if(is.null(rows_1)) return(rows_2)
      if(is.null(rows_2)) return(rows_1)
      if(is.numeric(rows_1)) rows_1 <- 1:x_length(x) %in% rows_1
      if(is.numeric(rows_2)) rows_2 <- 1:x_length(x) %in% rows_2
      rows_1 & rows_2
  }

  or_rows <- function(rows_1, rows_2, x) {
      if(is.null(rows_1)) return(rows_1)
      if(is.null(rows_2)) return(rows_2)
      if(is.numeric(rows_1)) rows_1 <- 1:x_length(x) %in% rows_1
      if(is.numeric(rows_2)) rows_2 <- 1:x_length(x) %in% rows_2
      rows_1 | rows_2
  }


  #' Codes strings (e.g., organizational names) based on certain patterns
  #'
  #' @param x Vector or table to detect in.
  #' @param patterns Accepts both vector or table. If patterns it is table can also include replacements column.
  #' @param patterns_col If patterns is a table this specifies which column to use. Default is 1.
  #' @param patterns_codes_col If patterns is table which column to use as codes column. Default is 2.
  #' @param patterns_type Specifies kind(s) of patterns. Default is "fixed" (calling code{\link[stringi]{stri_replace_all_fixed}}). Other options are:
  #' @eval escape_regex_for_type(return_docs = TRUE)
  #' @param patterns_type_col Column in patterns table where you can specify types of patterns for each pattern. If set then `patterns.type` is ignored. Default is NULL.
  #' @param patterns_codes If provided use it as codes. Should be the same length as patterns. Default is NULL.
  #' @param codes_col_name If provided use it as a name for codes column (new if it does not exist or the one to update) in results.
  #' @param codes_col_name_suffix If `codes_col_name` is not provided use this suffix to append to `col` name or `x_atomic_name`  (see`harmonize_options`).
  #' @param codes_omitted_rows_value If `rows` is set. Use this value to fill the omitted rows. When we update existing codes column Default is NULL which means that we use initial codes values for omitted rows. If there is no codes col to update omited rows will be filled with NA.
  #' @param no_match_code If provided code records that did not get any match with it. 
  #' @param codes_update_empty If toggled on then detect and add new codes only for records (rows) that were not yet coded (i.e., related codes are either "", NA or length == 0).
  #' @param codes_merge If set then merge (append or prepend) new codes to existing ones. It might turn the codes column to list of vectors.
  #' @param codes_merge_prepend If set then it will prepend new codes if not then it will append (default). It is ignored if `x.codes.merge` is not set.
  #' @param return_only_codes If toggled on then just return codes vector.
  #' @param return_only_first_detected_code If TRUE then return only codes for the first detected pattern. If FALSE return list of all matched codes. Default is TRUE. (Currently does affect performance)
  #' 
  #' @inheritDotParams harmonize_options
  #' 
  #' @return The updated `x` table with codes column or just codes if `return_only_codes` is set.
  #'
  #' @import stringi stringr magrittr
  #' 
  #' @export
  detect_patterns <- function(x
                             , patterns
                             , patterns_col = 1
                             , patterns_codes_col = 2
                             , patterns_type = "fixed"
                             , patterns_type_col = NULL
                             , patterns_codes = NULL
                             , codes_col_name = NULL
                             , codes_col_name_suffix = "_coded"
                             , codes_omitted_rows_value = NULL
                             , no_match_code = NULL
                             , codes_update_empty = FALSE
                             , codes_merge = FALSE
                             , codes_merge_prepend = FALSE
                             , return_only_codes = FALSE
                             , return_only_first_detected_code = FALSE
                             , ...) {
      ## check some arguments that are not checked elsewhere
      checkmate::assert_string(no_match_code, null.ok = TRUE, na.ok = TRUE)
      checkmate::assert_flag(codes_update_empty)
      checkmate::assert_flag(codes_merge)
      checkmate::assert_flag(codes_merge_prepend)
      checkmate::assert_flag(return_only_codes)
      checkmate::assert_flag(return_only_first_detected_code)
      ## set rows and excule those that coded
      rows <- get_col_and_rows()$rows
      if(codes_update_empty) {
          rows <- get_target(x
                           , rows = NULL
                           , name = codes_col_name
                           , name_suffix = codes_col_name_suffix
                           , output = "append_to_x"
                           , return_null_for_new_col = TRUE) |>
              harmonize_is_data_empty() |>
              and_rows(rows, x)
      }
      ## --------------------------------------------------------------------------------
      ## get vectors
      x_vector <- get_target(x, rows = rows)
      ## check if there is something to code
      if(length(x_vector) == 0) return(x)
      ## types (choices are checked in escape_regex_for_types)
      types_vector <- get_vector(patterns, patterns_type_col
                               , fallback_value = patterns_type)
      if(length(types_vector) == 0) return(x)
      ## get patterns excaped according to types.vector
      patterns_vector <-
          get_vector(patterns, patterns_col) |>
          escape_regex_for_types(types_vector)
      if(length(patterns_vector) == 0) return(x)
      ## get codes
      codes_vector <- get_vector(patterns, patterns_codes_col
                               , fallback_value = patterns_codes
                               , fallback_value_supersedes = TRUE)
      if(length(patterns_vector) == 0) return(x)
      ## --------------------------------------------------------------------------------
      ## detect and clean up
      x_inset_vector <-
          mapply(\(pattern, pattern_type, code)
              switch(pattern_type
                   , "fixed" = stringi::stri_detect_fixed(x_vector, pattern)
                   , "exact" = x_vector == pattern
                   , "trim_exact" = stringi::stri_trim_both(x_vector) == pattern
                   , stringi::stri_detect_regex(x_vector, pattern)
                     ) |> ifelse(code, NA)
               , patterns_vector
               , types_vector
               , codes_vector
               , SIMPLIFY = FALSE
               , USE.NAMES = FALSE) |>
          transpose_list_of_vectors() |>
          lapply(harmonize_omit_empty)
      ## code unmached records if needed
      if(!is.null(no_match_code)) {
          x_inset_vector <- 
              ifelse(lapply(x_inset_vector, length) == 0
                   , no_match_code
                   , x_inset_vector)
      }
      ## check if only first detected code is needed
      if(return_only_first_detected_code) {
          x_inset_vector <-
              lapply(x_inset_vector
                   , \(x) if(length(x) > 1) x[1] else x)
      }     ## merge if there is something to merge with
      if(codes_merge && !codes_update_empty) {
          x_codes_vector <- get_target(x
                                     , rows = rows
                                     , name = codes_col_name
                                     , name_suffix = codes_col_name_suffix
                                     , output = "append_to_x"
                                     , return_null_for_new_col = TRUE)
          if(!is.null(x_codes_vector)) {
              if(codes_merge_prepend) {
                  x_inset_vector <- mapply(c, x_codes_vector, x_inset_vector
                                         , SIMPLIFY = FALSE
                                         , USE.NAMES = FALSE)
              } else {
                  x_inset_vector <- mapply(c, x_inset_vector, x_codes_vector
                                         , SIMPLIFY = FALSE
                                         , USE.NAMES = FALSE)
              }
          }
      }
      x_inset_vector <- unlist_if_possible(x_inset_vector)
      if(return_only_codes) return(x_inset_vector)
      ## append codes (if prepend allowed it will break target col inference)
      inset_target(x_inset_vector, x
                 , rows = rows
                 , output = "append_to_x"
                 , name = codes_col_name
                 , name_suffix = codes_col_name_suffix
                 , omitted_rows_values = codes_omitted_rows_value
                 , omitted_rows_values_for_new_col = NA_character_)
  }

  #+END_SRC

#+BEGIN_SRC R :tangle inst/tinytest/test_detect_patterns.r
  ## Tests for detect_patterns
  library("data.table")

  ## testing x.rows
  expect_equal(
      detect_patterns(
          x = data.frame(
              name = c(
                  "MSlab Co.",
                  "IBM Corp.",
                  "Tilburg University"
              ),
              codes = c("", 3, NA),
              lala = 1
          ),
          patterns = c("Co.", "Corp.", "MS"),
          patterns_type = "ends",
          codes_col_name = "codes.new",
          patterns_codes_col = 1,
          codes_merge = TRUE,
          rows = c(FALSE, TRUE, FALSE)
      ),
      data.table(name = c("MSlab Co.", "IBM Corp.", "Tilburg University"), codes = c("", "3", NA), lala = c(1, 1, 1), codes.new = c(
          NA,
          "Corp.", NA
      ))
  )


  ## with codes.omitted.val = NA
  expect_equal(
      detect_patterns(
          x = data.frame(
              name = c(
                  "MSlab Co.",
                  "IBM Corp.",
                  "Tilburg University"
              ),
              codes = c("", 3, NA),
              lala = 1
          ),
          patterns = c("Co.", "Corp.", "MS"),
          patterns_type = "ends",
          codes_omitted_rows_value = "omitted",
          codes_col_name = "codes_new",
          patterns_codes_col = 1,
          codes_merge = TRUE,
          rows = c(FALSE, TRUE, FALSE)
      ),
      data.table(name = c("MSlab Co.", "IBM Corp.", "Tilburg University"), codes = c("", "3", NA), lala = c(1, 1, 1), codes_new = c("omitted", "Corp.", "omitted"))
  )

  ## testing x.rows again with x.codes.col
  expect_equal(
      detect_patterns(data.frame(
          name = c(
              "MSlab Co.",
              "IBM Corp.",
              "Tilburg University"
          ),
          codes = c("", 3, NA),
          lala = 1
      ),
      c("Co.", "Corp.", "MS"),
      patterns_type = "ends",
      patterns_codes_col = 1,
      codes_col_name = "codes",
      codes_merge = TRUE,
      rows = c(FALSE, TRUE, FALSE)
      ),
      structure(list(name = c("MSlab Co.", "IBM Corp.", "Tilburg University"), codes = list("", c("Corp.", "3"), NA_character_), lala = c(
          1,
          1, 1
      )), row.names = c(NA, -3L), class = c("data.table", "data.frame"))
  )

  ## same as about but for vector
  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      patterns = c("Co.", "Corp.", "MS"),
      patterns_type = "ends",
      patterns_codes = "ala",
      return_only_codes = FALSE
      ),
      structure(list(V1 = c("MSlab Co.", "IBM Corp.", "Tilburg University"), V1_coded = c("ala", "ala", NA)), row.names = c(NA, -3L), class = c("data.table", "data.frame"))
  )

  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      patterns = c("Co.", "Corp.", "MS"),
      patterns_type = "ends",
      patterns_codes = "ala",
      return_only_codes = TRUE
      ),
      c("ala", "ala", NA)
  )




  expect_equal(
      detect_patterns(
          data.frame(
              name = c(
                  "MSlab Co.",
                  "IBM Corp.",
                  "Tilburg University"
              ),
              codes = c("", 3, NA)
          ),
          patterns = "Corp.",
          patterns_type = "ends",
          return_only_codes = TRUE
      ),
      c(NA, "Corp.", NA)
  )






  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      data.table(c("Co.", "Co"),
          type = c("corp", "corp2"),
          some.extra.col = c(1, 2)
      ),
      return_only_first_detected_code = FALSE
      ),
      structure(list(V1 = c("MSlab Co.", "IBM Corp.", "Tilburg University"), V1_coded = list(c("corp", "corp2"), "corp2", character(0))), row.names = c(
          NA,
          -3L
      ), class = c("data.table", "data.frame"))
  )





  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      patterns_codes = "single code",
      data.table(c("Co.", "Co"),
          some.extra.col = c(1, 2)
      )
      ),
      structure(list(V1 = c("MSlab Co.", "IBM Corp.", "Tilburg University"), V1_coded = list(
          c("single code", "single code"), "single code",
          character(0)
      )), row.names = c(NA, -3L), class = c(
          "data.table",
          "data.frame"
      ))
  )

  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      data.table(c("Co.", "Co"),
          type = c(FALSE, TRUE),
          some.extra.col = c(1, 2)
      ),
      return_only_first_detected_code = TRUE
      ),
      structure(list(V1 = c("MSlab Co.", "IBM Corp.", "Tilburg University"), V1_coded = c("FALSE", "TRUE", NA)), row.names = c(NA, -3L), class = c(
          "data.table",
          "data.frame"
      ))
  )




  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      data.frame(c("Co.", "Co"),
          type = c("corp", "corp2")
      ),
      return_only_first_detected_code = TRUE,
      patterns_type = "ends"
      ),
      structure(list(V1 = c("MSlab Co.", "IBM Corp.", "Tilburg University"), V1_coded = c("corp", NA, NA)), row.names = c(NA, -3L), class = c("data.table", "data.frame"))
  )





  expect_equal(
      detect_patterns(c(
          "MSlab Co",
          "MS3lab Co",
          "MSlab8 Co.",
          "IBM Corp.",
          "Tilburg University",
          " TiU    "
      ),
      data.frame(c("Co", "IBM", "MS[^0-9]+", "TiU", "Univ\\w+"),
          code = c("corp", "ibm", "ms", "tiu", "univ"),
          type = c("ends", "begins", "regex", "trim_exact", "regex")
      ),
      return_only_first_detected_code = TRUE,
      patterns_type_col = 3
      ),
      structure(list(V1 = c(
          "MSlab Co", "MS3lab Co", "MSlab8 Co.",
          "IBM Corp.", "Tilburg University", " TiU    "
      ), V1_coded = c(
          "corp",
          "corp", "ms", "ibm", "univ", NA
      )), row.names = c(NA, -6L), class = c(
          "data.table",
          "data.frame"
      ))
  )





  expect_equal(
      detect_patterns(c(
          "MSlab Co",
          "MS3lab Co",
          "MSlab8 Co.",
          "IBM Corp.",
          "Tilburg University",
          " TiU    "
      ),
      data.frame(c("Co", "IBM", "MS[^0-9]+", "TiU", "Univ\\w+"),
          code = c("corp", "ibm", "ms", "tiu", "univ"),
          type = c("ends", "begins", "regex", "trim_exact", "regex")
      ),
      patterns_type_col = 3
      ),
      structure(list(V1 = c(
          "MSlab Co", "MS3lab Co", "MSlab8 Co.",
          "IBM Corp.", "Tilburg University", " TiU    "
      ), V1_coded = list(
          c("corp", "ms"), "corp", "ms", "ibm", "univ", character(0)
      )), row.names = c(
          NA,
          -6L
      ), class = c("data.table", "data.frame"))
  )

  ## testing adding to list

  expect_equal(
      detect_patterns(data.table(
          name = c(
              "MSlab Co.",
              "IBM Corp.",
              "Tilburg University"
          ),
          codes = list(
              c("cool firm", "best firm ever"),
              "cool firm",
              "univer"
          ),
          lala = c(1, 2, 3)
      ),
      patterns = c("Co.", "Corp.", "MS"),
      patterns_type = "ends",
      patterns_codes = "corporation",
      codes_col_name = "codes",
      codes_merge = TRUE,
      rows = c(FALSE, TRUE, FALSE)
      ),
      data.table(name = c("MSlab Co.", "IBM Corp.", "Tilburg University"), codes = list(c("cool firm", "best firm ever"), c("corporation", "cool firm"), "univer"), lala = c(1, 2, 3))
  )

  ## test all missmatches (all NAs call fall to logical class and cause errow on assesment)
  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      data.table(c("Coxx", "Corr"),
          type = c("corp", "corp2"),
          some.extra.col = c(1, 2)
      ),
      return_only_first_detected_code = FALSE
      ),
      structure(list(V1 = c("MSlab Co.", "IBM Corp.", "Tilburg University"), V1_coded = c(NA_character_, NA_character_, NA_character_)), row.names = c(
          NA,
          -3L
      ), class = c("data.table", "data.frame"))
  )


  ## test unmatch codes
  expect_equal(
      detect_patterns(c(
          "MSlab Co.",
          "IBM Corp.",
          "Tilburg University"
      ),
      data.table(c("Coxx", "Co."),
          type = c("corp", "corp2"),
          some.extra.col = c(1, 2)
      ),
      return_only_first_detected_code = FALSE,
      no_match_code = "no_match"
      ),
      structure(list(V1 = c("MSlab Co.", "IBM Corp.", "Tilburg University"), V1_coded = c("corp2", "no_match", "no_match")), row.names = c(NA, -3L), class = c("data.table", "data.frame"))
  )
#+END_SRC

**** old
#+BEGIN_SRC R :tangle R/harmonizer.r
  #' This function is basically meant for coding names based on certain pattern
  #'
  #' Optionally matches only at the beginning or at the end of the string.
  #' 
  #' @param x Vector or table to detect in.
  #' @param patterns Accepts both vector or table. If patterns it is table can also include replacements column.
  #' @param patterns.col If patterns is not a vector specifies which column to use. Default is 1.
  #' @param patterns.as.codes If set then use patterns as codes. In that case codes are ignored and there is no need to provide them. Default is FALSE.
  #' @param patterns.codes.col If patterns is table which column to use as codes column. Default is 2.
  #' @param patterns.type Specifies kind(s) of patterns. Default is "fixed" (calling code{\link[stringi]{stri_replace_all_fixed}}). Other options are "begins", "ends" - which means that it should only match fixed pattern at the beginning of the string or at the and. Another possible value is "regex" (calling code{\link[stringi]{stri_replace_all_regex}}). Another possible options are "exact" and "trim.exact" which matches a pattern string exactly or its trimmed version (i.e., white spaces are ignored at the beginning and at the end of the pattern)
  #' @param patterns.type.col Column in patterns table where you can specify types of patterns for each pattern. If set then `patterns.type` is ignored. Default is NULL
  #' @param codes If provided use it as codes. Should be the same length as patterns. Default is NULL.
  #' @param codes.name If provided use it as a name for codes column in results. It also will work as `x.codes.col` if `x.codes.merge` or `x.codes.update.empyty` are set. In case if `x.codes.merge` or `x.codes.update.empyty` are set and names(`x`) does not have column name `codes.name` it will reset both `x.codes.merge` and `x.codes.update.empyty` to FALSE and will (pre)append a new column `codes.name`.
  #' @param codes.suffix If `codes.name` is not provided use this suffix to append to `x.col` name or `x.atomic.name` if x is vector (see harmonize.x function).
  #' @param codes.omitted.val If `x.rows` is set. Use this value to fill the omitted rows. Default is vector of NAs of `x` length. When we update existing codes column (i.e., `x.codes.col` is set and valid) and the value is not set explicitly it resets to NULL which means that we use initial values for omitted rows.
  #' @param codes.prepend Whether to prepend codes column to the `x`. Default is FALSE. If set it will prepend codes column to `x` instead of append.
  #' @param x.codes.col If `x` is table, which column to use for making/merging/adding newly detected codes. Default is NULL. When it is not set explicitly and `x.codes.merge` or `x.codes.update.empty` are set it will first try to use `codes.name` if it is provided or if not will set the last column of `x` as `x.codes.col`.
  #' @param x.codes.update.empty If set then detect and add new codes only for records (rows) that were not yet coded (i.e., related codes are either "", NA or length == 0).
  #' @param x.codes.merge If set then merge (append or prepend) new codes to existing ones. It might turn the codes column to list of vectors.
  #' @param x.codes.merge.prepend If set then it will prepend new codes if not then it will append (default). It is ignored if `x.codes.merge` is not set.
  #' @param return.only.codes If set then just return codes vector. Default is FALSE. Basically when it is set it changes `return.x.cols` to 0.
  #' @param return.only.first.detected.code If TRUE then return only codes for the first detected pattern. If FALSE return list of vectors of all matched codes. Default is TRUE.
  #' 
  #' @inheritDotParams harmonize.x
  #' 
  #' @return The updated `x` table with codes column or just codes if `return.only.codes` is set.
  #'
  #' @import stringi stringr magrittr
  #' 
  #' @export
  harmonize.detect <- function(x
                             , patterns
                             , patterns.col = 1
                             , patterns.as.codes = FALSE
                             , patterns.codes.col = 2
                             , patterns.type = c("fixed"
                                                , "begins"
                                                , "begins.trimmed"
                                                , "ends"
                                                , "ends.trimmed"
                                                , "regex"
                                                , "exact"
                                                , "exact.trimmed")
                             , patterns.type.col = NULL
                             , codes = NULL
                             , codes.name = NA
                             , codes.suffix = "coded"
                             , codes.omitted.val = NA
                             , codes.prepend = FALSE
                             , x.codes.col = NULL
                             , x.codes.update.empty = FALSE
                             , x.codes.merge = FALSE
                             , x.codes.merge.prepend = FALSE
                             , return.only.codes = FALSE
                             , return.only.first.detected.code = FALSE
                             , ...) {
      ## set x.rows.codes.update for dots.and("x.rows")
      x.rows.codes.update <- rep(TRUE, harmonize_data_length(x)) # by defaults updates all codes
      harmonize.detect..check.args()                           # also sets x.rows.codes.update
      ## --------------------------------------------------------------------------------
      x.vector <- harmonize.x(x, x.rows = dots.and("x.rows", x.rows.codes.update))
      patterns.type.vector <- harmonize.detect..get.patterns.type.vector()
      patterns.vector <-  harmonize.detect..get.patterns.vector()
      codes.vector <- harmonize.detect..get.codes.vector()
      x.codes.vector <- harmonize.detect..get.x.codes.vector()
      ## --------------------------------------------------------------------------------
      ## if there is something to detect in
      x.inset.vector <- if(length(x.vector) !=0) {
                            harmonize.detect..do.vector()
                        } else {
                            ## if x.vector is empty then skip detection and inset empty
                            character(0)
                        }
      ## inset codes
      harmonize.x.dots(x, x.inset.vector
                     , x.rows = dots.and("x.rows", x.rows.codes.update)
                     , x.col = x.codes.col
                     , x.col.update = if(return.only.codes) FALSE
                                      else dots.default("x.col.update"
                                                      , x.codes.update.empty | x.codes.merge)
                     , inset.omitted.val = codes.omitted.val
                     , inset.name = codes.name
                     , inset.suffix = codes.suffix
                     , inset.append = dots.default("inset.append", !codes.prepend)
                     , return.x.cols = if(return.only.codes) NULL
                                       else dots.default("return.x.cols"
                                                       , 1:harmonize_data_width(x)))
  }

  harmonize.detect..check.args <- function(env = parent.frame()) {
      evalq({
          ## -- patterns is check by harmonize.x
          ## -- patterns.col is check by harmonize.x
          ## -- check patterns.type by ...
          ## -- check patterns.type.col - by harmonize.detect..get.patterns.type.vector
          ## - check patterns.as.codes
          harmonize_is_ok_type(patterns.as.codes)
          ## -- check patterns.codes.col - by harmonize.detect..get.codes.vector
          ## -- check codes - by harmonize.detect..get.codes.vector
          ## -- check codes.name - also by harmonize.x
          ## -- check codes.suffix - by harmonize.x
          ## -- check codes.omitted.val - by harmonize.x
          ## -- check codes.prepend - by harmonize.x
          ## - check x.codes.merge
          harmonize_is_ok_type(x.codes.merge)
          ## - check x.codes.update.empty
          harmonize_is_ok_type(x.codes.update.empty)
          ## - check x.codes.col (should not be the same as x.col)
          if(harmonize_is_ok_col(x.codes.col, x
                               , ban.values = dots.default("x.col", 1))) {
              x.codes.col %<>% switch(is.numeric(.) + 1, match(., names(x)), .)
              ## use x.codes.col as codes.omitted.val if it is not set
              if(missing(codes.omitted.val)) codes.omitted.val <- NULL
          } else if(x.codes.merge | x.codes.update.empty) {
              ## set x.codes.col as last one
              x.codes.col <- harmonize_data_width(x)
              ## check codes.names just in case
              harmonize_is_ok_type(codes.name, x.length = 1
                                 , type = "character"
                                 , allow.null = FALSE)
              if(codes.name %in% names(x)) {
                  ## set as x.codes.col as codes.name
                  x.codes.col <- match(codes.name, names(x))
                  if(missing(codes.omitted.val)) codes.omitted.val <- NULL
              } else if(!is.na(codes.name)) {
                  ## if codes.name is provided and it is a new name then append codes
                  x.codes.merge <- FALSE
                  x.codes.update.empty <- FALSE
              } else {
                  ## use x.codes.col as codes.omitted.val if it is not set
                  if(missing(codes.omitted.val)) codes.omitted.val <- NULL
              }
          } else {
              ## set x.codes.col as last one anyway
              x.codes.col <- harmonize_data_width(x)
          }
          ## set x.rows.codes.update for dots.and("x.rows")
          if(x.codes.update.empty) {
              x.rows.codes.update <- harmonize_is_data_empty(x[[x.codes.col]])
              x.codes.merge <- FALSE # nothing to merge with if codes are empty
          }
          ## - check return.only.codes
          harmonize_is_ok_type(return.only.codes)
          ## - check return.only.first.detected.code
          harmonize_is_ok_type(return.only.first.detected.code)
      }, envir = env)
  }

  harmonize.detect..get.patterns.type.vector <- function(env = parent.frame()) {
    evalq({
          if(harmonize_is_ok_col(patterns.type.col, patterns)) {
              harmonize.x(patterns, x.col = patterns.type.col)
          }
          else {
              harmonize.match.arg(patterns.type)
          }
      }, envir = env)
  }

  harmonize.detect..get.patterns.vector <- function(env = parent.frame()) {
    evalq({
          harmonize.x(patterns, x.col = patterns.col) %>% 
              escape_regex_for_types(patterns.type.vector, escape_fixed = TRUE)
      }, envir = env)
  }

  harmonize.detect..get.codes.vector <- function(env = parent.frame()) {
      evalq({
          if(patterns.as.codes) patterns.vector
          else if(harmonize_is_ok_type(codes
                                     , x.length = c(1, harmonize_data_length(patterns))
                                     , type = "atomic")) {
              if(length(codes) == 1)    
                  rep(defactor(codes), harmonize_data_length(patterns))
              else defactor(codes)
          }
          else if(harmonize_is_ok_col(patterns.codes.col, patterns))
              harmonize.x(patterns, x.col = patterns.codes.col)
          else stop("No codes provided.")
      }, envir = env)
  }

  harmonize.detect..get.x.codes.vector <- function(env = parent.frame()) {
      evalq({
          if(!is.null(x.codes.col))
              harmonize.x(x
                        , x.col = x.codes.col
                        , x.rows = dots.and("x.rows", x.rows.codes.update))
          else NULL
      }, envir = env)
  }


  ## given x, patterns, types, codes vectors do detection
  harmonize.detect..do.vector <- function(env = parent.frame()) {
      evalq({
          mapply(function(pattern, pattern.type, code) {
              x.vector %>% 
                  {if(pattern.type == "fixed")
                       stri_detect_fixed(., pattern)
                   else if(pattern.type == "exact")
                       . == pattern
                   else if(pattern.type == "exact.trimmed")
                       str_trim(.) == pattern
                   else stri_detect_regex(., pattern)} %>% 
                  ifelse(code, NA)
          }
        , patterns.vector
        , patterns.type.vector
        , codes.vector
        , SIMPLIFY = FALSE
        , USE.NAMES = FALSE) %>%
            ## transpose list of vectors
            {do.call(Map, c(list(c), .))} %>% 
            ## remove empty codes
            lapply(harmonize_omit_empty) %>%
            ## check if only first detected code is needed
            {if(return.only.first.detected.code) lapply(.,extract, 1) else .} %>% 
            ## check if we need to merge
            {if(x.codes.merge & !x.codes.merge.prepend)
                 Map(c, x.codes.vector, .)
             else if(x.codes.merge & x.codes.merge.prepend)
                 Map(c, ., x.codes.vector)
             else .} %>% 
            ## remove empty codes
            lapply(harmonize_omit_empty) %>%
            unlist_if_possible
      }, envir = env)
  }
#+END_SRC


** harmonize
:PROPERTIES:
:ID:       org:ifb5ac70uai0
:END:

The default harmonization procedures are the following (for now):

#+NAME: harmonizer.default.procedures.table
| no | message                            | function.call                                    |
|----+------------------------------------+--------------------------------------------------|
|    | *Prepossessing*                    |                                                  |
|  1 | Cleaning spaces                    | 'harmonize.squish.spaces', wrap.in.spaces = TRUE |
|    |                                    |                                                  |
|    | *Characters*                       |                                                  |
|  2 | Removing HTML codes                | 'harmonize.dehtmlize'                            |
|  3 | Translating non-ASCII to ASCII     | 'harmonize.toascii'                              |
|  4 | Upper casing                       | 'harmonize.toupper'                              |
|    |                                    |                                                  |
|    | *Cleaning*                         |                                                  |
|  5 | Standardizing organizational names | 'cockburn.replace.punctuation'                   |
|  6 | Removing brackets                  | 'harmonize.remove.brackets'                      |
|  7 | Cleaning spaces                    | 'harmonize.squish.spaces'                        |

#+call: make-rds-patterns-table(data = harmonizer.default.procedures.table, data.name = "harmonizer.default.procedures.table", remove.single.quotes = "FALSE", data.dir = "data", add.to.rda = "R/sysdata.rda")


#+BEGIN_SRC R :tangle R/harmonizer.r
  ##' Harmonizes organizational names. Takes either vector or column in the table.
  ##' 
  ##' @param x object (table)
  ##' @param procedures Named list of procedures (closures) to apply to x. If we need to pass arguments to some of the procedures it can be done by specifying sub-list where the first element is procedure and the rest its arguments. Names of the list elements are used for progress messages. Procedures can also be passed as data.frame in which case it will be converted to list of procedures with `harmonize.make.procedures.list` (see its help for the correct format of data.frame with procedures). Default is `harmonizer.default.procedures.table`
  ##' @param progress Show the progress? Default is TRUE
  ##' @param progress.min The minimum number of rows the x should have for automatic progress estimation. If x has less rows no progress will be shown. Default is 10^5
  ##' @param progress.by If set it will divide the x into chunk of this amount of rows. Default is NA.
  ##' @param progress.percent Number of percents that represent one step in progress. Value should be between 0.1 and 50. Default is 1 which means it will try to chunk the x into 100 pieces.
  ##' @param progress.message.use.names Should we use names from `procedures` list to report progress. Default is TRUE.
  ##' @param quite Suppress all messages. Default is FALSE.
  ##' @inheritDotParams harmonize.x
  ##' 
  ##' @return
  ##'
  ##' @import stringi stringr magrittr
  ##' @export
  harmonize <- function(x
                      , procedures = harmonizer.default.procedures.table
                      , progress = TRUE
                      , progress.min = 10^5
                      , progress.by = NA
                      , progress.percent = 1
                      , progress.message.use.names = TRUE
                      , quite = FALSE
                      , ...) {
    if(is.data.frame(procedures)) {
          procedures %<>% harmonize.make.procedures.list
    }
    ## make format of the massages for procedures
    message.delimiter <- paste(c("\n", rep("-", 65), "\n"), collapse = "")
    message.init <- paste0("\nApplying harmonization procedures:", message.delimiter)
    message.done  <- "\b\b\b\bDONE"
    progress.format <- "\b\b\b\b%3.0f%%"
    message.format <- "* %-60.60s...."
    message.fin <- paste0(message.delimiter, "Harmonization is done!\n")
    ## check progress.percent
    if(progress.percent < 0.1 | progress.percent > 50)
      stop("Please, set progress.percent between 0.1 and 50")
    ## ensure that x is either vector or data.table
    x %<>% {
      if(is.atomic(.)) .
      else if(is.data.table(.)) .
      else if(is_matrix(.)) as.data.table(.)
      else if(is_tible(.)) as.data.table(.)
      else if(is.data.frame(.)) as.data.table(.)
      else if(is.list(.)) stop("x is list. Please, provide either vector or table")
    }
    ## Set progress.by
    progress.by <- if(!progress | quite) NA
                   else {
                     ## calculate the length of the x
                     x.length <- x %>% {if(is.atomic(.)) length(.) else nrow(.)}
                     if(x.length < progress.min) NA
                     else if(!is.na(progress.by)) {
                       ## if progress.by is set check if it is
                       ## at least twice less than x.length
                       ## and more that 1/1000 of x.length
                       if(progress.by > x.length/1000 &
                          progress.by*2 < x.length) progress.by
                       else NA
                     } else round(x.length/(100/progress.percent))
                   }
    ## Apply Procedures
    if(!quite) message(message.init)
    for(p in 1:length(procedures)) {
      ## get procedure function
      procedure.fun <- procedures[[p]] %>% extract2(1)
      ## get procedure arguments
      procedure.args <- procedures[[p]] %>%
        ## remove progress arg if it is there
        extract(-c(1, which(names(.) == "progress")))
      ## get procedure names
      procedure.name <- names(procedures)[p] %>%
          {if(harmonize_is_data_empty(.) | !progress.message.use.names)
               procedure.fun
           else .}
      ## Anounce Procedure Name
      if(!quite) packageStartupMessage(sprintf(message.format, procedure.name)
                                     , appendLF = FALSE)
      ## Check if we need report progress:
      ## progress is set & progress = FALSE is absent in the arguments
      if(!is.na(progress.by) &
         !isFALSE(procedures[[p]]["progress"][[TRUE]])) {
        ## check if we need to split..
        if(!isTRUE(class(x) == "list")) {
          x %<>% harmonize.x.split(progress.by, x.length)
        }
        ## set progress counter
        i <- 0; env <- environment()
        ## Apply procedure to list!
        x %<>% lapply(function(x.by) {
          ## apply procedure fun with args
          x.by %<>%
            list %>%
            c(procedure.args) %>%
            do.call(procedure.fun, .)
          ## Increment progress counter
          assign("i", i + 100 * progress.by / x.length, envir = env)
          ## Anounce progress
          packageStartupMessage(sprintf(progress.format, i)
                              , appendLF = FALSE)
          return(x.by)
        })
      } else {
        ## check if we need to rbindlist..
        if(isTRUE(class(x) == "list")) {
          if(is.atomic(x[[1]])) x %<>% unlist(use.names = FALSE)
          else x %<>% rbindlist
        }
        ## Apply procedure fun with args!
        x %<>% 
          list %>%
          c(procedure.args) %>%
          do.call(procedure.fun, .)
      }
      ## Anounce DONE
      if(!quite) packageStartupMessage(message.done)
    }
    if(!quite) message(message.fin)
    ## Return X
    if(isTRUE(class(x) == "list")) {
      if(is.atomic(x[[1]])) x %>% unlist(use.names = FALSE)
      else x %>% rbindlist
    } else x
  }
#+END_SRC

#+name: 
#+BEGIN_SRC R
  ## tests
  ## dummy <- function(x, n) {
  ##   for(i in 1:n) x <- sqrt(x)^2
  ##   return(x)
  ## }
  
  ## list("Squaring stuff" = "sqrt"
  ##     ,list("abs", progress = FALSE)
  ##     ,list("log", base = 10)
  ##    , "My function" = list("dummy", 10^6, progress = TRUE)) %>%
  ##   harmonize(1:10^2
  ##           , . 
  ##           , progress.min = 10
  ##           , progress.by = 30)
#+END_SRC

* Magerman, et al. (2006) - Harmonization Procedure

Notes:
[[id:org:zy6j0m20vai0][Magerman, Van Looy & Song, 2006 - Name harmonisation]]
# Pdf: [[zotero://select/items/1_IT9A958K][Magerman et al., 2006 - Data Production Methods for Harmonized Patent Statistics: Patentee Name Harmonization]]

direct link:
[[file:C:\Users\svlasov\Zotero\storage\PHAJ4WAB\Magerman et al. - 2006 - Data Production Methods for Harmonized Patent Stat.pdf]]

Magerman, T., Van Looy, B., Song, X., European Commission, & Eurostat. (2006). Data production methods for harmonised patent statistics patentee name harmonisation.

Full text: https://core.ac.uk/download/pdf/34432497.pdf

** Characters
:PROPERTIES:
:ID:       org:qwne4v20zai0
:END:

Patterns used to identify characters to clean
| pattern | regex   | procedure                  |
|---------+---------+----------------------------|
| %{%}%   | {.+}    | propriety coded characters |
| %[0%]%  | \[0.+\] | propriety coded characters |
| %(%)%   | \(.+\)  | propriety coded characters |
| %&%;%   | &.+;    | sgml coded characters      |
| %<%>%   | <.+>    | html coded characters      |

The function below can be used to detect candidates for characters that need to be cleaned based on the table above.

#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Detects candidates for characters that need to be cleaned
  ##' @param x table
  ##' @inheritDotParams harmonize.detect
  ##' @return coded table
  ##'
  ##' @md
  ##' @import magrittr
  ##' @export
  magerman_detect_characters <- function(x,
                                         codes.name = "characters.cleaning.candidates",
                                         ...) {
      harmonize.detect(x,
          patterns = c(
              "\\{.+\\}", "propriety coded characters {xxx}",
              "\\[0.+\\]", "propriety coded characters [0xxx]",
              "\\(.+\\)", "propriety coded characters (xxx)",
              "&.+;", "sgml coded characters",
              "<.+>", "html coded characters"
          ) %>%
              matrix(byrow = TRUE, ncol = 2) %>%
              data.frame(),
          patterns.type = "regex",
          codes.name = codes.name,
          ...
      )
  }
#+END_SRC


#+name: 
#+BEGIN_SRC R
  ## Test
  ## "Chip &AMP; Dayle (lala) [0x2345] {abs} ops html <br>" %>% 
  ##   magerman.detect.characters
#+END_SRC

*** magerman.remove.html.codes
:PROPERTIES:
:ID:       org:b6l29ts0lei0
:END:

#+BEGIN_SRC R :tangle ./R/magerman.r
   ##' Removes html codes
   ##' @param x table
   ##' @inheritDotParams harmonize_options
   ##' @return harmonized table
   ##'
   ##' @md
   ##' @export
   magerman_remove_html_codes <- function(x, ...) {
       replace_patterns(x
           , patterns = "<BR>"
           , replacements = " ")
   }

#+END_SRC


#+BEGIN_SRC R :tangle inst/tinytest/test_magerman_remove_html_codes.r
  expect_equal(
      magerman_remove_html_codes("bla bla <BR>")
    , "bla bla  "
  )
  #+END_SRC

*** magerman.replace.sgml.characters
:PROPERTIES:
:ID:       org:xsagib50bci0
:END:

Table 7: SGML codes and their ASCII/ANSI equivalent
#+NAME: magerman.patterns.sgml.characters
| sgml.code | replacement.character |
|-----------+-----------------------|
| &AMP;     | &                     |
| &OACUTE;  | Ó                     |
| &SECT;    | §                     |
| &UACUTE;  | Ú                     |
| &#8902;   | ' '                   |
| &BULL;    | .                     |
| &EXCL;    | !                     |

#+call: make-rds-patterns-table(data = magerman.patterns.sgml.characters, data.name = "magerman.patterns.sgml.characters")

#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Replaces sgml characters. Accept both vector and table and return either vector or a table
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_replace_sgml_characters <- function(x, ...) {
      replace_patterns(x, magerman.patterns.sgml.characters, ...)
  }


  ## test
  ## test.df <-
  ## data.frame(
  ##     c("&AMP;&OACUTE;&SECT; 02937lkjfas;ldjf  &UACUTE;&#8902;&BULL; sdlfkjhhhh ;laskdjf&EXCL;"
  ##   ,   "&AMP;&OACUTE;&SECT; 02937lkjfas;ldjf  &UACUTE;&#8902;&BULL; sdlfkjhhhh ;laskdjf&EXCL;")
  ##   , c("swe"
  ##     , "w3r"))

  ## test.df %>%
  ##     harmonize.replace(magerman.patterns.sgml.characters)

  ## test.df %>% magerman.replace.sgml.characters
#+END_SRC

*** magerman.replace.proprietary.characters
:PROPERTIES:
:ID:       org:zvfgib50bci0
:END:

Table 8: Proprietary character codes and their ASCII/ANSI equivalent
#+NAME: magerman.patterns.proprietary.characters
| proprietary.coded.character | replacement.character |
|-----------------------------+-----------------------|
| {UMLAUT OVER (A)}           | Ä                     |
| {UMLAUT OVER (E)}           | Ë                     |
| {UMLAUT OVER (O)}           | Ö                     |
| {UMLAUT OVER (U)}           | Ü                     |
| {UMLAUT OVER (N)}           | N                     |
| {UMLAUT OVER (R)}           | R                     |
| {UMLAUT OVER (Z)}           | Z                     |
| {ACUTE OVER (A)}            | Á                     |
| {ACUTE OVER (E)}            | É                     |
| {ACUTE OVER (T)}            | T                     |
| {ACUTE OVER (V)}            | V                     |
| {GRAVE OVER (B)}            | B                     |
| {GRAVE OVER (R)}            | R                     |
| {OVERSCORE (A)}             | A                     |
| {OVERSCORE (D)}             | D                     |
| {OVERSCORE (E)}             | E                     |
| {OVERSCORE (O)}             | O                     |
| {OVERSCORE (U)}             | U                     |
| {DOT OVER (A)}              | A                     |
| {DOT OVER (E)}              | E                     |
| {DOT OVER (U)}              | U                     |
| {HAECK OVER (C)}            | C                     |
| {HAECK OVER (S)}            | S                     |


#+call: make-rds-patterns-table(data = magerman.patterns.proprietary.characters, data.name = "magerman.patterns.proprietary.characters")


#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Replaces proprietary characters
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_replace_proprietary_characters <- function(x, ...) {
      replace_patterns(x, magerman.patterns.proprietary.characters, ...)
  }

  ## test
  ## "&AMP;&OACUTE;&SECT; {UMLAUT OVER (E)} sdlfkjhhhh ;laskdjf&EXCL;" %>%
  ##   magerman.replace.proprietary.characters
#+END_SRC


*** magerman.replace.accented.characters
:PROPERTIES:
:ID:       org:u6lgib50bci0
:END:

Table 9: Accented characters and their unaccented equivalent
#+NAME: magerman.patterns.accented.characters
| character | unaccented.equivalent | code |
|-----------+-----------------------+------|
| À         | A                     |  192 |
| Á         | A                     |  193 |
| Â         | A                     |  194 |
| Ã         | A                     |  195 |
| Ä         | A                     |  196 |
| Å         | A                     |  197 |
| Æ         | AE                    |  198 |
| Ç         | C                     |  199 |
| È         | E                     |  200 |
| É         | E                     |  201 |
| Ê         | E                     |  202 |
| Ë         | E                     |  203 |
| Ì         | I                     |  204 |
| Í         | I                     |  205 |
| Î         | I                     |  206 |
| Ï         | I                     |  207 |
| Ñ         | N                     |  209 |
| Ò         | O                     |  210 |
| Ó         | O                     |  211 |
| Ô         | O                     |  212 |
| Õ         | O                     |  213 |
| Ö         | O                     |  214 |
| Ù         | U                     |  217 |
| Ú         | U                     |  218 |
| Û         | U                     |  219 |
| Ü         | U                     |  220 |
| Ý         | Y                     |  221 |
| Ÿ         | Y                     |  159 |

#+call: make-rds-patterns-table(data = magerman.patterns.accented.characters, data.name = "magerman.patterns.accented.characters")

#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Replaces accented characters
  ##'
  ##' Assumes that all characters are in caps.
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_replace_accented_characters <- function(x, ...) {
      replace_patterns(x, magerman.patterns.accented.characters, ...)
  }

  ## Test
  ## "ŠŒŽšœžŸ¥µÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýÿ" %>%
  ##   magerman.replace.accented.characters

  ## somewhat works:
  ## [1] "ŠŒŽšœžY¥µAAAAAAAECEEEEIIIIÐNOOOOOØUUUUYßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýÿ"
#+END_SRC

*** magerman.remove.special.characters
:PROPERTIES:
:ID:       org:lppgib50bci0
:END:

Here one probably need to add smart quotes as well...

#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Removes special characters. I.e., everything that is not:
  ## A-Z; 0-9; “-“; “+”; “’”; “””; “#”; “*”;“@”; “!”; “?”; “/”; “&”; “(“; “)”; “:”; “;”; “,”; “.”; “ “
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_remove_special_characters <- function(x, ...) {
      replace_patterns(x,
          "[^A-Z0-9\\-+'\"#*;@!?/&():;,. ]",
          patterns.type = "regex",
          ...
      )
  }

  ## test
  ## "LK \tD©𝍎 ၍\tF:'\";092834!@#$%^&*()_+-\n\t" %>%
  ##   magerman.remove.special.characters %>%
  ##   message
#+END_SRC

** Punctuation
:PROPERTIES:
:ID:       org:jftgib50bci0
:END:
*** magerman.remove.double.spaces
:PROPERTIES:
:ID:       org:7zm5vw215ei0
:END:
#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Removes punctuation and standardise some symbols. 
  ##'
  ##' @param x object
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##' 
  ##' @md
  ##' @import magrittr
  ##' @export 
  cockburn.replace.punctuation <- function(x
                                           , ...) {
    x %>%
      replace_patterns(patterns = cockburn.patterns.punctuation.and, ...) %>%
      replace_patterns(patterns = cockburn.patterns.punctuation.the
                      , patterns.type.col = 3, ...) %>%
      ## I swapted patstat with amadeus otherwise Ã²Ã¢ÃªÃ®Ã© will not become oaeie
      replace_patterns(patterns = cockburn.patterns.punctuation.patstat, ...) %>% 
      replace_patterns(patterns = cockburn.patterns.punctuation.amadeus, ...) %>%
      replace_patterns(patterns = cockburn.patterns.punctuation.char, ...)
  }

  ## Test
  ## c("WESTINGHOUSE, |.?^&*@ ELEC  "
  ## , "GRACE (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©"
  ## , "GRACE (W/R) & CO Ltd.") %>% 
  ##   cockburn.replace.punctuation
#+END_SRC

*** magerman.remove.double.quotation.marks.*
:PROPERTIES:
:ID:       org:4ir5vw215ei0
:END:
#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Removes double quotation irregularities
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_remove_double_quotation_marks_irregularities <- function(x, ...) {
      replace_patterns(x,
          patterns = c("^\"\"\\s(.*)\"$", "^\"(.*)\\s\"\"$"),
          replacements = c("\"\"$1\"", "\"$1\"\""),
          patterns.type = "regex",
          ...
      )
  }

  ## Test   magerman.remove.double.quotation.marks.irregularities
  ## c("\"\" Merry  \"Cristmas\" Love\"\""
  ## , "\"\"Merry \"\"Cristmas\"\" Love \"\"") %>%
  ##   magerman.remove.double.quotation.marks.irregularities(bind.x.cols = "all")
#+END_SRC

#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Removes double quotation irregularities
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_remove_double_quotation_marks_beginning_end <- function(x, ...) {
      replace_patterns(x,
          patterns = "^\"\"((?:(?!\"\").)*)\"\"$",
          replacements = "$1",
          patterns.type = "regex",
          ...
      )
  }

  ## Test magerman.remove.double.quotation.marks.beginning.end
  ## c("\"\"Merry  \"Cristmas\" Love\"\"" # delete quotes here
  ## , "\"\"Merry \"\"Cristmas\"\" Love\"\""  # do not delete here
  ##   ) %>%
  ##   magerman.remove.double.quotation.marks.beginning.end(bind.x.cols = "all")
#+END_SRC

*** magerman.remove.non.alphanumeric.*
:PROPERTIES:
:ID:       org:2az5vw215ei0
:END:
#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Removes non alphanumeric characters
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_remove_non_alphanumeric_at_the_beginning <- function(x, ...) {
      replace_patterns(x,
          patterns = "^[^A-Z0-9\"@('#!*/]+",
          patterns.type = "regex",
          ...
      )
  }

  ## Test:
  ## c("_MSLab Co."
  ## , "?MSLab Co."
  ## , ".-:MSLab Co.") %>% magerman.remove.non.alphanumeric.at.the.beginning


  ##' Removes non alphanumeric characters
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_remove_non_alphanumeric_at_the_end <- function(x, ...) {
      replace_patterns(x,
          patterns = "[^A-Z0-9.'\")]+$",
          patterns.type = "regex",
          ...
      )
  }

  ## Test:
  ## c("MSLab Co. :"
  ## , "MSLab Co.++"
  ## , "MSLab Co.*&^") %>% magerman.remove.non.alphanumeric.at.the.end
#+END_SRC

*** magerman.replace.comma.period.irregularities.*
:PROPERTIES:
:ID:       org:5khizmx01ei0
:END:

Patterns used to identify comma and period irregularities.

| pattern      | table | procedure                                              |
|--------------+-------+--------------------------------------------------------|
| %,[! ]%      |    10 | Patterns with comma not followed by space              |
| % ,%         |    11 | Patterns with comma preceded by space                  |
| %[!A-Z0-9].% |    12 | Patterns with period not preceded by a letter or digit |


The function below is the generalization for replacement of the above punctuation irregularities. This procedure is not a part of Margerman procedures.

#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Detects comma period irregularities
  ##' @param x table
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @import magrittr
  ##' @export
  magerman_detect_comma_period_irregularities <- function(x,
                                                          codes.name = "comma.period.irregularities.candidates",
                                                          ...) {
      c(
          ",([^\\s])", "Patterns with comma not followed by space",
          "\\s,", "Patterns with comma preceded by space",
          "([^A-Za-z0-9])\\.", "Patterns with period not preceded by a letter or digit"
      ) %>%
          matrix(byrow = TRUE, ncol = 2) %>%
          data.frame() %>%
          harmonize.detect(x,
              patterns = .,
              patterns.type = "regex",
              codes.name = codes.name,
              ...
          )
  }

  ##' Replaces comma period irregularities
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @import magrittr
  ##' @export
  magerman_replace_comma_period_irregularities_all <- function(x, ...) {
      c(
          ",([^\\s])", ", $1",
          "\\s,", ",",
          "([^A-Za-z0-9])\\.", "$1"
      ) %>%
          matrix(byrow = TRUE, ncol = 2) %>%
          data.frame() %>%
          replace_patterns(x,
              patterns =  .,
              patterns.type = "regex",
              ...
          )
  }

  ## Test magerman.replace.comma.period.irregularities.all
  ## "A sentence with .irregular punctuation ,like commas , and periods ." %>%
  ##  magerman.replace.comma.period.irregularities.all
#+END_SRC


Table 10: Patterns with comma not followed by space
#+name: magerman.patterns.comma.followed.by.space
| PATTERN      | REPLACE WITH | type  |
|--------------+--------------+-------|
| ' CO.,LTD.'  | ' CO., LTD.' | fixed |
| ' CO.,LTD'   | ' CO., LTD'  | fixed |
| ' CO,. LTD.' | ' CO., LTD.' | fixed |
| ' CO.,INC.'  | ' CO., INC.' | fixed |
| ',LTD.'      | ', LTD.'     | fixed |
| ',LTD'       | ', LTD'      | ends  |
| ',INC.'      | ', INC.'     | fixed |
| ',INC'       | ', INC'      | ends  |
| ',LLC.'      | ', LLC.'     | fixed |
| ',LLC'       | ', LLC'      | ends  |
| ',L.L.C.'    | ', L.L.C.'   | fixed |
| ',S.A.R.L.'  | ', S.A.R.L.' | fixed |
| ',S.A.'      | ', S.A.'     | fixed |
| ' CO,LTD'    | ' CO, LTD'   | ends  |
| ' CO,KG.'    | ' CO, KG.'   | fixed |
| ' CO.,KG'    | ' CO., KG'   | ends  |
| ',GMBH.'     | ', GMBH.'    | fixed |
| ',GMBH'      | ', GMBH'     | ends  |
| ',PLC'       | ', PLC'      | ends  |
| ',S.R.L.'    | ', S.R.L.'   | fixed |

#+call: make-rds-patterns-table(data = magerman.patterns.comma.followed.by.space, data.name = "magerman.patterns.comma.followed.by.space")


Table 11: Patterns with comma preceded by space
#+name: magerman.patterns.comma.preceded.by.space
| PATTERN     | REPLACE WITH | type  |
|-------------+--------------+-------|
| ' , INC.'   | ', INC.'     | fixed |
| ' , LTD.'   | ', LTD.'     | fixed |
| ' , L.L.C.' | ', L.L.C.'   | fixed |
| ' , LLC'    | ', LLC'      | ends  |
| ' , S.P.A.' | ', S.P.A.'   | fixed |
| ' , S.A.'   | ', S.A.'     | fixed |

#+call: make-rds-patterns-table(data = magerman.patterns.comma.preceded.by.space, data.name = "magerman.patterns.comma.preceded.by.space")


Table 12: Patterns with period not preceded by a letter or digit
#+name: magerman.patterns.periods
| PATTERN              | REPLACE WITH        | type  |
|----------------------+---------------------+-------|
| ', INC,.'            | ', INC.'            | ends  |
| ' CORP,.'            | ' CORP.'            | ends  |
| ' CO,.'              | ' CO.'              | ends  |
| ' COMPANY,. LIMITED' | ' COMPANY, LIMITED' | ends  |
| ' INC..'             | ' INC.'             | fixed |
| ' S.A..'             | ' S.A.'             | fixed |
| ' PTY. .LIMITED'     | ' PTY. LIMITED'     | fixed |
| ' CO.. INC.'         | ' CO. INC.'         | fixed |
| ', INC..'            | ', INC.'            | ends  |
| ' CO.. LTD.'         | ' CO. LTD.'         | ends  |
| ' A/.S'              | ' A/S'              | fixed |
| ' N..V'              | ' N.V'              | ends  |
| ' LTD..'             | ' LTD.'             | ends  |
| ' CO., LTD,.'        | ' CO., LTD.'        | ends  |
| ' CO., LTD..'        | ' CO., LTD.'        | ends  |
| ' CO.., LTD.'        | ' CO., LTD.'        | ends  |
| ' P.L.C..'           | ' P.L.C.'           | ends  |

#+call: make-rds-patterns-table(data = magerman.patterns.periods, data.name = "magerman.patterns.periods")


#+BEGIN_SRC R   :tangle ./R/magerman.r
  ##' Replaces comma period irregularities
  ##' @param x object
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @import magrittr
  ##' @export
  magerman_replace_comma_period_irregularities <- function(x, ...) {
      list(
          magerman.patterns.comma.followed.by.space,
          magerman.patterns.comma.preceded.by.space,
          magerman.patterns.periods
      ) %>%
          rbindlist() %>%
          replace_patterns(x, ., patterns.type.col = 3, ...)
  }

  ## Test magerman.replace.comma.period.irregularities
  ## c("MSlab ,INC. ,LTD"
  ## , "MSlab ,LTD Universe") %>%
  ##   magerman.replace.comma.period.irregularities(bind.x.cols = "all")
#+END_SRC

** Legal Form
"It has to be stressed that the objective is not to maximize the total number of matches (at the cost of introducing mismatches) but to minimize the number of mismatches given a reasonable number of matches."

They assumed that the last word in organizational name more likely represents leagan form (see p. 33)

As suggested by the authors all ending words in the dataset of organization names must be examened, especially those with hight occurence number.

Table 14: Last words identified as legal form indications
| LAST WORD (CLEANED) | LEGAL FORM                                       |
|---------------------+--------------------------------------------------|
| INC                 | Incorporated                                     |
| LTD                 | Limited                                          |
| LIMITED             | Limited                                          |
| GMBH                | Gesellschaft mit beschränkter Haftung            |
| SA                  | Société Anonyme, Sociedad Anónima, …             |
| KG                  | Kommanditgesellschaft                            |
| LLC                 | Limited Liability Company                        |
| AG                  | Aktiengesellschaft                               |
| SPA                 | Società Per Azioni                               |
| SRL                 | Società a Responsabilità Limitata                |
| BV                  | Besloten vennootscha                             |
| INCORPORATED        | Incorporated                                     |
| AS                  | Aktieselskab, Akciová Společnost                 |
| MBH                 | Gesellschaft mit beschränkter Haftung            |
| A                   | Société Anonyme, Società Per Azioni, …           |
| KAISHA              | Kabushiki Kaisha                                 |
| ANONYME             | Société Anonyme                                  |
| C                   | Pulic Limited Company, Limited Liability Company |
| L                   | Società a Responsabilità Limitata                |
| OY                  | Osakeyhtiö                                       |
| NV                  | Naamloze Vennootschap                            |
| AKTIENGESELLSCHAFT  | Aktiengesellschaft                               |
| PLC                 | Public Limited Company                           |
| SARL                | Société à responsabilité limitée                 |
| H                   | Gesellschaft mit beschränkter Haftung            |

*** Table: Legal form at the end
:PROPERTIES:
:ID:       org:34rhib50bci0
:END:

Table below represents all words at the end that can be "safely" removed or replaced. The order of replacement or detection is important.

Appendix 2: All search and replace statements for all legal forms to be removed at the end of a name
#+NAME: magerman.patterns.legal.form.end
| "remove"                                           | "replace"                    | "legal.form"       |
|----------------------------------------------------+------------------------------+--------------------|
| ' MFG. COMPANY INC.'                               | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. COMPANY, INC.'                              | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. CO. INC.'                                   | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. CO., INC.'                                  | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG CO., INC.'                                   | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG CO, INC'                                     | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. CO. INC'                                    | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG CO. INC.'                                    | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG., CO., INC.'                                 | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. CO., INC'                                   | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. CO, INC.'                                   | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ' MFG. CO, INC'                                    | ' MANUFACTURING COMPANY'     | 'INCORPORATED'     |
| ', CO., INC.'                                      | ' COMPANY'                   | 'INCORPORATED'     |
| ', CO. INC.'                                       | ' COMPANY'                   | 'INCORPORATED'     |
| ', CO., INC'                                       | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO., INC.'                                       | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO. INC.'                                        | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO., INC'                                        | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO, INC.'                                        | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO. INC'                                         | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO, INC'                                         | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO.. INC.'                                       | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO INC'                                          | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO. (INC.)'                                      | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO INC.'                                         | ' COMPANY'                   | 'INCORPORATED'     |
| ', MFG., INC.'                                     | ' MANUFACTURING'             | 'INCORPORATED'     |
| ', MFG. INC.'                                      | ' MANUFACTURING'             | 'INCORPORATED'     |
| ' MFG., INC.'                                      | ' MANUFACTURING'             | 'INCORPORATED'     |
| ' MFG. INC.'                                       | ' MANUFACTURING'             | 'INCORPORATED'     |
| ' MFG, INC.'                                       | ' MANUFACTURING'             | 'INCORPORATED'     |
| ' MFG., INC'                                       | ' MANUFACTURING'             | 'INCORPORATED'     |
| ' MFG INC.'                                        | ' MANUFACTURING'             | 'INCORPORATED'     |
| ', LTD., INC.'                                     | ''                           | 'INCORPORATED'     |
| ', LTD. INC.'                                      | ''                           | 'INCORPORATED'     |
| ' LTD., INC.'                                      | ''                           | 'INCORPORATED'     |
| ' LTD. INC.'                                       | ''                           | 'INCORPORATED'     |
| ' LTD, INC.'                                       | ''                           | 'INCORPORATED'     |
| ' LTD INC.'                                        | ''                           | 'INCORPORATED'     |
| ', INTL., INC.'                                    | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ', INT’L., INC.'                                   | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ', INT’L. INC.'                                    | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INTL., INC.'                                     | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INT’L., INC.'                                    | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INT’L. INC.'                                     | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INT’L, INC.'                                     | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INT’L INC.'                                      | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INTL, INC.'                                      | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' INTL. INC.'                                      | ' INTERNATIONAL'             | 'INCORPORATED'     |
| ' CORP. INC.'                                      | ' CORPORATION'               | 'INCORPORATED'     |
| ' CORP., INC.'                                     | ' CORPORATION'               | 'INCORPORATED'     |
| ' CORP., INC'                                      | ' CORPORATION'               | 'INCORPORATED'     |
| ', INC.'                                           | ''                           | 'INCORPORATED'     |
| ', INC'                                            | ''                           | 'INCORPORATED'     |
| ', INC..'                                          | ''                           | 'INCORPORATED'     |
| '; INC.'                                           | ''                           | 'INCORPORATED'     |
| ', INC/'                                           | ''                           | 'INCORPORATED'     |
| ', IN.C'                                           | ''                           | 'INCORPORATED'     |
| ' INC.'                                            | ''                           | 'INCORPORATED'     |
| ' INC'                                             | ''                           | 'INCORPORATED'     |
| ', MFG. CO., LTD.'                                 | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ', MFG., CO., LTD.'                                | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' (MFG) CO., LTD.'                                 | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' (MFG.) CO., LTD.'                                | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG. CO., LTD.'                                  | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG. CO., LTD'                                   | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG CO., LTD.'                                   | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG CO., LTD'                                    | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG. CO. LTD.'                                   | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG., CO., LTD.'                                 | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG., CO. LTD.'                                  | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG, CO., LTD.'                                  | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG CO. LTD.'                                    | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG. CO. LTD'                                    | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG CO. LTD'                                     | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG., CO., LTD'                                  | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG. CO, LTD.'                                   | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG CO LTD'                                      | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG CO LTD.'                                     | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' MFG. CO. LTD..'                                  | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' M.F.G. CO., LTD.'                                | ' MANUFACTURING COMPANY'     | 'LIMITED'          |
| ' INT. CO., LTD.'                                  | ' INTERNATIONAL COMPANY'     | 'LIMITED'          |
| ' INT. CO. LTD.'                                   | ' INTERNATIONAL COMPANY'     | 'LIMITED'          |
| ' INT., CO., LTD.'                                 | ' INTERNATIONAL COMPANY'     | 'LIMITED'          |
| ' INT’L CO., LTD.'                                 | ' INTERNATIONAL COMPANY'     | 'LIMITED'          |
| ' CO. CO., LTD.'                                   | ' COMPANY'                   | 'LIMITED'          |
| ' CO CO., LTD.'                                    | ' COMPANY'                   | 'LIMITED'          |
| ' CO., CO. LTD.'                                   | ' COMPANY'                   | 'LIMITED'          |
| ' CO., CO., LTD.'                                  | ' COMPANY'                   | 'LIMITED'          |
| ', CO., LTD.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ', CO. LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ', CO., LTD'                                       | ' COMPANY'                   | 'LIMITED'          |
| ', CO, LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ', CO. LTD'                                        | ' COMPANY'                   | 'LIMITED'          |
| ', CO LTD.'                                        | ' COMPANY'                   | 'LIMITED'          |
| ', CO, LTD'                                        | ' COMPANY'                   | 'LIMITED'          |
| ', CO.. LTD.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO. LTD.'                                        | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LTD'                                        | ' COMPANY'                   | 'LIMITED'          |
| ' CO, LTD.'                                        | ' COMPANY'                   | 'LIMITED'          |
| ' CO. LTD'                                         | ' COMPANY'                   | 'LIMITED'          |
| ' CO LTD.'                                         | ' COMPANY'                   | 'LIMITED'          |
| ' CO, LTD'                                         | ' COMPANY'                   | 'LIMITED'          |
| ' CO LTD'                                          | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LT.D.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO.. LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO. L.T.D.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO; LTD.'                                        | ' COMPANY'                   | 'LIMITED'          |
| ' CO., L.T.D.'                                     | ' COMPANY'                   | 'LIMITED'          |
| ' CO,, LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO.., LTD.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO.?, LTD.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO; LTD'                                         | ' COMPANY'                   | 'LIMITED'          |
| ' CO:, LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LTD..'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO.; LTD.'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO,, LTD'                                        | ' COMPANY'                   | 'LIMITED'          |
| ' CO.; LTD'                                        | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LTD,.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LT.D'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO.., LTD'                                       | ' COMPANY'                   | 'LIMITED'          |
| ' CO,., LTD.'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO: LTD'                                         | ' COMPANY'                   | 'LIMITED'          |
| ' CO. PTY. LTD.'                                   | ' COMPANY'                   | 'LIMITED'          |
| ' CO. PTY LTD'                                     | ' COMPANY'                   | 'LIMITED'          |
| ' CO. PTY LTD.'                                    | ' COMPANY'                   | 'LIMITED'          |
| ' CO PTY LTD'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO PTY LTD.'                                     | ' COMPANY'                   | 'LIMITED'          |
| ' CO., PTY. LTD.'                                  | ' COMPANY'                   | 'LIMITED'          |
| ' CO., PTY., LTD.'                                 | ' COMPANY'                   | 'LIMITED'          |
| ' CO., PTY LTD.'                                   | ' COMPANY'                   | 'LIMITED'          |
| ' (INT’L) PTY. LTD.'                               | ' (INTERNATIONAL)'           | 'LIMITED'          |
| ' (INTL.) PTY. LTD.'                               | ' (INTERNATIONAL)'           | 'LIMITED'          |
| ' MFG. PTY. LTD.'                                  | ' MANUFACTURING'             | 'LIMITED'          |
| ' MFG. PTY. LTD'                                   | ' MANUFACTURING'             | 'LIMITED'          |
| ' (QLD) PTY. LTD'                                  | ''                           | 'LIMITED'          |
| ' (QLD.) PTY. LTD.'                                | ''                           | 'LIMITED'          |
| ' QLD PTY LTD.'                                    | ''                           | 'LIMITED'          |
| ' (QLD) PTY LTD'                                   | ''                           | 'LIMITED'          |
| ' (QLD) PTY. LTD.'                                 | ''                           | 'LIMITED'          |
| ' (QLD) PTY LTD.'                                  | ''                           | 'LIMITED'          |
| ' (VIC) PTY., LTD.'                                | ''                           | 'LIMITED'          |
| ' (VIC) PTY LTD.'                                  | ''                           | 'LIMITED'          |
| ' (VIC) PTY. LTD.'                                 | ''                           | 'LIMITED'          |
| ' (VIC) PTY LTD'                                   | ''                           | 'LIMITED'          |
| ' (VIC.) PTY. LTD.'                                | ''                           | 'LIMITED'          |
| ' (S.A.) PTY LTD'                                  | ''                           | 'LIMITED'          |
| ' (SA) PTY LTD'                                    | ''                           | 'LIMITED'          |
| ' S.A. (PTY) LTD.'                                 | ''                           | 'LIMITED'          |
| ', PTY. LTD.'                                      | ''                           | 'LIMITED'          |
| ', PTY LTD'                                        | ''                           | 'LIMITED'          |
| ', PTY., LTD.'                                     | ''                           | 'LIMITED'          |
| ', PTY LTD.'                                       | ''                           | 'LIMITED'          |
| ', PTY, LTD.'                                      | ''                           | 'LIMITED'          |
| ', PTY, LTD'                                       | ''                           | 'LIMITED'          |
| ' PTY. LTD.'                                       | ''                           | 'LIMITED'          |
| ' PTY LTD'                                         | ''                           | 'LIMITED'          |
| ' PTY., LTD.'                                      | ''                           | 'LIMITED'          |
| ' PTY LTD.'                                        | ''                           | 'LIMITED'          |
| ' PTY, LTD.'                                       | ''                           | 'LIMITED'          |
| ' PTY, LTD'                                        | ''                           | 'LIMITED'          |
| ' PTY. LTD'                                        | ''                           | 'LIMITED'          |
| ' (PTY) LTD'                                       | ''                           | 'LIMITED'          |
| ' (PTY) LTD.'                                      | ''                           | 'LIMITED'          |
| ' PTY., LTD'                                       | ''                           | 'LIMITED'          |
| ' (PTY.) LTD.'                                     | ''                           | 'LIMITED'          |
| ' PTY: LTD.'                                       | ''                           | 'LIMITED'          |
| ' (PTY.) LTD'                                      | ''                           | 'LIMITED'          |
| ' (PTY), LTD.'                                     | ''                           | 'LIMITED'          |
| ' CO. PTE. LTD.'                                   | ' COMPANY'                   | 'LIMITED'          |
| ' CO. (PTE) LTD.'                                  | ' COMPANY'                   | 'LIMITED'          |
| ' CO. PTE LTD'                                     | ' COMPANY'                   | 'LIMITED'          |
| ' CO., PTE. LTD.'                                  | ' COMPANY'                   | 'LIMITED'          |
| ' (S) PTE LTD.'                                    | ''                           | 'LIMITED'          |
| ' (S) PTE LTD'                                     | ''                           | 'LIMITED'          |
| ' (S) PTE. LTD.'                                   | ''                           | 'LIMITED'          |
| ' (S), PTE., LTD.'                                 | ''                           | 'LIMITED'          |
| ', PTE., LTD.'                                     | ''                           | 'LIMITED'          |
| ', PTE. LTD.'                                      | ''                           | 'LIMITED'          |
| ', PTE LTD'                                        | ''                           | 'LIMITED'          |
| ', PTE LTD.'                                       | ''                           | 'LIMITED'          |
| ', PTE, LTD.'                                      | ''                           | 'LIMITED'          |
| ' PTE., LTD.'                                      | ''                           | 'LIMITED'          |
| ' PTE. LTD.'                                       | ''                           | 'LIMITED'          |
| ' PTE LTD'                                         | ''                           | 'LIMITED'          |
| ' PTE LTD.'                                        | ''                           | 'LIMITED'          |
| ' PTE, LTD.'                                       | ''                           | 'LIMITED'          |
| ' PTE. LTD'                                        | ''                           | 'LIMITED'          |
| ' (PTE) LTD.'                                      | ''                           | 'LIMITED'          |
| ' (PTE) LTD'                                       | ''                           | 'LIMITED'          |
| ' PTE, LTD'                                        | ''                           | 'LIMITED'          |
| ', CORP. LTD.'                                     | ' CORPORATION'               | 'LIMITED'          |
| ' CORP. LTD.'                                      | ' CORPORATION'               | 'LIMITED'          |
| ' CORP., LTD.'                                     | ' CORPORATION'               | 'LIMITED'          |
| ' CORP, LTD.'                                      | ' CORPORATION'               | 'LIMITED'          |
| ' CORP., LTD'                                      | ' CORPORATION'               | 'LIMITED'          |
| ' CORP. LTD'                                       | ' CORPORATION'               | 'LIMITED'          |
| ' MFG LTD.'                                        | ' MANUFACTURING'             | 'LIMITED'          |
| ' MFG., LTD.'                                      | ' MANUFACTURING'             | 'LIMITED'          |
| ' MFG. LTD.'                                       | ' MANUFACTURING'             | 'LIMITED'          |
| ' MFG., LTD'                                       | ' MANUFACTURING'             | 'LIMITED'          |
| ' CO., INC. LTD.'                                  | ' COMPANY'                   | 'LIMITED'          |
| ' CO., INC., LTD.'                                 | ' COMPANY'                   | 'LIMITED'          |
| ', INC., LTD'                                      | ''                           | 'LIMITED'          |
| ', INC., LTD.'                                     | ''                           | 'LIMITED'          |
| ', INC. LTD.'                                      | ''                           | 'LIMITED'          |
| ' INC., LTD'                                       | ''                           | 'LIMITED'          |
| ' INC., LTD.'                                      | ''                           | 'LIMITED'          |
| ' INC. LTD.'                                       | ''                           | 'LIMITED'          |
| ' INC. LTD'                                        | ''                           | 'LIMITED'          |
| ' INC, LTD.'                                       | ''                           | 'LIMITED'          |
| ' INT’L LTD.'                                      | ' INTERNATIONAL'             | 'LIMITED'          |
| ' INT’L. LTD.'                                     | ' INTERNATIONAL'             | 'LIMITED'          |
| ' INT’L., LTD.'                                    | ' INTERNATIONAL'             | 'LIMITED'          |
| ' INT''L LTD.'                                     | ' INTERNATIONAL'             | 'LIMITED'          |
| ' INTL. LTD.'                                      | ' INTERNATIONAL'             | 'LIMITED'          |
| ' INT., LTD.'                                      | ' INTERNATIONAL'             | 'LIMITED'          |
| ' INT. LTD.'                                       | ' INTERNATIONAL'             | 'LIMITED'          |
| ' KABUSHIKI KAISHA, LTD.'                          | ''                           | 'LIMITED'          |
| ', LTD.'                                           | ''                           | 'LIMITED'          |
| ', LTD'                                            | ''                           | 'LIMITED'          |
| ', LTD..'                                          | ''                           | 'LIMITED'          |
| ', L.T.D.'                                         | ''                           | 'LIMITED'          |
| ' (LTD.)'                                          | ''                           | 'LIMITED'          |
| ' LTD.'                                            | ''                           | 'LIMITED'          |
| ' LTD'                                             | ''                           | 'LIMITED'          |
| ' LTD..'                                           | ''                           | 'LIMITED'          |
| ' L.T.D.'                                          | ''                           | 'LIMITED'          |
| ' (LTD)'                                           | ''                           | 'LIMITED'          |
| ', LTD/'                                           | ''                           | 'LIMITED'          |
| ' & C. S.P.A.'                                     | ' & COMPANY'                 | 'SPA'              |
| ' & C. SPA'                                        | ' & COMPANY'                 | 'SPA'              |
| ' & C SPA'                                         | ' & COMPANY'                 | 'SPA'              |
| ' & C., S.P.A.'                                    | ' & COMPANY'                 | 'SPA'              |
| ' & C. S.P.A'                                      | ' & COMPANY'                 | 'SPA'              |
| ' & C. -S.P.A.'                                    | ' & COMPANY'                 | 'SPA'              |
| ' CO. S.P.A.'                                      | ' COMPANY'                   | 'SPA'              |
| ' CO. SPA'                                         | ' COMPANY'                   | 'SPA'              |
| ' CO., S.P.A.'                                     | ' COMPANY'                   | 'SPA'              |
| ', S.P.A.'                                         | ''                           | 'SPA'              |
| ', SPA'                                            | ''                           | 'SPA'              |
| ', S.P.A'                                          | ''                           | 'SPA'              |
| ' - S.P.A'                                         | ''                           | 'SPA'              |
| ' -S.P.A.'                                         | ''                           | 'SPA'              |
| ', SPA.'                                           | ''                           | 'SPA'              |
| ' S.P.A.'                                          | ''                           | 'SPA'              |
| ' SPA'                                             | ''                           | 'SPA'              |
| ' S.P.A'                                           | ''                           | 'SPA'              |
| ' SPA.'                                            | ''                           | 'SPA'              |
| ' S.P.A..'                                         | ''                           | 'SPA'              |
| ' S.PA.'                                           | ''                           | 'SPA'              |
| ' S-P.A.'                                          | ''                           | 'SPA'              |
| ' (S.P.A.)'                                        | ''                           | 'SPA'              |
| ' SP.A.'                                           | ''                           | 'SPA'              |
| ' SPA’'                                            | ''                           | 'SPA'              |
| ' & C. S.R.L.'                                     | ' & COMPANY'                 | 'SRL'              |
| ' & C. SRL'                                        | ' & COMPANY'                 | 'SRL'              |
| ' & C. S.R.L'                                      | ' & COMPANY'                 | 'SRL'              |
| ' E C. S.R.L.'                                     | ' & COMPANY'                 | 'SRL'              |
| ' & C S.R.L.'                                      | ' & COMPANY'                 | 'SRL'              |
| ' CO. S.R.L.'                                      | ' COMPANY'                   | 'SRL'              |
| ' LTD. SRL'                                        | ''                           | 'SRL'              |
| ' L.T.D. S.R.L.'                                   | ''                           | 'SRL'              |
| ', S.R.L.'                                         | ''                           | 'SRL'              |
| ' - S.R.L.'                                        | ''                           | 'SRL'              |
| ', S.R.L'                                          | ''                           | 'SRL'              |
| ', SRL'                                            | ''                           | 'SRL'              |
| ', SRL.'                                           | ''                           | 'SRL'              |
| ', S.RL'                                           | ''                           | 'SRL'              |
| ' S.R.L.'                                          | ''                           | 'SRL'              |
| ' S.R.L'                                           | ''                           | 'SRL'              |
| ' SRL'                                             | ''                           | 'SRL'              |
| ' SRL.'                                            | ''                           | 'SRL'              |
| ' S.RL'                                            | ''                           | 'SRL'              |
| ' -S.R.L.'                                         | ''                           | 'SRL'              |
| ' .S.R.L.'                                         | ''                           | 'SRL'              |
| ' SR.L.'                                           | ''                           | 'SRL'              |
| ' S.RL.'                                           | ''                           | 'SRL'              |
| ' S.ß.R.L.'                                        | ''                           | 'S.ß.R.L.'         |
| ' S.ß.R.L'                                         | ''                           | 'S.ß.R.L.'         |
| ' CO. PTY. LIMITED'                                | ' COMPANY'                   | 'LIMITED'          |
| ' CO. PTY LIMITED'                                 | ' COMPANY'                   | 'LIMITED'          |
| ' CO PTY LIMITED'                                  | ' COMPANY'                   | 'LIMITED'          |
| ' CO. (PTY) LIMITED'                               | ' COMPANY'                   | 'LIMITED'          |
| ', PTY. LIMITED'                                   | ''                           | 'LIMITED'          |
| ', PTY, LIMITED'                                   | ''                           | 'LIMITED'          |
| ' PTY. LIMITED'                                    | ''                           | 'LIMITED'          |
| ' PTY, LIMITED'                                    | ''                           | 'LIMITED'          |
| ' PTY LIMITED'                                     | ''                           | 'LIMITED'          |
| ' (PTY) LIMITED'                                   | ''                           | 'LIMITED'          |
| ' PTY., LIMITED'                                   | ''                           | 'LIMITED'          |
| ' PTY. LIMITED.'                                   | ''                           | 'LIMITED'          |
| ' PTY. .LIMITED'                                   | ''                           | 'LIMITED'          |
| ' (PTY.) LIMITED'                                  | ''                           | 'LIMITED'          |
| ' CO., LIMITED'                                    | ' COMPANY'                   | 'LIMITED'          |
| ' CO. LIMITED'                                     | ' COMPANY'                   | 'LIMITED'          |
| ' CO. LIMITED.'                                    | ' COMPANY'                   | 'LIMITED'          |
| ' CO LIMITED'                                      | ' COMPANY'                   | 'LIMITED'          |
| ' CO, LIMITED'                                     | ' COMPANY'                   | 'LIMITED'          |
| ' CO., LIMITED.'                                   | ' COMPANY'                   | 'LIMITED'          |
| ' CO. (NZ) LIMITED'                                | ' COMPANY'                   | 'LIMITED'          |
| ' (NZ) LIMITED'                                    | ''                           | 'LIMITED'          |
| ' (N.Z.) LIMITED'                                  | ''                           | 'LIMITED'          |
| ' NZ LIMITED'                                      | ''                           | 'LIMITED'          |
| ' (H.K.) LIMITED'                                  | ''                           | 'LIMITED'          |
| ' (H.K) LIMITED'                                   | ''                           | 'LIMITED'          |
| ' (HK) LIMITED'                                    | ''                           | 'LIMITED'          |
| ' HK LIMITED'                                      | ''                           | 'LIMITED'          |
| ' (IP) LIMITED'                                    | ''                           | 'LIMITED'          |
| ' (I.P.) LIMITED'                                  | ''                           | 'LIMITED'          |
| ' I.P. LIMITED'                                    | ''                           | 'LIMITED'          |
| ' IP LIMITED'                                      | ''                           | 'LIMITED'          |
| ' ( IP) LIMITED'                                   | ''                           | 'LIMITED'          |
| ' (I.P) LIMITED'                                   | ''                           | 'LIMITED'          |
| ' (PTE) LIMITED'                                   | ''                           | 'LIMITED'          |
| ' PTE LIMITED'                                     | ''                           | 'LIMITED'          |
| ' PTE. LIMITED'                                    | ''                           | 'LIMITED'          |
| ' PTE, LIMITED'                                    | ''                           | 'LIMITED'          |
| ' (BVI) LIMITED'                                   | ''                           | 'LIMITED'          |
| ' (B.V.I.) LIMITED'                                | ''                           | 'LIMITED'          |
| ' (BVIØ) LIMITED'                                  | ''                           | 'LIMITED'          |
| ' (N.I.) LIMITED'                                  | ''                           | 'LIMITED'          |
| ' (NI) LIMITED'                                    | ''                           | 'LIMITED'          |
| ' NI LIMITED'                                      | ''                           | 'LIMITED'          |
| ', LIMITED.'                                       | ''                           | 'LIMITED'          |
| ', LIMITED'                                        | ''                           | 'LIMITED'          |
| ' LIMITED.'                                        | ''                           | 'LIMITED'          |
| ' LIMITED'                                         | ''                           | 'LIMITED'          |
| ' (PROPRIETARY LIMITED)'                           | ''                           | 'LIMITED'          |
| '(PROPRIETARY LIMITED)'                            | ''                           | 'LIMITED'          |
| ' CIE, S. A.'                                      | ' COMPAGNIE'                 | 'SA'               |
| ' CIE S. A.'                                       | ' COMPAGNIE'                 | 'SA'               |
| ' FRANCE S. A.'                                    | ' FRANCE'                    | 'SA'               |
| ' (FRANCE) S. A.'                                  | ' (FRANCE)'                  | 'SA'               |
| ' S. P. A.'                                        | ''                           | 'SPA'              |
| ' S P A'                                           | ''                           | 'SPA'              |
| ' U. CO. GMBH'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' UND CO. GMBH'                                    | ' & COMPANY'                 | 'GMBH'             |
| ' CO. GMBH'                                        | ' COMPANY'                   | 'GMBH'             |
| ' + CO., GMBH'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' + CO GMBH'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' CO., GMBH'                                       | ' COMPANY'                   | 'GMBH'             |
| ' CO. (GMBH)'                                      | ' COMPANY'                   | 'GMBH'             |
| ' CO., (GMBH)'                                     | ' COMPANY'                   | 'GMBH'             |
| ' CO GMBH'                                         | ' COMPANY'                   | 'GMBH'             |
| ' &CO. GMBH'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' CO, GMBH'                                        | ' COMPANY'                   | 'GMBH'             |
| ' CIE. GMBH'                                       | ' COMPANY'                   | 'GMBH'             |
| ' CIE, GMBH'                                       | ' COMPANY'                   | 'GMBH'             |
| ' CIE GMBH'                                        | ' COMPANY'                   | 'GMBH'             |
| ', GMBH'                                           | ''                           | 'GMBH'             |
| ', GMBH.'                                          | ''                           | 'GMBH'             |
| ' GMBH'                                            | ''                           | 'GMBH'             |
| ' G.M.B.H.'                                        | ''                           | 'GMBH'             |
| ' GMBH.'                                           | ''                           | 'GMBH'             |
| ' -GMBH'                                           | ''                           | 'GMBH'             |
| ' GESELLSCHAFT MIT BE- SCHRAENKTER HAFTUNG (GMBH)' | ''                           | 'GMBH'             |
| ' (GMBH)'                                          | ''                           | 'GMBH'             |
| ' G.M.B.H'                                         | ''                           | 'GMBH'             |
| ' G.MBH'                                           | ''                           | 'GMBH'             |
| ' G.M.BH'                                          | ''                           | 'GMBH'             |
| ' MFG. CORPORATION'                                | ' MANUFACTURING CORPORATION' | 'GMBH'             |
| ' ET CIE. S.A.'                                    | ' & COMPAGNIE'               | 'SA'               |
| ' ET CIE, S.A.'                                    | ' & COMPAGNIE'               | 'SA'               |
| ' ET CIE (SA)'                                     | ' & COMPAGNIE'               | 'SA'               |
| ' ET CIE S.A.'                                     | ' & COMPAGNIE'               | 'SA'               |
| ' ET. CIE S.A.'                                    | ' & COMPAGNIE'               | 'SA'               |
| ' ET CIE., S.A.'                                   | ' & COMPAGNIE'               | 'SA'               |
| ' CIE. S.A.'                                       | ' COMPAGNIE'                 | 'SA'               |
| ' CIE (S.A.)'                                      | ' COMPAGNIE'                 | 'SA'               |
| ' CIE S.A.'                                        | ' COMPAGNIE'                 | 'SA'               |
| ' CIE, S.A.'                                       | ' COMPAGNIE'                 | 'SA'               |
| ' CIE, SA'                                         | ' COMPAGNIE'                 | 'SA'               |
| ' CI.E. SA'                                        | ' COMPAGNIE'                 | 'SA'               |
| ' CIE SA'                                          | ' COMPAGNIE'                 | 'SA'               |
| ' ET CO. S.A.'                                     | ' & COMPANY'                 | 'SA'               |
| ' ET CO S.A.'                                      | ' & COMPANY'                 | 'SA'               |
| ' ET CO. SA'                                       | ' & COMPANY'                 | 'SA'               |
| ' CO., S.A.'                                       | ' COMPANY'                   | 'SA'               |
| ' CO. S.A.'                                        | ' COMPANY'                   | 'SA'               |
| ' CO SA'                                           | ' COMPANY'                   | 'SA'               |
| ' CO. SA'                                          | ' COMPANY'                   | 'SA'               |
| ' Y CIA., S.A.'                                    | ' & COMPANIA'                | 'SA'               |
| ' Y CIA. S.A.'                                     | ' & COMPANIA'                | 'SA'               |
| ' Y CIA S.A.'                                      | ' & COMPANIA'                | 'SA'               |
| ' Y CIA, S.A.'                                     | ' & COMPANIA'                | 'SA'               |
| ' CIA, S.A.'                                       | ' COMPANIA'                  | 'SA'               |
| ' CIA. S.A.'                                       | ' COMPANIA'                  | 'SA'               |
| ' CIA., S.A.'                                      | ' COMPANIA'                  | 'SA'               |
| ' CIA S.A.'                                        | ' COMPANIA'                  | 'SA'               |
| ', INC. S.A.'                                      | ''                           | 'SA'               |
| ', INC., SA.'                                      | ''                           | 'SA'               |
| ' INC. S.A.'                                       | ''                           | 'SA'               |
| ' INC., SA.'                                       | ''                           | 'SA'               |
| ' INC., S.A.'                                      | ''                           | 'SA'               |
| ' MFG. CY, S.A.'                                   | ' MANUFACTURING COMPANY'     | 'SA'               |
| ' CY, S.A.'                                        | ' COMPANY'                   | 'SA'               |
| ' MANUFACTURIN CY, S.A.'                           | ' MANUFACTURING COMPANY'     | 'SA'               |
| ' CY S.A.'                                         | ' COMPANY'                   | 'SA'               |
| ', S.A.'                                           | ''                           | 'SA'               |
| ', SA'                                             | ''                           | 'SA'               |
| ', S.A'                                            | ''                           | 'SA'               |
| ', S,A.'                                           | ''                           | 'SA'               |
| ', SA.'                                            | ''                           | 'SA'               |
| ' S.A.'                                            | ''                           | 'SA'               |
| ' SA'                                              | ''                           | 'SA'               |
| ' S.A'                                             | ''                           | 'SA'               |
| ' S,A.'                                            | ''                           | 'SA'               |
| ' SA.'                                             | ''                           | 'SA'               |
| ' (S.A.)'                                          | ''                           | 'SA'               |
| ' (SA)'                                            | ''                           | 'SA'               |
| ' (S.A)'                                           | ''                           | 'SA'               |
| ' S..A.'                                           | ''                           | 'SA'               |
| ' S.A..'                                           | ''                           | 'SA'               |
| ' -SA'                                             | ''                           | 'SA'               |
| ' S,A'                                             | ''                           | 'SA'               |
| ' -S.A.'                                           | ''                           | 'SA'               |
| ' .S.A'                                            | ''                           | 'SA'               |
| ' S-A.'                                            | ''                           | 'SA'               |
| ' S/A'                                             | ''                           | 'SA'               |
| ' S/A.'                                            | ''                           | 'SA'               |
| ' E C.'                                            | ' & COMPANY'                 | ''                 |
| ' P. L. C.'                                        | ''                           | 'PLC'              |
| ' P L C'                                           | ''                           | 'PLC'              |
| ' P. L. C'                                         | ''                           | 'PLC'              |
| ', L. L. C.'                                       | ''                           | 'LLC'              |
| ', L L C'                                          | ''                           | 'LLC'              |
| ' L L C.'                                          | ''                           | 'LLC'              |
| ' L L C'                                           | ''                           | 'LLC'              |
| ' & C.'                                            | ' COMPANY'                   | ''                 |
| ' & C'                                             | ' COMPANY'                   | ''                 |
| ' S. R. L.'                                        | ''                           | 'SRL'              |
| ' S.R L.'                                          | ''                           | 'SRL'              |
| ' S.R. L.'                                         | ''                           | 'SRL'              |
| ' GES. M. B. H.'                                   | ''                           | 'GMBH'             |
| ' GESELLSCHAFT M. B. H.'                           | ''                           | 'GMBH'             |
| ' CO. PLC'                                         | ' COMPANY'                   | 'PLC'              |
| ' CO., PLC'                                        | ' COMPANY'                   | 'PLC'              |
| ' CO., P.L.C.'                                     | ' COMPANY'                   | 'PLC'              |
| ' CO. P.L.C.'                                      | ' COMPANY'                   | 'PLC'              |
| ', PLC'                                            | ''                           | 'PLC'              |
| ', PLC.'                                           | ''                           | 'PLC'              |
| ', P.L.C.'                                         | ''                           | 'PLC'              |
| ', P.L.C'                                          | ''                           | 'PLC'              |
| ' PLC'                                             | ''                           | 'PLC'              |
| ' PLC.'                                            | ''                           | 'PLC'              |
| ' P.L.C.'                                          | ''                           | 'PLC'              |
| ' P.L.C'                                           | ''                           | 'PLC'              |
| ' PL.C'                                            | ''                           | 'PLC'              |
| ' P.L.C..'                                         | ''                           | 'PLC'              |
| ' (PLC)'                                           | ''                           | 'PLC'              |
| ' ET CIE (SARL)'                                   | ' & COMPAGNIE'               | 'SARL'             |
| ' CIE, SARL'                                       | ' COMPAGNIE'                 | 'SARL'             |
| ' CIE S.A.R.L.'                                    | ' COMPAGNIE'                 | 'SARL'             |
| ' CIE SARL'                                        | ' COMPAGNIE'                 | 'SARL'             |
| ', SARL'                                           | ''                           | 'SARL'             |
| ', S.A.R.L.'                                       | ''                           | 'SARL'             |
| ', (SARL)'                                         | ''                           | 'SARL'             |
| ', S.A.R.L'                                        | ''                           | 'SARL'             |
| ' SARL'                                            | ''                           | 'SARL'             |
| ' S.A.R.L.'                                        | ''                           | 'SARL'             |
| ' (SARL)'                                          | ''                           | 'SARL'             |
| ' S.A.R.L'                                         | ''                           | 'SARL'             |
| ' (S.A.R.L.)'                                      | ''                           | 'SARL'             |
| ' (S.A.R.L)'                                       | ''                           | 'SARL'             |
| ' SARL.'                                           | ''                           | 'SARL'             |
| ' S.A.R:L'                                         | ''                           | 'SARL'             |
| ' S.AR.L.'                                         | ''                           | 'SARL'             |
| ' -SARL'                                           | ''                           | 'SARL'             |
| ' ( SARL)'                                         | ''                           | 'SARL'             |
| ' (SARL.)'                                         | ''                           | 'SARL'             |
| ' + CO AKTIENGESELL-SCHAFT'                        | ' & COMPANY'                 | 'AG'               |
| ' + CO. AKTIENGESELL-SCHAFT'                       | ' & COMPANY'                 | 'AG'               |
| ' CO. AKTIENGESELLSCHAFT'                          | ' COMPANY'                   | 'AG'               |
| ' CO AKTIENGESELLSCHAFT'                           | ' COMPANY'                   | 'AG'               |
| 'CO.,AKTIENGESELL-SCHAFT'                          | ' COMPANY'                   | 'AG'               |
| 'A.G.AKTIENGESELL-SCHAFT'                          | ''                           | 'AG'               |
| ' AG AKTIENGESELLSCHAFT'                           | ''                           | 'AG'               |
| 'CIE.AKTIENGESELL-SCHAFT'                          | ' COMPAGNIE'                 | 'AG'               |
| ' CIE AKTIENGESELLSCHAFT'                          | ' COMPAGNIE'                 | 'AG'               |
| ', AKTIENGESELLSCHAFT'                             | ''                           | 'AG'               |
| ' AKTIENGESELLSCHAFT'                              | ''                           | 'AG'               |
| ' AKTIENGESELL-SCHAFT'                             | ''                           | 'AG'               |
| ' AKTIEN-GESELLSCHAFT'                             | ''                           | 'AG'               |
| ' EN CO. N.V.'                                     | ' & COMPANY'                 | 'NV'               |
| ' EN CO. NV'                                       | ' & COMPANY'                 | 'NV'               |
| ' CO. N.V.'                                        | ' COMPANY'                   | 'NV'               |
| ' CO N.V.'                                         | ' COMPANY'                   | 'NV'               |
| ' N.A. N.V.'                                       | ''                           | 'NV'               |
| ' (NA) N.V.'                                       | ''                           | 'NV'               |
| ' (NA) NV'                                         | ''                           | 'NV'               |
| ' (N.A.) N.V.'                                     | ''                           | 'NV'               |
| ', INC. N.V.'                                      | ''                           | 'NV'               |
| ', INC. (NV)'                                      | ''                           | 'NV'               |
| ' INC. NV.'                                        | ''                           | 'NV'               |
| ' INC. N.V.'                                       | ''                           | 'NV'               |
| ' CORP. N.V.'                                      | ' CORPORATION'               | 'NV'               |
| ', N.V.'                                           | ''                           | 'NV'               |
| ', NV'                                             | ''                           | 'NV'               |
| ', N.V'                                            | ''                           | 'NV'               |
| ', NV.'                                            | ''                           | 'NV'               |
| ', N..V.'                                          | ''                           | 'NV'               |
| ' N.V.'                                            | ''                           | 'NV'               |
| ' NV'                                              | ''                           | 'NV'               |
| ' N.V'                                             | ''                           | 'NV'               |
| ' NV.'                                             | ''                           | 'NV'               |
| ' N..V'                                            | ''                           | 'NV'               |
| ' N,V.'                                            | ''                           | 'NV'               |
| ', LTD. OY'                                        | ''                           | 'OY'               |
| ' LTD. OY'                                         | ''                           | 'OY'               |
| ' LTD OY'                                          | ''                           | 'OY'               |
| ' LTD. OY.'                                        | ''                           | 'OY'               |
| ' LTD., OY'                                        | ''                           | 'OY'               |
| ' INC. OY'                                         | ''                           | 'OY'               |
| ', OY.'                                            | ''                           | 'OY'               |
| ', OY'                                             | ''                           | 'OY'               |
| ', O.Y.'                                           | ''                           | 'OY'               |
| ' O.Y.'                                            | ''                           | 'OY'               |
| ' OY.'                                             | ''                           | 'OY'               |
| ' OY'                                              | ''                           | 'OY'               |
| ' S.A. SOCIETE ANONYME'                            | ''                           | 'SA'               |
| ' SA SOCIETE ANONYME'                              | ''                           | 'SA'               |
| ', S.A. (SOCIETE ANONYME)'                         | ''                           | 'SA'               |
| ' S.A. (SOCIETE ANONYME)'                          | ''                           | 'SA'               |
| ' SA (SOCIETE ANONYME)'                            | ''                           | 'SA'               |
| ' S.A., SOCIETE ANONYME'                           | ''                           | 'SA'               |
| ' SA, SOCIETE ANONYME'                             | ''                           | 'SA'               |
| ' SA, (SOCIETE ANONYME)'                           | ''                           | 'SA'               |
| ' ET CIE (SOCIETE ANONY-ME)'                       | ' & COMPAGNIE'               | 'SA'               |
| ' ET CIE SOCIETE ANONYME'                          | ' & COMPAGNIE'               | 'SA'               |
| ' ET CIE, SOCIETE ANONYME'                         | ' & COMPAGNIE'               | 'SA'               |
| ' CIE (SOCIETE ANONYME)'                           | ' COMPAGNIE'                 | 'SA'               |
| ' CIE SOCIETE ANONYME'                             | ' COMPAGNIE'                 | 'SA'               |
| ' CIE. (SOCIETE ANONYME)'                          | ' COMPAGNIE'                 | 'SA'               |
| ' CIE, SOCIETE ANONYME'                            | ' COMPAGNIE'                 | 'SA'               |
| ' CIE. SOCIETE ANONYME'                            | ' COMPAGNIE'                 | 'SA'               |
| ', SOCIETE ANONYME'                                | ''                           | 'SA'               |
| ' (SOCIETE ANONYME)'                               | ''                           | 'SA'               |
| ' SOCIETE ANONYME'                                 | ''                           | 'SA'               |
| ', SOCIETE, ANONYME'                               | ''                           | 'SA'               |
| ' (SOCIETE ANONYME'                                | ''                           | 'SA'               |
| ', A \'SOCIETE ANONYME\''                          | ''                           | 'SA'               |
| ' ( SOCIETE ANONYME)'                              | ''                           | 'SA'               |
| ' (FRENCH SOCIETE ANONY-ME)'                       | ''                           | 'SA'               |
| ' (A FRENCH SOCIETE ANONY-ME)'                     | ''                           | 'SA'               |
| ' A \'SOCIETE ANONYME\''                           | ''                           | 'SA'               |
| ' (SOIETE ANONYME)'                                | ''                           | 'SA'               |
| ' (STE ANONYME)'                                   | ''                           | 'SA'               |
| ' S.A. SOICIETE ANONYME'                           | ''                           | 'SA'               |
| ', SOCIETEY ANONYME'                               | ''                           | 'SA'               |
| '(SOCI E/ TE ANONYME)'                             | ''                           | 'SA'               |
| '(SOCIET E ANONYME'                                | ''                           | 'SA'               |
| '(SOCIETETE ANONYME)'                              | ''                           | 'SA'               |
| ' (SOCI ET E ANONYME)'                             | ''                           | 'SA'               |
| ' (SCIETE ANONYME)'                                | ''                           | 'SA'               |
| '( SOCIETE ANONYME)'                               | ''                           | 'SA'               |
| '(SOCIETE ANONYME)'                                | ''                           | 'SA'               |
| 'SOCIETE ANONYME'                                  | ''                           | 'SA'               |
| ' MFG. CO. A/S'                                    | ' MANUFACTURING COMPANY'     | 'AS'               |
| ' MFG CO. A/S'                                     | ' MANUFACTURING COMPANY'     | 'AS'               |
| ' CO. A/S'                                         | ' COMPANY'                   | 'AS'               |
| ' CO. AS'                                          | ' COMPANY'                   | 'AS'               |
| ' CO., A/S'                                        | ' COMPANY'                   | 'AS'               |
| ' CO. A./S'                                        | ' COMPANY'                   | 'AS'               |
| ', LTD. A.S.'                                      | ''                           | 'AS'               |
| ', LTD. A/S'                                       | ''                           | 'AS'               |
| ' LTD. A.S'                                        | ''                           | 'AS'               |
| ' LTD. A/S'                                        | ''                           | 'AS'               |
| ' LTD. AS'                                         | ''                           | 'AS'               |
| ' LTD., A/S'                                       | ''                           | 'AS'               |
| ', A.S.'                                           | ''                           | 'AS'               |
| ', A/S'                                            | ''                           | 'AS'               |
| ', AS'                                             | ''                           | 'AS'               |
| ', A.S'                                            | ''                           | 'AS'               |
| ' A/S'                                             | ''                           | 'AS'               |
| ' A.S.'                                            | ''                           | 'AS'               |
| ' AS'                                              | ''                           | 'AS'               |
| ' A.S'                                             | ''                           | 'AS'               |
| ' A/S/'                                            | ''                           | 'AS'               |
| ' AS.'                                             | ''                           | 'AS'               |
| ' A-S'                                             | ''                           | 'AS'               |
| ' A/S.'                                            | ''                           | 'AS'               |
| ' A//S'                                            | ''                           | 'AS'               |
| ' /AS'                                             | ''                           | 'AS'               |
| ' CO., INCORPORATED'                               | ' COMPANY'                   | 'INCORPORATED'     |
| ' CO. INCORPORATED'                                | ' COMPANY'                   | 'INCORPORATED'     |
| ', INCORPORATED.'                                  | ''                           | 'INCORPORATED'     |
| ', INCORPORATED'                                   | ''                           | 'INCORPORATED'     |
| ' INCORPORATED.'                                   | ''                           | 'INCORPORATED'     |
| ' INCORPORATED'                                    | ''                           | 'INCORPORATED'     |
| ' (INCORPORATED)'                                  | ''                           | 'INCORPORATED'     |
| ' PLC A BRITISH PUBLIC LIMI-TED COMPANY'           | ''                           | 'PLC'              |
| ', PUBLIC LIMITED COM-PANY'                        | ''                           | 'PLC'              |
| ', PUBLIC. LIMITED COM-PANY'                       | ''                           | 'PLC'              |
| ' A PUBLIC LIMITED COM-PANY'                       | ''                           | 'PLC'              |
| ' PUBLIC LIMITED COMPANY'                          | ''                           | 'PLC'              |
| ' LTD., A LIMITED COMPANY'                         | ''                           | 'PLC'              |
| ', A LIMITED COMPANY'                              | ''                           | 'LIMITED'          |
| ' PUBIC LIMITED COMPANY'                           | ''                           | 'PLC'              |
| ' PUPLIC LIMITED COMPANY'                          | ''                           | 'PLC'              |
| ' (SARL) LIMITED COMPANY'                          | ''                           | 'SARL'             |
| ' S.R.L., AN ITALIAN LIMITEDCOMPANY'               | ''                           | 'SRL'              |
| ' N.V. A DUTCH LIMITED COM-PANY'                   | ''                           | 'NV'               |
| ' LIMITED, COMPANY'                                | ''                           | 'LIMITED'          |
| ' (LIMITED COMPANY)'                               | ''                           | 'LIMITED'          |
| ' LIMITED COMPANY'                                 | ''                           | 'LIMITED'          |
| ' AND COMPANY'                                     | ' & COMPANY'                 | ''                 |
| ' AND COMPANY.'                                    | ' & COMPANY'                 | ''                 |
| ' MFG., COMPANY'                                   | ' MANUFACTURING COMPANY'     | ''                 |
| ' MFG. COMPANY'                                    | ' MANUFACTURING COMPANY'     | ''                 |
| ', MFG. CO.'                                       | ' MANUFACTURING COMPANY'     | ''                 |
| ' MFG. CO.'                                        | ' MANUFACTURING COMPANY'     | ''                 |
| ' MFG. CO'                                         | ' MANUFACTURING COMPANY'     | ''                 |
| ' MFG, CO.'                                        | ' MANUFACTURING COMPANY'     | ''                 |
| ' MFG., CO.'                                       | ' MANUFACTURING COMPANY'     | ''                 |
| ' M.F.G. CO.'                                      | ' MANUFACTURING COMPANY'     | ''                 |
| ' MFG CO.'                                         | ' MANUFACTURING COMPANY'     | ''                 |
| ', LTD. CO.'                                       | ''                           | 'LIMITED'          |
| ', LTD., CO.'                                      | ''                           | 'LIMITED'          |
| ' LTD., CO.'                                       | ''                           | 'LIMITED'          |
| ' LTD, CO.'                                        | ''                           | 'LIMITED'          |
| ' LTD., CO'                                        | ''                           | 'LIMITED'          |
| ' GMBH U. CO.'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH U CO.'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH U. CO'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH. U. CO'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH. U. CO.'                                    | ' & COMPANY'                 | 'GMBH'             |
| ' U. CO.'                                          | ' & COMPANY'                 | ''                 |
| ' GMBH AND CO.'                                    | ' & COMPANY'                 | 'GMBH'             |
| ' AG AND CO.'                                      | ' & COMPANY'                 | 'AG'               |
| ' AND CO.'                                         | ' & COMPANY'                 | ''                 |
| ' CO. (GMBH CO.)'                                  | ' COMPANY'                   | 'GMBH'             |
| ' GMBH &CO..'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH +CO.'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH+ CO.'                                       | ' & COMPANY'                 | 'GMBH'             |
| ', GMBH CO.'                                       | ' COMPANY'                   | 'GMBH'             |
| ' GMBH CO.'                                        | ' COMPANY'                   | 'GMBH'             |
| ' PUBLIC LIMITED CO.'                              | ''                           | 'PLC'              |
| ' N.V. A DUTCH LIMITED CO'                         | ''                           | 'NV'               |
| ' LIMITED CO.'                                     | ''                           | 'LIMITED'          |
| ' LIMITED., CO.'                                   | ''                           | 'LIMITED'          |
| ' GMBH UND CO.'                                    | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH UND CO'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' AKTIENGESELLSCHAFT UNDCO.'                       | ' & COMPANY'                 | 'AG'               |
| ' UND CO.'                                         | ' & COMPANY'                 | ''                 |
| ' IND., CO.'                                       | ' INDUSTRAL COMPANY'         | ''                 |
| ' IND. CO.'                                        | ' INDUSTRAL COMPANY'         | ''                 |
| ' AG+ CO.'                                         | ' & COMPANY'                 | 'AG'               |
| ' AG CO.'                                          | ' COMPANY'                   | 'AG'               |
| ' INC., CO.'                                       | ' COMPANY'                   | 'AG'               |
| ' INC, CO.'                                        | ' COMPANY'                   | 'AG'               |
| ', & CO.'                                          | ' & COMPANY'                 | 'AG'               |
| ', AG & CO.'                                       | ' & COMPANY'                 | 'AG'               |
| ' AG & CO.'                                        | ' & COMPANY'                 | 'AG'               |
| ' AG & CO'                                         | ' & COMPANY'                 | 'AG'               |
| ' AG + CO'                                         | ' & COMPANY'                 | 'AG'               |
| ' AG + CO.'                                        | ' & COMPANY'                 | 'AG'               |
| ' A.G. & CO.'                                      | ' & COMPANY'                 | 'AG'               |
| ' AKTIENGESELLSCHAFT &CO.'                         | ' & COMPANY'                 | 'AG'               |
| ' & CO., GMBH & CO.'                               | ' & COMPANY'                 | 'GMBH'             |
| ' & CIE, GMBH & CO.'                               | ' & COMPANY'                 | 'GMBH'             |
| ' & CO., (GMBH & CO)'                              | ' & COMPANY'                 | 'GMBH'             |
| ' & CO., (GMBH & CO.).'                            | ' & COMPANY'                 | 'GMBH'             |
| ' & CO., (GMBH & CO.)'                             | ' & COMPANY'                 | 'GMBH'             |
| ' & CO. GMBH & CO.'                                | ' & COMPANY'                 | 'GMBH'             |
| ' + CO., GMBH & CO'                                | ' & COMPANY'                 | 'GMBH'             |
| ' & CO. (GMBH & CO)'                               | ' & COMPANY'                 | 'GMBH'             |
| ' & CO. (GMBH & CO.)'                              | ' & COMPANY'                 | 'GMBH'             |
| ' & CO (GMBH & CO.)'                               | ' & COMPANY'                 | 'GMBH'             |
| ' & CO (GMBH & CO)'                                | ' & COMPANY'                 | 'GMBH'             |
| ' & CO. (GMBH) & CO.)'                             | ' & COMPANY'                 | 'GMBH'             |
| ' & CIE. GMBH. & CO.'                              | ' & COMPANY'                 | 'GMBH'             |
| ' KG (GMBH & CO.)'                                 | ' & COMPANY'                 | 'KG'               |
| ' K.G. (GMBH & CO)'                                | ' & COMPANY'                 | 'KG'               |
| ' KG (GMBH & CO)'                                  | ' & COMPANY'                 | 'KG'               |
| ' KG. (GMBH & CO)'                                 | ' & COMPANY'                 | 'KG'               |
| ' KG (GMBH) & CO)'                                 | ' & COMPANY'                 | 'KG'               |
| ' KG (GMBH + CO.)'                                 | ' & COMPANY'                 | 'KG'               |
| ', GMBH & CO.'                                     | ' & COMPANY'                 | 'GMBH'             |
| ', GMBH & CO'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH & CO.'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH & CO'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' (GMBH & CO.)'                                    | ' & COMPANY'                 | 'GMBH'             |
| ' (GMBH & CO)'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' KOMMANDITGES. (GMBH +CO.)'                       | ' & COMPANY'                 | 'KG'               |
| ' GMBH. & CO.'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH + CO.'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH + CO'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' G.M.B.H. & CO.'                                  | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH. & CO'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GMBH. + CO.'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' G.M.B.H. & CO'                                   | ' & COMPANY'                 | 'GMBH'             |
| ' (GMBH. & CO.)'                                   | ' & COMPANY'                 | 'GMBH'             |
| ' GBMH + CO.'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' GBMH & CO.'                                      | ' & COMPANY'                 | 'GMBH'             |
| ', GESELLSCHAFT M.B.H. &CO.'                       | ' & COMPANY'                 | 'GMBH'             |
| ' GESELLSCHAFT M.B.H. &CO.'                        | ' & COMPANY'                 | 'GMBH'             |
| ' GESELLSCHAFT M.B.H. &CO'                         | ' & COMPANY'                 | 'GMBH'             |
| ' GES. M.B.H. & CO.'                               | ' & COMPANY'                 | 'GMBH'             |
| ' GESELLSCHAFT MBH & CO'                           | ' & COMPANY'                 | 'GMBH'             |
| ' GESELLSCHAFT MBH & CO.'                          | ' & COMPANY'                 | 'GMBH'             |
| ' GESELLSCHAFT M.B.H &CO.'                         | ' & COMPANY'                 | 'GMBH'             |
| ' MBH & CO.'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' MBH + CO.'                                       | ' & COMPANY'                 | 'GMBH'             |
| ' MBH. & CO.'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' M.B.H. & CO.'                                    | ' & COMPANY'                 | 'GMBH'             |
| ' MBH & CO'                                        | ' & COMPANY'                 | 'GMBH'             |
| ' + CO.'                                           | ' & COMPANY'                 | ''                 |
| ' + CO'                                            | ' & COMPANY'                 | ''                 |
| ', CO.'                                            | ' COMPANY'                   | ''                 |
| ', CO'                                             | ' COMPANY'                   | ''                 |
| ' CO.'                                             | ' COMPANY'                   | ''                 |
| ' CO'                                              | ' COMPANY'                   | ''                 |
| ', MFG. CORP.'                                     | ' MANUFACTURING CORPORATION' | ''                 |
| ' (MFG.) CORP.'                                    | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG. CORP.'                                      | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG., CORP.'                                     | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG CORP.'                                       | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG. CORP'                                       | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG, CORP.'                                      | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG., CORP'                                      | ' MANUFACTURING CORPORATION' | ''                 |
| ' MFG CORP'                                        | ' MANUFACTURING CORPORATION' | ''                 |
| ' INT’L CORP.'                                     | ' INTERNATIONAL CORPORATION' | ''                 |
| ' INT’L. CORP'                                     | ' INTERNATIONAL CORPORATION' | ''                 |
| ' INT’L. CORP.'                                    | ' INTERNATIONAL CORPORATION' | ''                 |
| ' INTL. CORP.'                                     | ' INTERNATIONAL CORPORATION' | ''                 |
| ', CORP.'                                          | ' CORPORATION'               | ''                 |
| ', CORP'                                           | ' CORPORATION'               | ''                 |
| ' CORP.'                                           | ' CORPORATION'               | ''                 |
| ' CORP'                                            | ' CORPORATION'               | ''                 |
| ' GMBH CO. KG'                                     | ' COMPANY'                   | 'KG'               |
| ' GMBH. CO., KG'                                   | ' COMPANY'                   | 'KG'               |
| ' GMBH CO., K.G.'                                  | ' COMPANY'                   | 'KG'               |
| ' GMBH CO., KG'                                    | ' COMPANY'                   | 'KG'               |
| ' GMBH CO, KG'                                     | ' COMPANY'                   | 'KG'               |
| ' GMBH +CO. KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH& CO. KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH &CO KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' GMBH+ CO. KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH &CO. KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH+ CO KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' GMBH +CO KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' + CIE., GMBH U. CO. KG'                          | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H. U. CO. KG'                   | ' & COMPANY'                 | 'KG'               |
| ' GES.M.B.H. U. CO. KG'                            | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H U. CO. KG'                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH U. CO. KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH U. CO. KG.'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMBH U. CO KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' MBH U. CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GMBH UND CO. KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMBH UND CO KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH UND CO. KG.'                                | ' & COMPANY'                 | 'KG'               |
| ' M.B.H. UND CO. KG.'                              | ' & COMPANY'                 | 'KG'               |
| ' M.B.H. UND CO. KG'                               | ' & COMPANY'                 | 'KG'               |
| ' UND CO. KG'                                      | ' & COMPANY'                 | 'KG'               |
| ' UND CO. KG.'                                     | ' & COMPANY'                 | 'KG'               |
| ', GMBH AND CO. KG.'                               | ' & COMPANY'                 | 'KG'               |
| ' GMBH AND CO. KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMBH AND CO., KG'                                | ' & COMPANY'                 | 'KG'               |
| ' AG AND CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GMB& O CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GES. M.B.H. &CO. KG.'                            | ' & COMPANY'                 | 'KG'               |
| ' AG CO. KG'                                       | ' COMPANY'                   | 'KG'               |
| ' & CO. GMBH & CO. KG'                             | ' & COMPANY'                 | 'KG'               |
| ' & CO, GMBH & CO KG'                              | ' & COMPANY'                 | 'KG'               |
| ' & GMBH & CO. KG'                                 | ' & COMPANY'                 | 'KG'               |
| ', GMBH & CO. KG'                                  | ' & COMPANY'                 | 'KG'               |
| ', GMBH & CO, KG'                                  | ' & COMPANY'                 | 'KG'               |
| ', GMBH & CO KG'                                   | ' & COMPANY'                 | 'KG'               |
| ', GMBH & CO. KG.'                                 | ' & COMPANY'                 | 'KG'               |
| ', GMBH & CO., KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO., KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO. KG.'                                  | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H. & CO. KG'                    | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT MBH & CO. KG'                       | ' & COMPANY'                 | 'KG'               |
| ' GES. M.B.H. & CO. KG'                            | ' & COMPANY'                 | 'KG'               |
| ' GMBH. & CO. KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO., KG.'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO. K.G.'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO K.G.'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO KG.'                                   | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT MBH & CO., KG'                      | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H. & CO. KG.'                   | ' & COMPANY'                 | 'KG'               |
| ' GES.M.B.H. & CO. KG'                             | ' & COMPANY'                 | 'KG'               |
| ' GES.M.B.H & CO. KG'                              | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO, KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GMBH. & CO., KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' G.M.B.H. & CO. KG'                               | ' & COMPANY'                 | 'KG'               |
| ' GES.M.B.H. & CO KG'                              | ' & COMPANY'                 | 'KG'               |
| ' GMBH. & CO. KG.'                                 | ' & COMPANY'                 | 'KG'               |
| ' & CO. (GMBH & CO. KG)'                           | ' & COMPANY'                 | 'KG'               |
| ' (GMBH & CO.) KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' GES.M. B. H & CO. KG'                            | ' & COMPANY'                 | 'KG'               |
| ' GNBH & CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GES.M.B.H. & CO. KG.'                            | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO, KG.'                                  | ' & COMPANY'                 | 'KG'               |
| ' GES.MBH & CO. KG'                                | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H. & CO. K.G.'                  | ' & COMPANY'                 | 'KG'               |
| ' GES.M.H. & CO KG.'                               | ' & COMPANY'                 | 'KG'               |
| ' GESMBH & CO. KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H. &'                           | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H & CO. KG.'                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO., K.G.'                                | ' & COMPANY'                 | 'KG'               |
| ' (GMBH & CO. KG)'                                 | ' & COMPANY'                 | 'KG'               |
| ' GMGH & CO., KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT MBH & CO KG'                        | ' & COMPANY'                 | 'KG'               |
| ' GMBH & CO: KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H & CO. KG'                     | ' & COMPANY'                 | 'KG'               |
| ' GBMH & CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' (GMBH & CO KG)'                                  | ' & COMPANY'                 | 'KG'               |
| ' G.M.B.H & CO., K.G.'                             | ' & COMPANY'                 | 'KG'               |
| ' M.B.H. & CO. K.G.'                               | ' & COMPANY'                 | 'KG'               |
| ' MBH & CO., KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' MBH + CO. KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GESELLSCHAFT M.B.H & CO., KG'                    | ' & COMPANY'                 | 'KG'               |
| ' MBH & CO KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' M.B.H. & CO KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH + CO KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' GMBH + CO. KG.'                                  | ' & COMPANY'                 | 'KG'               |
| ' GMBH + CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' GMBH + CO., KG'                                  | ' & COMPANY'                 | 'KG'               |
| ' AG & CO. KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' AG & CO., KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' AG & CO. K.G.'                                   | ' & COMPANY'                 | 'KG'               |
| ' A.G. & CO. K.G.'                                 | ' & COMPANY'                 | 'KG'               |
| ' AG + CO. KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' AKTIENGESELLSCHAFT & CO. KG'                     | ' & COMPANY'                 | 'KG'               |
| ' AG & CO. KG.'                                    | ' & COMPANY'                 | 'KG'               |
| ' AG & CO KG'                                      | ' & COMPANY'                 | 'KG'               |
| ' B.V. & CO. KG'                                   | ' & COMPANY'                 | 'KG'               |
| ' KG & CO. KG'                                     | ' & COMPANY'                 | 'KG'               |
| ' MBH & CO. KG.'                                   | ' & COMPANY'                 | 'KG'               |
| ' MBH & CO. KG'                                    | ' & COMPANY'                 | 'KG'               |
| ' M.B.H. & CO. KG'                                 | ' & COMPANY'                 | 'KG'               |
| ' MBH & CO., KG.'                                  | ' & COMPANY'                 | 'KG'               |
| ' & CO. KG'                                        | ' & COMPANY'                 | 'KG'               |
| ' & CO KG'                                         | ' & COMPANY'                 | 'KG'               |
| ' & CO. KG.'                                       | ' & COMPANY'                 | 'KG'               |
| ' & CO., KG'                                       | ' & COMPANY'                 | 'KG'               |
| ' & CO, KG'                                        | ' & COMPANY'                 | 'KG'               |
| ' & CO. K.G.'                                      | ' & COMPANY'                 | 'KG'               |
| ' & CO KG.'                                        | ' & COMPANY'                 | 'KG'               |
| ' + CO. KG'                                        | ' & COMPANY'                 | 'KG'               |
| ' + CO. KG.'                                       | ' & COMPANY'                 | 'KG'               |
| ' + CO KG'                                         | ' & COMPANY'                 | 'KG'               |
| '-GMBH & CO. KG'                                   | '-GESELLSCHAFT & COMPANY'    | 'KG'               |
| ' KG'                                              | ' KG'                        | 'KG'               |
| ' KG.'                                             | ' KG'                        | 'KG'               |
| ' K.G.'                                            | ' KG'                        | 'KG'               |
| ', CO., LLC'                                       | ' COMPANY'                   | 'LLC'              |
| ', CO. L.L.C.'                                     | ' COMPANY'                   | 'LLC'              |
| ' MFG., CO., LLC'                                  | ' MANUFACTURING COMPANY'     | 'LLC'              |
| ' CO., LLC'                                        | ' COMPANY'                   | 'LLC'              |
| ' CO., L.L.C.'                                     | ' COMPANY'                   | 'LLC'              |
| ' CO. LLC'                                         | ' COMPANY'                   | 'LLC'              |
| ' CO. L.L.C.'                                      | ' COMPANY'                   | 'LLC'              |
| ' CO, LLC'                                         | ' COMPANY'                   | 'LLC'              |
| ' CO., LLC.'                                       | ' COMPANY'                   | 'LLC'              |
| ' CO L.L.C.'                                       | ' COMPANY'                   | 'LLC'              |
| ' CO LLC'                                          | ' COMPANY'                   | 'LLC'              |
| ', INC. LLC'                                       | ' COMPANY'                   | 'LLC'              |
| ', INC., L.L.C.'                                   | ' COMPANY'                   | 'LLC'              |
| ', INC., LLC'                                      | ' COMPANY'                   | 'LLC'              |
| ', INC. L.L.C.'                                    | ' COMPANY'                   | 'LLC'              |
| ' INC, LLC'                                        | ' COMPANY'                   | 'LLC'              |
| ' INC., LLC'                                       | ' COMPANY'                   | 'LLC'              |
| ' MFG., LLC'                                       | ''                           | 'LLC'              |
| ' MFG., L.L.C.'                                    | ''                           | 'LLC'              |
| ' MFG, LLC'                                        | ''                           | 'LLC'              |
| ' MFG, LLC.'                                       | ''                           | 'LLC'              |
| ', LLC'                                            | ''                           | 'LLC'              |
| ', LLC.'                                           | ''                           | 'LLC'              |
| ', L.L.C.'                                         | ''                           | 'LLC'              |
| ', L.L.C'                                          | ''                           | 'LLC'              |
| ', LL.C.'                                          | ''                           | 'LLC'              |
| ', L.LC.'                                          | ''                           | 'LLC'              |
| ', L.L.C..'                                        | ''                           | 'LLC'              |
| ' L.L.C.'                                          | ''                           | 'LLC'              |
| ' LLC.'                                            | ''                           | 'LLC'              |
| ' LLC'                                             | ''                           | 'LLC'              |
| ' (LLC)'                                           | ''                           | 'LLC'              |
| ' L.L.C'                                           | ''                           | 'LLC'              |
| ' L.LC.'                                           | ''                           | 'LLC'              |
| ' LL.C'                                            | ''                           | 'LLC'              |
| ' CO. B.V.'                                        | ' COMPANY'                   | 'BV'               |
| ' CO., B.V.'                                       | ' COMPANY'                   | 'BV'               |
| ' CO, B.V.'                                        | ' COMPANY'                   | 'BV'               |
| ' CO B.V.'                                         | ' COMPANY'                   | 'BV'               |
| ', B.V.'                                           | ''                           | 'BV'               |
| ', BV'                                             | ''                           | 'BV'               |
| ', B.V'                                            | ''                           | 'BV'               |
| ' B.V.'                                            | ''                           | 'BV'               |
| ' BV.'                                             | ''                           | 'BV'               |
| ' BV'                                              | ''                           | 'BV'               |
| ' B.V'                                             | ''                           | 'BV'               |
| ', OY AB'                                          | ''                           | 'AB'               |
| ' OY, AB'                                          | ''                           | 'AB'               |
| ' OY AB'                                           | ''                           | 'AB'               |
| ' CO. AB'                                          | ' COMPANY'                   | 'AB'               |
| ' CO AB'                                           | ' COMPANY'                   | 'AB'               |
| ' CO A.B.'                                         | ' COMPANY'                   | 'AB'               |
| ' CO., AB'                                         | ' COMPANY'                   | 'AB'               |
| ' AKTIEBOLAG (AB)'                                 | ''                           | 'AB'               |
| ' AKTIEBOLG (AB)'                                  | ''                           | 'AB'               |
| ', A/B'                                            | ''                           | 'AB'               |
| ', AB'                                             | ''                           | 'AB'               |
| ', A.B.'                                           | ''                           | 'AB'               |
| ' AB'                                              | ''                           | 'AB'               |
| ' A.B.'                                            | ''                           | 'AB'               |
| ' AB.'                                             | ''                           | 'AB'               |
| ' A/B'                                             | ''                           | 'AB'               |
| ' GMBH & CO AG'                                    | ' & COMPANY'                 | 'AG'               |
| ' GMBH & CO. AG'                                   | ' & COMPANY'                 | 'AG'               |
| ' GMBH & CO., AG'                                  | ' & COMPANY'                 | 'AG'               |
| ' AG & CO AG'                                      | ' & COMPANY'                 | 'AG'               |
| ' + CO. AG'                                        | ' & COMPANY'                 | 'AG'               |
| ' CO. AG'                                          | ' COMPANY'                   | 'AG'               |
| ' CO., AG'                                         | ' COMPANY'                   | 'AG'               |
| ' CO. AG.'                                         | ' COMPANY'                   | 'AG'               |
| ' CO AG'                                           | ' COMPANY'                   | 'AG'               |
| ' CO. A.G.'                                        | ' COMPANY'                   | 'AG'               |
| ' CO., A.G.'                                       | ' COMPANY'                   | 'AG'               |
| ' + CIE AG'                                        | ' & COMPANY'                 | 'AG'               |
| ' CIE. AG'                                         | ' COMPANY'                   | 'AG'               |
| ' CIE AG'                                          | ' COMPANY'                   | 'AG'               |
| ' CIE. A.-G.'                                      | ' COMPANY'                   | 'AG'               |
| ' CIE. AG.'                                        | ' COMPANY'                   | 'AG'               |
| ' AKTIENGESELLSCHAFT AG'                           | ''                           | 'AG'               |
| ' AKTIENGESELLSCHAFT, AG'                          | ''                           | 'AG'               |
| ', AG'                                             | ''                           | 'AG'               |
| ', A.G.'                                           | ''                           | 'AG'               |
| ', A.G'                                            | ''                           | 'AG'               |
| ', AG.'                                            | ''                           | 'AG'               |
| ' AG'                                              | ''                           | 'AG'               |
| ' A.G.'                                            | ''                           | 'AG'               |
| ' AG.'                                             | ''                           | 'AG'               |
| ' A.-G.'                                           | ''                           | 'AG'               |
| ' (AG)'                                            | ''                           | 'AG'               |
| ' A/G'                                             | ''                           | 'AG'               |
| ' + CO. GESELLSCHAFT MBH'                          | ' & COMPANY'                 | 'GMBH'             |
| ' CO. GESELLSCHAFT M.B.H.'                         | ' COMPANY'                   | 'GMBH'             |
| ' CO., GESELLSCHAFT MBH'                           | ' COMPANY'                   | 'GMBH'             |
| ' CO. GESELLSCHAFT MBH'                            | ' COMPANY'                   | 'GMBH'             |
| ' CO., GESELLSCHAFT M.B.H.'                        | ' COMPANY'                   | 'GMBH'             |
| ' CO GESELLSCHAFT M.B.H.'                          | ' COMPANY'                   | 'GMBH'             |
| ', GESELLSCHAFT M.B.H.'                            | ''                           | 'GMBH'             |
| ', GESELLSCHAFT M.B.H'                             | ''                           | 'GMBH'             |
| ', GESELLSCHAFT MBH'                               | ''                           | 'GMBH'             |
| ', GES. M.B.H.'                                    | ''                           | 'GMBH'             |
| ', GES, M.B.H'                                     | ''                           | 'GMBH'             |
| ' GES. M.B.H.'                                     | ''                           | 'GMBH'             |
| ' GES,, M.B.H.'                                    | ''                           | 'GMBH'             |
| ' GES M.B.H.'                                      | ''                           | 'GMBH'             |
| ' GES. M.B.H'                                      | ''                           | 'GMBH'             |
| ' GES. MBH'                                        | ''                           | 'GMBH'             |
| ' GES M.B.H'                                       | ''                           | 'GMBH'             |
| ' UND CO. MBH'                                     | ' & COMPANY'                 | 'GMBH'             |
| ' UND CO MBH'                                      | ' & COMPANY'                 | 'GMBH'             |
| ' CO. MBH'                                         | ' COMPANY'                   | 'GMBH'             |
| ', M.B.H.'                                         | ''                           | 'GMBH'             |
| ', MBH'                                            | ''                           | 'GMBH'             |
| ' M.B.H.'                                          | ''                           | 'GMBH'             |
| ' MBH'                                             | ''                           | 'GMBH'             |
| ' MBH.'                                            | ''                           | 'GMBH'             |
| ' M.B.H'                                           | ''                           | 'GMBH'             |
| ' KABUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' YUEN KASHA'                                      | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSK KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHKA KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSH KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KUBUSHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABSHK KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABSHK KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KAUBSHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KASBUSHK KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHH KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSKK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABSUHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KAUSHK KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUHSK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KAUBUSHK KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KBUSHK KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KANUSHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHKK KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KASHA KASHA'                                     | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHHK KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSK KASHA'                                    | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSBK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABSHUK KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHKA KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHKO KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KABSUSHK KASHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' YUUEN KASHA'                                     | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUHK KASHA'                                    | ' KOGYO'                     | 'KABUSHIKI KAISHA' |
| ' KOYOKABUSHK KASHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHL KASHA'                                   | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHUKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KAGUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHISKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUBSHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUKSHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABURHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSAHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUISHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' JABUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' AKBUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' BABUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' BUSHIKI KAISHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' DABUSHIKI KAISHA'                                | ' DENKI'                     | 'KABUSHIKI KAISHA' |
| ' DENKIKABUSHIKI KAISHA'                           | ''                           | 'KABUSHIKI KAISHA' |
| ' FABUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABHUSHIKI KAISHA'                               | ' HATSUDOKI'                 | 'KABUSHIKI KAISHA' |
| ' HATSUDOKIKABUSHIKI KAISHA'                       | ''                           | 'KABUSHIKI KAISHA' |
| ' KABSUBSHIKI KAISHA'                              | ' JIDOSHA'                   | 'KABUSHIKI KAISHA' |
| ' JIDOSHAKABUSHIKI KAISHA'                         | ' JUKOGYO'                   | 'KABUSHIKI KAISHA' |
| ' JUKOGYOKABUSHIKI KAISHA'                         | ''                           | 'KABUSHIKI KAISHA' |
| ' KABAHIKI KAISHA'                                 | ''                           | 'KABUSHIKI KAISHA' |
| ' KABASHIKA KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABASIKI KAISHA'                                 | ''                           | 'KABUSHIKI KAISHA' |
| ' KABBUSHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABHSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABISHA KAISHA'                                  | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIKIKI KAISHA'                              | ''                           | 'KABUSHIKI KAISHA' |
| ' KAKUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KATUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KEBUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KEBUSKIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KAIBUSHIKI KAISHA'                               | ' KOGYO'                     | 'KABUSHIKI KAISHA' |
| ' KOGYOOKABUSHIKI KAISHA'                          | ''                           | 'KABUSHIKI KAISHA' |
| ' KAIBSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' LABUSHIKI KAISHA'                                | ' SHOKUHIN'                  | 'KABUSHIKI KAISHA' |
| ' SHOKUHINKABUSHIKI KAISHA'                        | ' KOGYO'                     | 'KABUSHIKI KAISHA' |
| ' KOGYOLKABUSHIKI KAISHA'                          | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHISHI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIHIKI KAISHA'                              | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIKE KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIKHI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIKII KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIKIK KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIKU KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIMI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KAISHUSHIKI KAISHA'                              | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHINKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHIBI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHKIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHUSHIKI KAISHA'                             | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSIHI KAISHA'                                 | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSSHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSYIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUUSHIKI KAISHA'                               | ''                           | 'KABUSHIKI KAISHA' |
| ' KABYSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KAHUSHIKI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |
| ' KABUSHINI KAISHA'                                | ''                           | 'KABUSHIKI KAISHA' |

#+call: make-rds-patterns-table(data = magerman.patterns.legal.form.end, data.name = "magerman.patterns.legal.form.end"))

*** Table: Legal form in the middle

#+NAME: magerman.patterns.legal.form.middle
| KEYWORD             | Replace       | LEGAL |
|---------------------+---------------+-------|
| ' GMBH & CO. K.G. ' | ' & COMPANY ' | GMBH  |
| ' GMBH & CO. KG. '  | ' & COMPANY ' | GMBH  |
| ' GMBH & CO. KG '   | ' & COMPANY ' | GMBH  |
| ' GMBH & CO.K.G. '  | ' & COMPANY ' | GMBH  |
| ' GMBH & CO.KG '    | ' & COMPANY ' | GMBH  |
| ' GMBH & CO KG '    | ' & COMPANY ' | GMBH  |
| ' GMBH + CO. KG '   | ' & COMPANY ' | GMBH  |
| ' GMBH & CO. '      | ' & COMPANY ' | GMBH  |
| ' GMBH & CO '       | ' & COMPANY ' | GMBH  |
| ' GMBH & CO.,'      | ' & COMPANY ' | GMBH  |
| ' GMBH & CO,'       | ' & COMPANY ' | GMBH  |
| ' GMBH + CO. '      | ' & COMPANY ' | GMBH  |
| ' GMBH + CO '       | ' & COMPANY ' | GMBH  |
| ' GMBH + CO.,'      | ' & COMPANY ' | GMBH  |
| ' GMBH + CO,'       | ' & COMPANY ' | GMBH  |
| ' GMBH,'            | ' '           | GMBH  |
| ' GMBH '            | ' '           | GMBH  |

#+call: make-rds-patterns-table(data = magerman.patterns.legal.form.middle, data.name = "magerman.patterns.legal.form.middle"))

*** Detect and replace legal forms
:PROPERTIES:
:ID:       org:yrvizmx01ei0
:END:

"The search and replace statements were executed in three groups: firstly, a group of 1,060
statements to remove legal forms at the end of a name (see Appendix 2); then a group of 1
statement to remove legal forms at the beginning of a name (remove 1216 occurrences of
“KABUSHIKI KAISHA” at the beginning of a name); and finally, a group of 17 statements to
remove legal forms anywhere in a name (see Table 18)." (p. 39)

#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Detects legal form
  ##' @param x table
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_detect_legal_form_end <- function(x, ...) {
      harmonize.detect(x,
          magerman.patterns.legal.form.end,
          patterns.codes.col = 3,
          patterns.type = "ends",
          return.only.first.detected.code = TRUE,
          ...
      )
  }

  ##' Replaces legal form
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_replace_legal_form_end <- function(x, ...) {
      replace_patterns(x,
          patterns = magerman.patterns.legal.form.end,
          patterns.type = "ends",
          ...
      )
  }

  ##' Detects legal form
  ##' @param x table
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_detect_legal_form_beginning <- function(x, ...) {
      harmonize.detect(x,
          patterns = data.table(
              pattern = "KABUSHIKI KAISHA",
              legal.form = "KAISHA"
          ),
          patterns.type = "begins",
          return.only.first.detected.code = TRUE,
          ...
      )
  }

  ##' Replaces legal form
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_replace_legal_form_beginning <- function(x, ...) {
      replace_patterns(x,
          patterns = "KABUSHIKI KAISHA",
          patterns.type = "begins",
          ...
      )
  }



  ##' Detects legal form
  ##' @param x table
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_detect_legal_form_middle <- function(x, ...) {
      harmonize.detect(x,
          patterns = magerman.patterns.legal.form.middle,
          patterns.codes.col = 3,
          patterns.type = "fixed",
          return.only.first.detected.code = TRUE,
          ...
      )
  }

  ##' Replaces legal form
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_replace_legal_form_middle <- function(x, ...) {
      replace_patterns(x,
          patterns = magerman.patterns.legal.form.middle,
          patterns.type = "fixed",
          ...
      )
  }


  ## Test
  ## c("lksdjf MFG. CO, INC"
  ## , "MSlab Co."
  ## , "IBM Corp."
  ## , "MSlab Co. GMBH & CO.KG lalal"
  ## , "KABUSHIKI KAISHA MSlab Co. ") %>%
  ##   toupper %>%
  ##   magerman_detect_legal_form_end
#+END_SRC


"In a group, all search and replace statements are executed in a singular and not a cumulative approach.

If a name contains a legal form indication at the beginning and the end of a name, or anywhere in the name, only the legal form indication occurring at the end of the name is harmonized and moved to a different field.

As the replacements and removals in the search and replace statements can lead to names ending with irregular punctuation characters, all occurrences of “-”; “;“; “:”; “,” and “&” are removed at the end of a name by executing an update query on the data.

plus trim..."

#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Detects legal form
  ##' @param x table
  ##' @inheritDotParams magerman_detect_legal_form_end
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @import magrittr
  ##' @export
  magerman_detect_legal_form <- function(x, ...) {
      x %>%
          magerman_detect_legal_form_end(...) %>%
          magerman_detect_legal_form_beginning(
              x.codes.col = ncol(.),
              x.codes.update.empty = TRUE
          ) %>%
          magerman_detect_legal_form_middle(
              x.codes.col = ncol(.),
              x.codes.update.empty = TRUE
          )
  }

  ## Test
  ## c("lksdjf MFG. GMBH CO, INC"
  ##  , "MSlab Co."
  ##  , "IBM Corp."
  ##  , "MSlab Co. GMBH & CO.KG lalal"
  ##  , "KABUSHIKI KAISHA MSlab Co. ") %>%
  ##    magerman.detect.legal.form


  ##' Removes legal form
  ##' @param x table
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @import magrittr
  ##' @export
  magerman_remove_legal_form <- function(x) {
      x %>%
          magerman_detect_legal_form_end(codes.name = "not.to.replace") %>%
          magerman_replace_legal_form_end() %>%
          magerman_replace_legal_form_beginning(
              x.rows = harmonize_is_data_empty(.[[ncol(.)]]),
              x.col.update = TRUE
          ) %>%
          magerman_replace_legal_form_middle(
              x.rows = harmonize_is_data_empty(.[[ncol(.)]]),
              x.col.update = TRUE
              ## drop last col "not.to.replace"
              , return.x.cols = -ncol(.)
          )
  }




  ##' Removes legal form
  ##' @param x table
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @import magrittr
  ##' @export
  magerman_remove_legal_form_and_clean <- function(x) {
      x %>%
          magerman_remove_legal_form() %>%
          replace_patterns(
              patterns = c("[-;:,&]*\\s*$", "^\\s*"),
              patterns.type = "regex"
          )
  }
#+END_SRC

#+BEGIN_SRC R :tangle no
  ## Test
  c("lksdjf MFG. GMBH CO,; INC"
  , "MSlab Co."
  , "IBM Corp."
  , " MSlab Co. GMBH & CO.KG lalal  "
  , "KABUSHIKI KAISHA MSlab Co.") %>%
    toupper %>% 
    magerman.remove.legal.form.and.clean


  data.table(c("lksdjf MFG. GMBH CO,; INC"
             , "MSlab Co."
             , "IBM Corp."
             , " MSlab Co. GMBH & CO.KG lalal  "
             , "KABUSHIKI KAISHA MSlab Co.") %>% toupper
           , somevar = c(1,2,3,4,5)) %>%
    magerman.remove.legal.form.and.clean

#+END_SRC

** Common Words
:PROPERTIES:
:ID:       org:mabjzmx01ei0
:END:

Table 19: Common company words to be removed at the end of a name
#+NAME: magerman.patterns.common.words.at.the.end
| KEYWORD        |
|----------------|
| 'CORPORATION'  |
| 'CORP'         |
| 'AND COMPANY'  |
| '& COMPANY'    |
| 'COMPANY'      |
| ' KG'          |
| 'GESELLSCHAFT' |

#+call: make-rds-patterns-table(data = magerman.patterns.common.words.at.the.end, data.name = "magerman.patterns.common.words.at.the.end")


Table 20: Common company words to be removed at the beginning of a name
#+NAME: magerman.patterns.common.words.at.the.beginning
| KEYWORD                                 |
|-----------------------------------------|
| 'SOCIETE A RESPONSABILITE LIMITEE DITE' |
| 'SOCIETE A RESPONSABILITE LIMITEE'      |
| 'SOCIETE ANONYME DITE'                  |
| 'SOCIETE ANONYME DES '                  |
| 'SOCIETE ANONYME DE '                   |
| 'SOCIETE ANONYME D''                    |
| 'SOCIETE ANONYME'                       |
| 'SOCIETE CIVILE DES '                   |
| 'SOCIETE CIVILE DE '                    |
| 'SOCIETE CIVILE D''                     |
| 'SOCIETE CIVILE '                       |
| 'SOCIETE DITE'                          |
| 'SOCIETE DES '                          |
| 'SOCIETE DE '                           |
| 'SOCIETE D''                            |
| 'SOCIETE '                              |

#+call: make-rds-patterns-table(data = magerman.patterns.common.words.at.the.beginning, data.name = "magerman.patterns.common.words.at.the.beginning")


Table 21: Common company words to be removed anywhere in a name
#+NAME: magerman.patterns.common.words.anywhere
| KEYWORD          |
|------------------|
| ' AND CO '       |
| ' AND CO.'       |
| ' AND CO,'       |
| ' & CO '         |
| ' & CO.'         |
| ' & CO,'         |
| ' CO '           |
| ' CO.'           |
| ' CO,'           |
| ' GESELLSCHAFT ' |
| ' SOCIETE '      |
| ' CORPORATION '  |
| ' INC.'          |
| ' INC,'          |
| ' COMPANY '      |
| ' AG '           |
| ' AG,'           |
| ' AG.'           |

#+call: make-rds-patterns-table(data = magerman.patterns.common.words.anywhere, data.name = "magerman.patterns.common.words.anywhere")


#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Removes common words
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_remove_common_words_at_the_end <- function(x, ...) {
      replace_patterns(x,
          patterns = magerman.patterns.common.words.at.the.end,
          patterns.type = "ends",
          ...
      )
  }

  ##' Removes common words
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_remove_common_words_at_the_beginning <- function(x, ...) {
      replace_patterns(x,
          patterns = magerman.patterns.common.words.at.the.beginning,
          patterns.type = "begins",
          ...
      )
  }



  ##' Removes common words
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_remove_common_words_anywhere <- function(x, ...) {
      replace_patterns(x,
          patterns = magerman.patterns.common.words.anywhere,
          patterns.type = "fixed",
          ...
      )
  }


  ##' Removes common words
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @import magrittr
  ##' @export
  magerman_remove_common_words <- function(x, ...) {
      x %>%
          magerman_remove_common_words_at_the_end(...) %>%
          magerman_remove_common_words_at_the_beginning(...) %>%
          magerman_remove_common_words_anywhere(...)
  }


  ## Test
  ## c("lksdjf MFG. GMBH CO,; INC"
  ## , "MSlab Co."
  ## , "IBM Corp."
  ## , " MSlab Co. GMBH & CO.KG lalal  "
  ## , "KABUSHIKI KAISHA MSlab Co.") %>%
  ##   toupper %>%
  ##   magerman.remove.legal.form.clean %>%
  ##   magerman.remove.common.words(return.x.cols.all = TRUE)
#+END_SRC

** Spelling Variation
:PROPERTIES:
:ID:       org:dcijzmx01ei0
:END:

Table 22: Spelling variations and their harmonized equivalent
#+NAME: magerman.patterns.spelling.variation
| KEYWORD          | REMARKS         |
|------------------+-----------------|
| 'SYSTEMEN'       | 'SYSTEM'        |
| 'SYSTEMES'       | 'SYSTEM'        |
| 'SYSTEME'        | 'SYSTEM'        |
| 'SYSTEMS'        | 'SYSTEM'        |
| 'INTERNATIONALE' | 'INTERNATIONAL' |
| 'TECHNOLOGIES'   | 'TECHNOLOGY'    |
| 'TECHNOLOGIEN'   | 'TECHNOLOGY'    |
| 'TECHNOLOGIE'    | 'TECHNOLOGY'    |
| 'INDUSTRIELLES'  | 'INDUSTRIEL'    |
| 'INDUSTRIELLE'   | 'INDUSTRIEL'    |
| 'INDUSTRIELE'    | 'INDUSTRIEL'    |
| 'INDUSTRIES'     | 'INDUSTRY'      |
| 'INDUSTRIELS'    | 'INDUSTRIEL'    |
| 'INSTITUT'       | 'INSTITUTE'     |
| 'SERVICES'       | 'SERVICE'       |
| 'ELECTRONICS'    | 'ELECTRONIC'    |
| 'ENTERPRISES'    | 'ENTERPRISE'    |
| 'DESIGNS'        | 'DESIGN'        |
| 'CHEMICALS'      | 'CHEMICAL'      |
| 'HOLDINGS'       | 'HOLDING'       |
| 'LABORATORIES'   | 'LABORATORY'    |
| 'COMMUNICATIONS' | 'COMMUNICATION' |
| 'INSTRUMENTS'    | 'INSTRUMENT'    |
| 'PLASTICS'       | 'PLASTIC'       |
| 'MACHINES'       | 'MACHINE'       |
| 'SCIENCES'       | 'SCIENCE'       |

#+call: make-rds-patterns-table(data = magerman.patterns.spelling.variation, data.name = "magerman.patterns.spelling.variation")

#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Replaces spelling variation
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_replace_spelling_variation <- function(x, ...) {
      replace_patterns(x,
          patterns = magerman.patterns.spelling.variation,
          ...
      )
  }

  ## Test
  ## c("CHEMICALS SYSTEMEN MSlab Ltd."
  ## , "ELECTRONICS SYSTEMES MSlab Co.") %>%
  ##   magerman.replace.spelling.variation(return.x.cols.all = TRUE)
#+END_SRC


** Condensing
:PROPERTIES:
:ID:       org:rl10al703ei0
:END:
#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Condenses string
  ##' @param x table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @export
  magerman_condense <- function(x, ...) {
      replace_patterns(x,
          patterns = "[^a-zA-Z0-9]+",
          patterns.type = "regex",
          ...
      )
  }

  ## Test
  ## c("lksdjf MFG. GMBH CO,; INC"
  ## , "MSlab Co."
  ## , "IBM Corp."
  ## , " MSlab Co. GMBH & CO.KG lalal  "
  ## , "KABUSHIKI KAISHA MSlab Co.") %>%
  ##   magerman.condence(return.x.cols.all = TRUE)
#+END_SRC


** Umlaut Harmonization
:PROPERTIES:
:ID:       org:6lo7ug60gei0
:END:

#+NAME: magerman.patterns.umlaut
| char | ascii | replacement | umlaut |
|------+-------+-------------+--------|
| Ä    | A     | AE          | TRUE   |
| Ö    | O     | OE          | TRUE   |
| Ü    | U     | UE          | TRUE   |
# | ä  | a     | ae          | TRUE   |
# | ö  | o     | oe          | TRUE   |
# | ü  | u     | ue          | TRUE   |

#+call: make-rds-patterns-table(data = magerman.patterns.umlaut, data.name = "magerman.patterns.umlaut")


:PROPERTIES:
:ID:       org:i680al703ei0
:END:
#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Detects umlauts
  ##' @param x table
  ##' @inheritDotParams harmonize.detect
  ##' @return Coded table
  ##'
  ##' @md
  ##' @export
  magerman_detect_umlaut <- function(x, ...) {
      harmonize.detect(x, ,
          patterns = magerman.patterns.umlaut,
          patterns.codes.col = 4,
          patterns.type = "fixed",
          return.only.first.detected.code = TRUE,
          ...
      )
  }



  ## Test
  ## c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
  ## , "MSLab Co."
  ## , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") %>%
  ##   magerman.detect.umlaut(return.just.codes = FALSE)


  ##' Replaces Umlauts
  ##' @param x Data
  ##' @param x.umlaut.col Column with logical values indicating weather a corresponding string has an umlaut. Default is NULL so it detects is automatically first
  ##' @param drop.umlaut.col Whether to drop `umlaut.col`. Default is FALSE
  ##' @param replace.accented.characters Whether to replace accented characters first. Default is FALSE
  ##' @inheritDotParams harmonize.x
  ##' @return Harmonized table
  ##'
  ##' @md
  ##' @import magrittr
  ##' @export
  magerman_replace_umlaut <- function(x,
                                      x.umlaut.col = NULL,
                                      drop.umlaut.col = TRUE,
                                      replace.accented.characters = FALSE,
                                      ...) {
      ## get x vector...
      x.vector <- harmonize.x(x, ...)
      ## identify names with umlauts
      if (!is.null(x.umlaut.col) & !is.atomic(x)) {
          x.umlaut <- x[[x.umlaut.col]] %>% as.logical()
          ## drop x.umlaut.col
          if (isTRUE(drop.umlaut.col)) x[[x.umlaut.col]] <- NULL
      } else {
          replace.accented.characters <- TRUE
          x.umlaut <- x.vector %>%
              magerman_detect_umlaut(return.just.codes = TRUE) %>%
              as.logical()
      }
      ## replace accented characters
      if (replace.accented.characters) {
          x.vector %<>%
              magerman_replace_accented_characters
      }
      ## check if there are at least some umlauts
      if (any(as.logical(x.umlaut), na.rm = TRUE)) {
          ## transform umlaut
          x.harmonized <- x.vector %>%
              ## first "AE", "OE", "UE" -> "A", "O", "U"
              replace_patterns(
                  patterns = magerman.patterns.umlaut,
                  patterns.col = 3,
                  patterns.replacements.col = 2
              ) %>%
              ## then "A", "O", "U" -> "AE", "OE", "UE"
              replace_patterns(
                  patterns = magerman.patterns.umlaut,
                  patterns.col = 2,
                  patterns.replacements.col = 3
              )
          ## check which one match original umlaut
          x.harmonized.keep <-
              x.harmonized %in%
              x.harmonized[sapply(x.umlaut, isTRUE)]
          ## if does not match umlaut replace with original
          x.harmonized %<>%
              inset(
                  !x.harmonized.keep,
                  x.vector[!x.harmonized.keep]
              )
          ## return table
          harmonize.x(x, x.harmonized, ...) %>% return()
      } else {
          harmonize.x(x, x.vector, ...) %>% return()
      }
  }

  ## Tests
  ## data.frame(
  ##   test = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
  ##        , "MSLab CÖ."
  ##        , "MSLab Co."
  ##        , "MSLaeb Comp."
  ##        , "MSLab Comp."
  ##        , "ÃÄÅÆÇÈÉÌÍÏÐÑÒÖØÚÝŸ") %>% toupper
  ## , log = "lot of coffee"
  ## , umlaut = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE)) %>%
  ##   magerman.replace.umlaut(return.x.cols.all = FALSE
  ##                         , x.umlaut.col = "umlaut"
  ##                         , drop.umlaut.col = TRUE)
#+END_SRC


** Combined Magerman Procedures
:PROPERTIES:
:ID:       org:x0v7ug60gei0
:END:

#+NAME: magerman.procedures.table
| no | message                                  | function.call                                                                 |
|----+------------------------------------------+-------------------------------------------------------------------------------|
|    |                                          |                                                                               |
|    | *Prepossessing*                          |                                                                               |
|  1 | Upper casing                             | 'harmonize.toupper'                                                           |
|  2 | Cleaning spaces                          | 'harmonize.squish.spaces'                                                     |
|    |                                          |                                                                               |
|    | *Characters*                             |                                                                               |
|  3 | Removing HTML codes                      | 'magerman.remove.html.codes'                                                  |
|  4 | Cleaning spaces (2)                      | 'harmonize.squish.spaces'                                                     |
|  5 | Replacing SGML coded characters          | 'magerman.replace.sgml.characters'                                            |
|  6 | Replacing proprietary characters         | 'magerman.replace.proprietary.characters'                                     |
|  7 | Detecting Umlauts                        | 'magerman.detect.umlaut', codes.name = 'magerman.umlaut'                      |
|    |                                          | /The above sets code names with umlaut for umlaut harmonization later/        |
|  8 | Replacing accented characters            | 'magerman.replace.accented.characters'                                        |
|    |                                          |                                                                               |
|    | *Punctuation*                            |                                                                               |
|  9 | Removing special characters              | 'magerman.remove.special.characters'                                          |
| 10 | Fixing quotation irregularities          | 'magerman.remove.double.quotation.marks.irregularities'                       |
| 11 | Removing double quotations               | 'magerman.remove.double.quotation.marks.beginning.end'                        |
| 12 | Removing non alphanumeric characters (1) | 'magerman.remove.non.alphanumeric.at.the.beginning'                           |
| 13 | Removing non alphanumeric characters (2) | 'magerman.remove.non.alphanumeric.at.the.end'                                 |
| 14 | Fixing comma and period irregularities   | 'magerman.replace.comma.period.irregularities'                                |
|    |                                          |                                                                               |
|    | *Legal forms*                            |                                                                               |
| 15 | Detecting legal form                     | 'magerman.detect.legal.form', codes.name = 'legal.form'                       |
| 16 | Removing legal form                      | 'magerman.remove.legal.form.and.clean'                                        |
|    |                                          |                                                                               |
|    | *Common words*                           |                                                                               |
| 17 | Removing common words                    | 'magerman.remove.common.words'                                                |
| 18 | Fixing spelling variations               | 'magerman.replace.spelling.variation'                                         |
| 19 | Condensing                               | 'magerman.condense'                                                           |
|    |                                          |                                                                               |
|    | *Umlaut harmonization*                   |                                                                               |
| 20 | Fixing umlaut variations                 | 'magerman.replace.umlaut', x.umlaut.col = 'magerman.umlaut', progress = FALSE |
|    |                                          | /the above procedure wont work properly for batches/                          |
|    |                                          | /because it need to look up matches in the whole corpus/                      |
|    |                                          | /that is why we set 'progress = FALSE'/                                       |

#+call: make-rds-patterns-table(data = magerman.procedures.table, data.name = "magerman.procedures.table", remove.single.quotes = "FALSE")

Old list specification
#+BEGIN_SRC R :tangle no
   magerman.procedures.list <- list(
    ## prepossessing
    "Upper casing" = "harmonize.toupper"
  , "Cleaning spaces" = "harmonize.squish.spaces"
    ## characters
  , "Removing HTML codes" = "magerman.remove.html.codes"
  , "Cleaning spaces (2)" = "harmonize.squish.spaces"
  , "Replacing SGML coded characters" = "magerman.replace.sgml.characters"
  , "Replacing proprietary characters" = "magerman.replace.proprietary.characters"
  # code names with umlaut for umlaut harmonization
  , "Detecting Umlauts" = list("magerman.detect.umlaut"
                             , codes.name = "magerman.umlaut")
  , "Replacing accented characters" = "magerman.replace.accented.characters"
    ## punctuation
  , "Removing special characters" = "magerman.remove.special.characters"
  , "Fixing quotation irregularities" =  "magerman.remove.double.quotation.marks.irregularities"
  , "Removing double quotations" = "magerman.remove.double.quotation.marks.beginning.end"
  , "Removing non alphanumeric characters (1)" = "magerman.remove.non.alphanumeric.at.the.beginning"
  , "Removing non alphanumeric characters (2)" = "magerman.remove.non.alphanumeric.at.the.end"
  , "Fixing comma and period irregularities" = "magerman.replace.comma.period.irregularities"
    ## legal form
  , "Detecting legal form" = list("magerman.detect.legal.form"
                                , codes.name = "legal.form")
  , "Removing legal form" = "magerman.remove.legal.form.and.clean"
    ## common words
  , "Removing common words" = "magerman.remove.common.words"
    ## spelling variation
  , "Fixing spelling variations" = "magerman.replace.spelling.variation"
    ## condensing
  , "Condensing" = "magerman.condense"
    ## umlaut harmonization
  , "Fixing umlaut variations" = list("magerman.replace.umlaut"
       , x.umlaut.col = "magerman.umlaut"
         ## this function wont work properly for batches
         ## it need to look up matches in the whole corpus
       , progress = FALSE))
#+END_SRC

#+BEGIN_SRC R :tangle ./R/magerman.r
  ##' Harmonizes strings using exact procedures described in Magerman et al. 2009.
  ##' @param x table or vector
  ##' @param magerman.procedures Named list of procedures (closures) to apply to x. If we need to pass arguments to some of the procedures it can be done by specifying sub-list where the first element is procedure and the rest its arguments. Names of the list elements are used for progress messages. Procedures can also be passed as data.frame in which case it will be converted to list of procedures with `harmonize.make.procedures.list` (see its help for the correct format of data.frame with procedures). Default is `magerman.procedures.table`.
  ##' @param detect.legal.form Whether to detect legal forms. Default is FALSE
  ##' @param return.x.before.common.words.removal Whether to save harmonized column before `common.words.removal` procedure. Default is FALSE
  ##' @param return.x.cols.all Whether to return initial column in x. Default is FALSE
  ##' @inheritDotParams harmonize
  ##' @return Harmonized table
  ##'
  ##' @references Magerman et al., 2006 - Data Production Methods for Harmonized Patent Statistics: Patentee Name Harmonization
  ##'
  ##' @md
  ##' @import magrittr
  ##' @export
  harmonize_magerman <- function(x,
                                 magerman.procedures = magerman.procedures.table,
                                 detect.legal.form = FALSE,
                                 return.x.before.common.words.removal = FALSE,
                                 return.x.cols.all = FALSE,
                                 ...) {
      if (is.data.frame(magerman.procedures)) {
          magerman.procedures %<>% harmonize.make.procedures.list
      }
      ## do some tweaks on magerman.procedures
      if (!detect.legal.form) {
          magerman.procedures %<>%
              extract(sapply(., extract2, 1) %>%
                  sapply(equals, "magerman.detect.legal.form") %>%
                  not())
      }
      if (return.x.before.common.words.removal) {
          magerman.procedures %<>%
              inset2(
                  sapply(., extract2, 1) %>%
                      sapply(equals, "magerman.remove.legal.form.and.clean") %>%
                      which(),
                  list("magerman.remove.legal.form.and.clean", return.x.cols.all = TRUE)
              )
      }
      if (return.x.cols.all) {
          magerman.procedures %<>%
              inset2(1, c(as.list(extract2(., 1)), return.x.cols.all = TRUE))
      }
      harmonize(x, magerman.procedures, ...)
  }
#+END_SRC

Test:
#+BEGIN_SRC R :tangle no
  ## Test with return magerman.procedures in harmonize_magerman
  harmonize_magerman()
  harmonize_magerman(detect.legal.form = TRUE)
  harmonize_magerman(return.x.before.common.words.removal = TRUE)
  harmonize_magerman(return.x.cols.all = TRUE)
  
   ## Test
  data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                    , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
                    , "MSLab Co."
                    , "MSLaeb Comp."
                    , "MSLab Comp. Ltd."
                    , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") %>% rep(200)
           , foo = "I love coffee" ) %>% 
      harmonize_magerman(progress.min = 50
                      , detect.legal.form = TRUE)
#+END_SRC

** Tests

#+BEGIN_SRC R :tangle no
  c("SGS-THOMSON MICROELECTRONICS"
  , "S.G.S. THOMSON MICROELECTRONICS S.R.L."
  , "S.G.S. THOMSON MICROELECTRONICS, S.R.L."
  , "S.G.S.-THOMSON MICROELECTRONICS S.R.L."
  , "SGS - THOMSON MICROELECTRONICS S.A."
  , "SGS - THOMSON MICROELECTRONICS S.R.L."
  , "SGS - THOMSON MICROELECTRONICS, INC."
  , "SGS - THOMSON MICROELECTRONICS, S.R.L."
  , "SGS THOMSON MICROELECTRONICS S.A."
  , "SGS THOMSON MICROELECTRONICS S.R.L."
  , "SGS THOMSON MICROELECTRONICS SA"
  , "SGS THOMSON MICROELECTRONICS SRL"
  , "SGS THOMSON MICROELECTRONICS, INC."
  , "SGS THOMSON MICROELECTRONICS, S.A."
  , "SGS- THOMSON MICROELECTRONICS, S.A."
  , "SGS THOMSON MICROELECTRONICS, S.R.L."
  , "SGS- THOMSON MICROELECTRONICS<BR>(PTE) LTD."
  , "SGS THOMSON-MICROELECTRONICS SA"
  , "SGS-THOMSON MICROELECTRONIC S.A."
  , "SGS-THOMSON MICROELECTRONICS"
  , "SGS-THOMSON MICROELECTRONICS GMBH"
  , "SGS-THOMSON MICROELECTRONICS INC."
  , "SGS-THOMSON MICROELECTRONICS LIMITED"
  , "SGS-THOMSON MICROELECTRONICS LTD."
  , "SGS-THOMSON MICROELECTRONICS PTE LTD"
  , "SGS-THOMSON MICROELECTRONICS PTE LTD."
  , "SGS-THOMSON MICROELECTRONICS PTE. LIMITED"
  , "SGS-THOMSON MICROELECTRONICS PTE. LTD."
  , "SGS-THOMSON MICROELECTRONICS S. R. L."
  , "SGS-THOMSON MICROELECTRONICS S.A"
  , "SGS-THOMSON MICROELECTRONICS S.A."
  , "SGS-THOMSON MICROELECTRONICS S.P.A."
  , "SGS-THOMSON MICROELECTRONICS S.R. L."
  , "SGS-THOMSON MICROELECTRONICS S.R.L"
  , "SGS-THOMSON MICROELECTRONICS S.R.L."
  , "SGS--THOMSON MICROELECTRONICS S.R.L."
  , "SGS-THOMSON MICROELECTRONICS SA"
  , "SGS-THOMSON MICROELECTRONICS SPA"
  , "SGS-THOMSON MICROELECTRONICS SRL"
  , "SGS-THOMSON MICROELECTRONICS SRL."
  , "SGS-THOMSON MICROELECTRONICS, GMBH"
  , "SGS-THOMSON MICROELECTRONICS, INC"
  , "SGS-THOMSON MICROELECTRONICS, INC."
  , "SGS-THOMSON MICROELECTRONICS, LTD."
  , "SGS-THOMSON MICROELECTRONICS, PTE LTD."
  , "SGS-THOMSON MICROELECTRONICS, S.A."
  , "SGS-THOMSON MICROELECTRONICS, S.R.L."
  , "SGS-THOMSON MICROELECTRONICS, S.RL"
  , "SGS-THOMSON MICROELECTRONICS, SA"
  , "SGS-THOMSON MICROELECTRONICS, SA."
  , "SGS-THOMSON MICROELECTRONICS, SRL"
  , "SGS-THOMSON MICROELECTRONICS,S.R.L.") %>%
    harmonize.magerman
  
  
  
  c("E.I. DU PONT DE NEMOURS & COMPANY"
  , "E I DU PONT DE NEMOURS AND COMPANY"
  , "E I DUPONT DE NEMOURS AND COMPANY"
  , "E I. DU PONT DE NEMOURS AND COMPANY"
  , "E. .I DU PONT DE NEMOURS AND COMPANY"
  , "E. I DU PONT DE NEMOURS AND COMPANY"
  , "E. I DU PONT DE NEMOURS AND COMPANY."
  , "E. I. DU PONT DE NEMOURS"
  , "E. I. DU PONT DE NEMOURS & CO"
  , "E. I. DU PONT DE NEMOURS & CO."
  , "E. I. DU PONT DE NEMOURS & CO. (INC.)"
  , "E. I. DU PONT DE NEMOURS & CO., INC."
  , "E. I. DU PONT DE NEMOURS & COMPANY"
  , "E. I. DU PONT DE NEMOURS AND CO."
  , "E. I. DU PONT DE NEMOURS AND CO., INC."
  , "E. I. DU PONT DE NEMOURS AND COMPANY"
  , "E. I. DU PONT DE NEMOURS AND COMPANY, INC."
  , "E. I. DU PONT DE NEMOURS AND COMPANY."
  , "E. I. DU PONT DE NEMOURS CO."
  , "E. I. DU PONT DE NEMOURS CO., INC."
  , "E. I. DU PONT DE NEMOURS COMPANY"
  , "E. I. DU PONT DE NEMOURS COMPANY, INC."
  , "E. I. DUPONT DE NEMOURS & CO."
  , "E. I. DUPONT DE NEMOURS & COMPANY"
  , "E. I. DUPONT DE NEMOURS AND COMPANY"
  , "E. I. DUPONT DENEMOURS & COMPANY"
  , "E. I. DUPONT DENEMOURS AND COMPANY"
  , "E. I.DU PONT DE NEMOURS AND COMPANY"
  , "E.I . DU PONT DE NEMOURS AND COMPANY"
  , "E.I. DU PONT DE NEMOURS & CO."
  , "E.I. DU PONT DE NEMOURS & CO., INC."
  , "E.I. DU PONT DE NEMOURS & COMPANY"
  , "E.I. DU PONT DE NEMOURS & COMPANY, INC"
  , "E.I. DU PONT DE NEMOURS &AMP; CO. (INC.)"
  , "E.I. DU PONT DE NEMOURS &AMP; COMPANY"
  , "E.I. DU PONT DE NEMOURS &AMP; COMPANY INC."
  , "E.I. DU PONT DE NEMOURS &AMP;"
  , "E.I. DU PONT DE NEMOURS &AMP; COMPAY, INC."
  , "E.I. DU PONT DE NEMOURS AND COMPANY"
  , "E.I. DU PONT DE NEMOURS<BR>AND CO."
  , "E.I. DU PONT DE NEMOURS<BR>AND COMPANY"
  , "E.I. DUPONT DE NEMOURS"
  , "E.I. DUPONT DE NEMOURS & CO."
  , "E.I. DUPONT DE NEMOURS & COMPANY"
  , "E.I. DUPONT DE NEMOURS AND CO."
  , "E.I. DUPONT DE NEMOURS AND COMPANY"
  , "E.I. DUPONT DE NEMOURS AND COMPANY, INC."
  , "E.I. DUPONT DENEMOURS & COMPANY"
  , "E.I. DUPONT DENEMOURS AND COMPANY"
  , "E.I.DU PONT DE NEMOURS AND COMPANY"
  , "EI DU PONT DE NEMOURS AND COMPANY"
  , "EI DUPONT DE NEMOURS AND COMPANY") %>%
    harmonize.magerman
  
  c("Chip &AMP; Dayle (lala) [0x2345] {abs} ops html <br>"
  , "&AMP;&OACUTE;&SECT; 02937lkjfas;ldjf  &UACUTE;&#8902;&BULL; sdlfkjhhhh ;laskdjf&EXCL;"
  , "&AMP;&OACUTE;&SECT; {UMLAUT OVER (E)} sdlfkjhhhh ;laskdjf&EXCL;"
  , "ŠŒŽšœžŸ¥µÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýÿ"
  , "LK \tD©𝍎 ၍\tF:'\";092834!@#$%^&*()_+-\n\t"
  , "  a   string with   many      douple    spaces      "
  , "\"\" Merry  \"Cristmas\" Love\"\""
  , "\"\"Merry  \"Cristmas\" Love\"\""
  , "MSLab Co.++"
  , "A sentence with .irregular punctuation ,like commas , and periods ."
  , "MSlab ,INC. ,LTD"
  , "CHEMICALS SYSTEMEN MSlab Ltd."
  , "MSLab CÖ.") %>%
    harmonize.magerman
#+END_SRC


* Cockburn, et al. (2009) - Harmonization Procedure

** Utils
*** cockburn.combabbrev
:PROPERTIES:
:ID:       org:z3bhq6914gi0
:END:

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Collapses single character sequences
  ##'
  ##' @param x Object (table or vector)
  ##' @param wrap.in.spaces Whether to wrap strings in spaces before processing because the algorithm assumes assumes that each string begins and ends with space. Default is TRUE.
  ##' @inheritDotParams harmonize.x
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @import magrittr
  ##' @export 
  cockburn.combabbrev <- function(x
                                , wrap.in.spaces = TRUE
                                , ...) {
    x.vector <-
      harmonize.x(x, ...) %>%
      ## wrap in spaces
      {if(wrap.in.spaces) paste0(" ", ., " ") else .}
    ## collapse
    sapply(x.vector, function(org.name) {
      reg  <- gregexpr("(?=\\s\\w(\\s+)\\w\\s)", org.name, perl = TRUE)
      ## check if there are matches
      if(reg[[1]][1] != -1) {
        char <- strsplit(org.name, "", fixed = TRUE) %>% unlist
        pos <- mapply(function(from, length.out) seq(from, length.out = length.out)
                    , from = attr(reg[[1]],"capture.start")
                    , length.out = attr(reg[[1]],"capture.length")
                    , SIMPLIFY = FALSE) %>% unlist
        char %>% inset(pos, "") %>% paste(collapse = "")
      } else org.name
    }) %>% harmonize.x(x, ., ...)
  }

  ## ## test
  ## c(" A B Comp"
  ## , " A  B Comp a"
  ## , " I B M "
  ## , "I B M bla-bla n bla C O") %>%
  ##   cockburn.combabbrev

  ## data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
  ##                   , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
  ##                   , " M S Lab Co."
  ##                   , "MSLaeb Comp."
  ##                   , "MSLab Comp. Ltd."
  ##                   , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") %>% rep(20)
  ##          , foo = "I love coffee" ) %>%
  ##   cockburn.combabbrev


  ## c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
  ## , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
  ## , "MSLab Co."
  ## , "MSLaeb Comp."
  ## , "MSLab Comp. Ltd."
  ## , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") %>%
  ##   cockburn.combabbrev
#+END_SRC

** Standartization
*** Derwent
:PROPERTIES:
:ID:       org:y5ghq6914gi0
:END:

Implementation of derwent_standardisation_BHH.do from https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded

"This is practically code for the Derwent standard. However, with these commands the order they are executed is key and has been changed. The following is a list of other changes:

1) Processing for und and et removed.
2) LIMITED -> LTD added by BHH
3) various US changes by BHH
4) space before and after added by BHH"


#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Performs Derwent standardization of organizational names
  ##'
  ##' It is a version from Cockburn, I. M., A. Agrawal, J. Bessen, J. H. S. Graham, B. H. Hall, and M. MacGarvie (2009), The NBER Patent Citations Datafile Update. It differs from original dervert standartization
  ##' @param x object
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.replace.derwent <- function(x
                             , ...) {
    replace_patterns(x
                    , patterns = cockburn.patterns.derwent
                    , patterns.mode = "first"
                    , ...)
  }
#+END_SRC

**** Derwent Standartization Table
#+call: make-rds-patterns-table(data = cockburn.patterns.derwent, data.name = "cockburn.patterns.derwent"))
#+NAME: cockburn.patterns.derwent
| pattern                                                                        | replacement          |
|--------------------------------------------------------------------------------+----------------------|
| ' A B '                                                                        | ' AB '               |
| ' A CALIFORNIA CORP '                                                          | ' CORP '             |
| ' A DELAWARE CORP '                                                            | ' CORP '             |
| ' AKTIEBOLAGET '                                                               | ' AB '               |
| ' AKTIEBOLAG '                                                                 | ' AB '               |
| ' ACADEMY '                                                                    | ' ACAD '             |
| ' ACTIEN GESELLSCHAFT '                                                        | ' AG '               |
| ' ACTIENGESELLSCHAFT '                                                         | ' AG '               |
| ' AKTIEN GESELLSCHAFT '                                                        | ' AG '               |
| ' AKTIENGESELLSCHAFT '                                                         | ' AG '               |
| ' AGRICOLAS '                                                                  | ' AGRIC '            |
| ' AGRICOLA '                                                                   | ' AGRIC '            |
| ' AGRICOLES '                                                                  | ' AGRIC '            |
| ' AGRICOLE '                                                                   | ' AGRIC '            |
| ' AGRICOLI '                                                                   | ' AGRIC '            |
| ' AGRICOLTURE '                                                                | ' AGRIC '            |
| ' AGRICULTURA '                                                                | ' AGRIC '            |
| ' AGRICULTURAL '                                                               | ' AGRIC '            |
| ' AGRICULTURE '                                                                | ' AGRIC '            |
| ' AKADEMIA '                                                                   | ' AKAD '             |
| ' AKADEMIEI '                                                                  | ' AKAD '             |
| ' AKADEMIE '                                                                   | ' AKAD '             |
| ' AKADEMII '                                                                   | ' AKAD '             |
| ' AKADEMIJA '                                                                  | ' AKAD '             |
| ' AKADEMIYA '                                                                  | ' AKAD '             |
| ' AKADEMIYAKH '                                                                | ' AKAD '             |
| ' AKADEMIYAM '                                                                 | ' AKAD '             |
| ' AKADEMIYAMI '                                                                | ' AKAD '             |
| ' AKADEMIYU '                                                                  | ' AKAD '             |
| ' AKADEMI '                                                                    | ' AKAD '             |
| ' ALLGEMEINER '                                                                | ' ALLG '             |
| ' ALLGEMEINE '                                                                 | ' ALLG '             |
| ' ANTREPRIZA '                                                                 | ' ANTR '             |
| ' APARARII '                                                                   | ' APAR '             |
| ' APARATELOR '                                                                 | ' APAR '             |
| ' APPARATEBAU '                                                                | ' APP '              |
| ' APPARATUS '                                                                  | ' APP '              |
| ' APPARECHHI '                                                                 | ' APP '              |
| ' APPAREILLAGES '                                                              | ' APP '              |
| ' APPAREILLAGE '                                                               | ' APP '              |
| ' APPAREILS '                                                                  | ' APP '              |
| ' APPAREIL '                                                                   | ' APP '              |
| ' APARATE '                                                                    | ' APAR '             |
| ' APPARATE '                                                                   | ' APP '              |
| ' APPLICATIONS '                                                               | ' APPL '             |
| ' APPLICATION '                                                                | ' APPL '             |
| ' APPLICAZIONE '                                                               | ' APPL '             |
| ' APPLICAZIONI '                                                               | ' APPL '             |
| ' ANPARTSSELSKABET '                                                           | ' APS '              |
| ' ANPARTSSELSKAB '                                                             | ' APS '              |
| ' A/S '                                                                        | ' AS '               |
| ' AKTIESELSKABET '                                                             | ' AS '               |
| ' AKTIESELSKAB '                                                               | ' AS '               |
| ' ASSOCIACAO '                                                                 | ' ASSOC '            |
| ' ASSOCIATED '                                                                 | ' ASSOC '            |
| ' ASSOCIATES '                                                                 | ' ASSOCIATES '       |
| ' ASSOCIATE '                                                                  | ' ASSOCIATES '       |
| ' ASSOCIATION '                                                                | ' ASSOC '            |
| ' BETEILIGUNGSGESELLSCHAFT MBH '                                               | ' BET GMBH '         |
| ' BETEILIGUNGS GESELLSCHAFT MIT '                                              | ' BET GMBH '         |
| ' BETEILIGUNGSGESELLSCHAFT '                                                   | ' BET GES '          |
| ' BESCHRANKTER HAFTUNG '                                                       | ' BET GMBH '         |
| ' BROEDERNA '                                                                  | ' BRDR '             |
| ' BROEDRENE '                                                                  | ' BRDR '             |
| ' BRODERNA '                                                                   | ' BRDR '             |
| ' BRODRENE '                                                                   | ' BRDR '             |
| ' BROTHERS '                                                                   | ' BROS '             |
| ' BESLOTEN VENNOOTSCHAP MET '                                                  | ' BV '               |
| ' BESLOTEN VENNOOTSCHAP '                                                      | ' BV '               |
| ' BEPERKTE AANSPRAKELIJKHEID '                                                 | ' BV '               |
| ' CLOSE CORPORATION '                                                          | ' CC '               |
| ' CENTER '                                                                     | ' CENT '             |
| ' CENTRAAL '                                                                   | ' CENT '             |
| ' CENTRALA '                                                                   | ' CENT '             |
| ' CENTRALES '                                                                  | ' CENT '             |
| ' CENTRALE '                                                                   | ' CENT '             |
| ' CENTRAL '                                                                    | ' CENT '             |
| ' CENTRAUX '                                                                   | ' CENT '             |
| ' CENTRE '                                                                     | ' CENT '             |
| ' CENTRO '                                                                     | ' CENT '             |
| ' CENTRUL '                                                                    | ' CENT '             |
| ' CENTRUM '                                                                    | ' CENT '             |
| ' CERCETARE '                                                                  | ' CERC '             |
| ' CERCETARI '                                                                  | ' CERC '             |
| ' CHEMICALS '                                                                  | ' CHEM '             |
| ' CHEMICAL '                                                                   | ' CHEM '             |
| ' CHEMICKEJ '                                                                  | ' CHEM '             |
| ' CHEMICKE '                                                                   | ' CHEM '             |
| ' CHEMICKYCH '                                                                 | ' CHEM '             |
| ' CHEMICKY '                                                                   | ' CHEM '             |
| ' CHEMICZNE '                                                                  | ' CHEM '             |
| ' CHEMICZNY '                                                                  | ' CHEM '             |
| ' CHEMIE '                                                                     | ' CHEM '             |
| ' CHEMII '                                                                     | ' CHEM '             |
| ' CHEMISCHE '                                                                  | ' CHEM '             |
| ' CHEMISCH '                                                                   | ' CHEM '             |
| ' CHEMISKEJ '                                                                  | ' CHEM '             |
| ' CHEMISTRY '                                                                  | ' CHEM '             |
| ' CHIMICA '                                                                    | ' CHIM '             |
| ' CHIMICE '                                                                    | ' CHIM '             |
| ' CHIMICI '                                                                    | ' CHIM '             |
| ' CHIMICO '                                                                    | ' CHIM '             |
| ' CHIMIC '                                                                     | ' CHIM '             |
| ' CHIMIEI '                                                                    | ' CHIM '             |
| ' CHIMIE '                                                                     | ' CHIM '             |
| ' CHIMIESKOJ '                                                                 | ' CHIM '             |
| ' CHIMII '                                                                     | ' CHIM '             |
| ' CHIMIKO '                                                                    | ' CHIM '             |
| ' CHIMIQUES '                                                                  | ' CHIM '             |
| ' CHIMIQUE '                                                                   | ' CHIM '             |
| ' CHIMIYAKH '                                                                  | ' CHIM '             |
| ' CHIMIYAMI '                                                                  | ' CHIM '             |
| ' CHIMIYAM '                                                                   | ' CHIM '             |
| ' CHIMIYA '                                                                    | ' CHIM '             |
| ' CHIMIYU '                                                                    | ' CHIM '             |
| ' COMPAGNIE FRANCAISE '                                                        | ' CIE FR '           |
| ' COMPAGNIE GENERALE '                                                         | ' CIE GEN '          |
| ' COMPAGNIE INDUSTRIALE '                                                      | ' CIE IND '          |
| ' COMPAGNIE INDUSTRIELLE '                                                     | ' CIE IND '          |
| ' COMPAGNIE INDUSTRIELLES '                                                    | ' CIE IND '          |
| ' COMPAGNIE INTERNATIONALE '                                                   | ' CIE INT '          |
| ' COMPAGNIE NATIONALE '                                                        | ' CIE NAT '          |
| ' COMPAGNIE PARISIENNE '                                                       | ' CIE PARIS '        |
| ' COMPAGNIE PARISIENN '                                                        | ' CIE PARIS '        |
| ' COMPAGNIE PARISIEN '                                                         | ' CIE PARIS '        |
| ' COMPANIES '                                                                  | ' CO '               |
| ' COMPAGNIA '                                                                  | ' CIA '              |
| ' COMPANHIA '                                                                  | ' CIA '              |
| ' COMPAGNIE '                                                                  | ' CIE '              |
| ' COMPANY '                                                                    | ' CO '               |
| ' COMBINATUL '                                                                 | ' COMB '             |
| ' COMMERCIALE '                                                                | ' COMML '            |
| ' COMMERCIAL '                                                                 | ' COMML '            |
| ' CONSOLIDATED '                                                               | ' CONSOL '           |
| ' CONSTRUCCIONES '                                                             | ' CONSTR '           |
| ' CONSTRUCCIONE '                                                              | ' CONSTR '           |
| ' CONSTRUCCION '                                                               | ' CONSTR '           |
| ' CONSTRUCTIE '                                                                | ' CONSTR '           |
| ' CONSTRUCTII '                                                                | ' CONSTR '           |
| ' CONSTRUCTIILOR '                                                             | ' CONSTR '           |
| ' CONSTRUCTIONS '                                                              | ' CONSTR '           |
| ' CONSTRUCTION '                                                               | ' CONSTR '           |
| ' CONSTRUCTORTUL '                                                             | ' CONSTR '           |
| ' CONSTRUCTORUL '                                                              | ' CONSTR '           |
| ' CONSTRUCTOR '                                                                | ' CONSTR '           |
| ' CO OPERATIVES '                                                              | ' COOP '             |
| ' CO OPERATIVE '                                                               | ' COOP '             |
| ' COOPERATIEVE '                                                               | ' COOP '             |
| ' COOPERATIVA '                                                                | ' COOP '             |
| ' COOPERATIVES '                                                               | ' COOP '             |
| ' COOPERATIVE '                                                                | ' COOP '             |
| ' INCORPORATED '                                                               | ' INC '              |
| ' INCORPORATION '                                                              | ' INC '              |
| ' CORPORATE '                                                                  | ' CORP '             |
| ' CORPORATION OF AMERICA '                                                     | ' CORP '             |
| ' CORPORATION '                                                                | ' CORP '             |
| ' CORPORASTION '                                                               | ' CORP '             |
| ' CORPORATIOON '                                                               | ' CORP '             |
| ' COSTRUZIONI '                                                                | ' COSTR '            |
| ' DEUTSCHEN '                                                                  | ' DDR '              |
| ' DEUTSCHE '                                                                   | ' DDR '              |
| ' DEMOKRATISCHEN REPUBLIK '                                                    | ' DDR '              |
| ' DEMOKRATISCHE REPUBLIK '                                                     | ' DDR '              |
| ' DEPARTEMENT '                                                                | ' DEPT '             |
| ' DEPARTMENT '                                                                 | ' DEPT '             |
| ' DEUTSCHES '                                                                  | ' DEUT '             |
| ' DEUTSCHEN '                                                                  | ' DEUT '             |
| ' DEUTSCHER '                                                                  | ' DEUT '             |
| ' DEUTSCHLAND '                                                                | ' DEUT '             |
| ' DEUTSCHE '                                                                   | ' DEUT '             |
| ' DEUTSCH '                                                                    | ' DEUT '             |
| ' DEVELOPMENTS '                                                               | ' DEV '              |
| ' DEVELOPMENT '                                                                | ' DEV '              |
| ' DEVELOPPEMENTS '                                                             | ' DEV '              |
| ' DEVELOPPEMENT '                                                              | ' DEV '              |
| ' DEVELOP '                                                                    | ' DEV '              |
| ' DIVISIONE '                                                                  | ' DIV '              |
| ' DIVISION '                                                                   | ' DIV '              |
| ' ENGINEERING '                                                                | ' ENG '              |
| ' EQUIPEMENTS '                                                                | ' EQUIP '            |
| ' EQUIPEMENT '                                                                 | ' EQUIP '            |
| ' EQUIPMENTS '                                                                 | ' EQUIP '            |
| ' EQUIPMENT '                                                                  | ' EQUIP '            |
| ' ESTABLISHMENTS '                                                             | ' ESTAB '            |
| ' ESTABLISHMENT '                                                              | ' ESTAB '            |
| ' ESTABLISSEMENTS '                                                            | ' ESTAB '            |
| ' ESTABLISSEMENT '                                                             | ' ESTAB '            |
| ' ETABLISSEMENTS '                                                             | ' ETAB '             |
| ' ETABLISSEMENT '                                                              | ' ETAB '             |
| ' ETABS '                                                                      | ' ETAB '             |
| ' ETS '                                                                        | ' ETAB '             |
| ' ETUDES '                                                                     | ' ETUD '             |
| ' ETUDE '                                                                      | ' ETUD '             |
| ' EUROPAEISCHEN '                                                              | ' EURO '             |
| ' EUROPAEISCHES '                                                              | ' EURO '             |
| ' EUROPAEISCHE '                                                               | ' EURO '             |
| ' EUROPAISCHEN '                                                               | ' EURO '             |
| ' EUROPAISCHES '                                                               | ' EURO '             |
| ' EUROPAISCHE '                                                                | ' EURO '             |
| ' EUROPEAN '                                                                   | ' EURO '             |
| ' EUROPEENNE '                                                                 | ' EURO '             |
| ' EUROPEEN '                                                                   | ' EURO '             |
| ' EUROPEA '                                                                    | ' EURO '             |
| ' EUROPE '                                                                     | ' EURO '             |
| ' EINGETRAGENER VEREIN '                                                       | ' EV '               |
| ' EXPLOATERINGS '                                                              | ' EXPL '             |
| ' EXPLOATERING '                                                               | ' EXPL '             |
| ' EXPLOITATIE '                                                                | ' EXPL '             |
| ' EXPLOITATIONS '                                                              | ' EXPL '             |
| ' EXPLOITATION '                                                               | ' EXPL '             |
| ' FIRMA '                                                                      | ' FA '               |
| ' FABBRICAZIONI '                                                              | ' FAB '              |
| ' FABBRICHE '                                                                  | ' FAB '              |
| ' FABRICATIONS '                                                               | ' FAB '              |
| ' FABRICATION '                                                                | ' FAB '              |
| ' FABBRICA '                                                                   | ' FAB '              |
| ' FABRICA '                                                                    | ' FAB '              |
| ' FABRIEKEN '                                                                  | ' FAB '              |
| ' FABRIEK '                                                                    | ' FAB '              |
| ' FABRIKER '                                                                   | ' FAB '              |
| ' FABRIK '                                                                     | ' FAB '              |
| ' FABRIQUES '                                                                  | ' FAB '              |
| ' FABRIQUE '                                                                   | ' FAB '              |
| ' FABRIZIO '                                                                   | ' FAB '              |
| ' FABRYKA '                                                                    | ' FAB '              |
| ' FARMACEUTICA '                                                               | ' FARM '             |
| ' FARMACEUTICE '                                                               | ' FARM '             |
| ' FARMACEUTICHE '                                                              | ' FARM '             |
| ' FARMACEUTICI '                                                               | ' FARM '             |
| ' FARMACEUTICOS '                                                              | ' FARM '             |
| ' FARMACEUTICO '                                                               | ' FARM '             |
| ' FARMACEUTISK '                                                               | ' FARM '             |
| ' FARMACEVTSKIH '                                                              | ' FARM '             |
| ' FARMACIE '                                                                   | ' FARM '             |
| ' FONDATION '                                                                  | ' FOND '             |
| ' FONDAZIONE '                                                                 | ' FOND '             |
| ' FOUNDATIONS '                                                                | ' FOUND '            |
| ' FOUNDATION '                                                                 | ' FOUND '            |
| ' FRANCAISE '                                                                  | ' FR '               |
| ' FRANCAIS '                                                                   | ' FR '               |
| ' F LLI '                                                                      | ' FRAT '             |
| ' FLLI '                                                                       | ' FRAT '             |
| ' FRATELLI '                                                                   | ' FRAT '             |
| ' GEBRODERS '                                                                  | ' GEBR '             |
| ' GEBRODER '                                                                   | ' GEBR '             |
| ' GEBROEDERS '                                                                 | ' GEBR '             |
| ' GEBROEDER '                                                                  | ' GEBR '             |
| ' GEBRUDERS '                                                                  | ' GEBR '             |
| ' GEBRUDER '                                                                   | ' GEBR '             |
| ' GEBRUEDERS '                                                                 | ' GEBR '             |
| ' GEBRUEDER '                                                                  | ' GEBR '             |
| ' GEB '                                                                        | ' GEBR '             |
| ' GENERALA '                                                                   | ' GEN '              |
| ' GENERALES '                                                                  | ' GEN '              |
| ' GENERALE '                                                                   | ' GEN '              |
| ' GENERAL '                                                                    | ' GEN '              |
| ' GENERAUX '                                                                   | ' GEN '              |
| ' GESELLSCHAFT '                                                               | ' GES '              |
| ' GEWERKSCHAFT '                                                               | ' GEW '              |
| ' GAKKO HOJIN '                                                                | ' GH '               |
| ' GAKKO HOUJIN '                                                               | ' GH '               |
| ' GUTEHOFFNUNGSCHUETTE '                                                       | ' GHH '              |
| ' GUTEHOFFNUNGSCHUTTE '                                                        | ' GHH '              |
| ' GOMEI GAISHA '                                                               | ' GK '               |
| ' GOMEI KAISHA '                                                               | ' GK '               |
| ' GOSHI KAISHA '                                                               | ' GK '               |
| ' GOUSHI GAISHA '                                                              | ' GK '               |
| ' GESELLSCHAFT MBH '                                                           | ' GMBH '             |
| ' GESELLSCHAFT MIT BESCHRANKTER HAFTUNG '                                      | ' GMBH '             |
| ' GROUPEMENT '                                                                 | ' GRP '              |
| ' GROUPMENT '                                                                  | ' GRP '              |
| ' HANDELSMAATSCHAPPIJ '                                                        | ' HANDL '            |
| ' HANDELSMIJ '                                                                 | ' HANDL '            |
| ' HANDELS BOLAGET '                                                            | ' HB '               |
| ' HANDELSBOLAGET '                                                             | ' HB '               |
| ' HER MAJESTY THE QUEEN IN RIGHT OF CANADA AS REPRESENTED BY THE MINISTER OF ' | ' CANADA MIN OF '    |
| ' HER MAJESTY THE QUEEN '                                                      | ' UK '               |
| ' INDUSTRIAS '                                                                 | ' IND '              |
| ' INDUSTRIALS '                                                                | ' IND '              |
| ' INDUSTRIAL '                                                                 | ' IND '              |
| ' INDUSTRIALA '                                                                | ' IND '              |
| ' INDUSTRIALE '                                                                | ' IND '              |
| ' INDUSTRIALIZARE '                                                            | ' IND '              |
| ' INDUSTRIALIZAREA '                                                           | ' IND '              |
| ' INDUSTRIALI '                                                                | ' IND '              |
| ' INDUSTRIEELE '                                                               | ' IND '              |
| ' INDUSTRIEI '                                                                 | ' IND '              |
| ' INDUSTRIELS '                                                                | ' IND '              |
| ' INDUSTRIELLES '                                                              | ' IND '              |
| ' INDUSTRIELLE '                                                               | ' IND '              |
| ' INDUSTRIELL '                                                                | ' IND '              |
| ' INDUSTRIEL '                                                                 | ' IND '              |
| ' INDUSTRIER '                                                                 | ' IND '              |
| ' INDUSTRIES '                                                                 | ' IND '              |
| ' INDUSTRII '                                                                  | ' IND '              |
| ' INDUSTRIJ '                                                                  | ' IND '              |
| ' INDUSTRIYAKH '                                                               | ' IND '              |
| ' INDUSTRIYAM '                                                                | ' IND '              |
| ' INDUSTRIYAMI '                                                               | ' IND '              |
| ' INDUSTRIYA '                                                                 | ' IND '              |
| ' INDUSTRIYU '                                                                 | ' IND '              |
| ' INDUSTRIA '                                                                  | ' IND '              |
| ' INDUSTRIE '                                                                  | ' IND '              |
| ' INDUSTRI '                                                                   | ' IND '              |
| ' INDUSTRY '                                                                   | ' IND '              |
| ' INGENIERIA '                                                                 | ' ING '              |
| ' INGENIER '                                                                   | ' ING '              |
| ' INGENIEURS '                                                                 | ' ING '              |
| ' INGENIEURBUERO '                                                             | ' ING '              |
| ' INGENIEURBUREAU '                                                            | ' ING '              |
| ' INGENIEURBURO '                                                              | ' ING '              |
| ' INGENIEURGESELLSCHAFT '                                                      | ' ING '              |
| ' INGENIEURSBUREAU '                                                           | ' ING '              |
| ' INGENIEURTECHNISCHES '                                                       | ' ING '              |
| ' INGENIEURTECHNISCHE '                                                        | ' ING '              |
| ' INGENIEUR '                                                                  | ' ING '              |
| ' INGENIOERFIRMAET '                                                           | ' ING '              |
| ' INGENIORSFIRMAN '                                                            | ' ING '              |
| ' INGENIORSFIRMA '                                                             | ' ING '              |
| ' INGENJORSFIRMA '                                                             | ' ING '              |
| ' INGINERIE '                                                                  | ' ING '              |
| ' INSTITUTE FRANCAISE '                                                        | ' INST FR '          |
| ' INSTITUT FRANCAIS '                                                          | ' INST FR '          |
| ' INSTITUTE NATIONALE '                                                        | ' INST NAT '         |
| ' INSTITUT NATIONAL '                                                          | ' INST NAT '         |
| ' INSTITUTAMI '                                                                | ' INST '             |
| ' INSTITUTAMKH '                                                               | ' INST '             |
| ' INSTITUTAM '                                                                 | ' INST '             |
| ' INSTITUTA '                                                                  | ' INST '             |
| ' INSTITUTES '                                                                 | ' INST '             |
| ' INSTITUTET '                                                                 | ' INST '             |
| ' INSTITUTE '                                                                  | ' INST '             |
| ' INSTITUTOM '                                                                 | ' INST '             |
| ' INSTITUTOV '                                                                 | ' INST '             |
| ' INSTITUTO '                                                                  | ' INST '             |
| ' INSTITUTT '                                                                  | ' INST '             |
| ' INSTITUTUL '                                                                 | ' INST '             |
| ' INSTITUTU '                                                                  | ' INST '             |
| ' INSTITUTY '                                                                  | ' INST '             |
| ' INSTITUT '                                                                   | ' INST '             |
| ' INSTITUUT '                                                                  | ' INST '             |
| ' INSTITZHT '                                                                  | ' INST '             |
| ' INSTYTUT '                                                                   | ' INST '             |
| ' INSINOORITOMISTO '                                                           | ' INSTMSTO '         |
| ' INSTRUMENTS '                                                                | ' INSTR '            |
| ' INSTRUMENTATION '                                                            | ' INSTR '            |
| ' INSTRUMENTE '                                                                | ' INSTR '            |
| ' INSTRUMENT '                                                                 | ' INSTR '            |
| ' INTERNATL '                                                                  | ' INT '              |
| ' INTERNACIONAL '                                                              | ' INT '              |
| ' INTERNATIONAL '                                                              | ' INT '              |
| ' INTERNATIONALEN '                                                            | ' INT '              |
| ' INTERNATIONALE '                                                             | ' INT '              |
| ' INTERNATIONAUX '                                                             | ' INT '              |
| ' INTERNATIONELLA '                                                            | ' INT '              |
| ' INTERNAZIONALE '                                                             | ' INT '              |
| ' INTL '                                                                       | ' INT '              |
| ' INTREPRINDEREA '                                                             | ' INTR '             |
| ' ISTITUTO '                                                                   | ' IST '              |
| ' ITALIANA '                                                                   | ' ITAL '             |
| ' ITALIANE '                                                                   | ' ITAL '             |
| ' ITALIANI '                                                                   | ' ITAL '             |
| ' ITALIANO '                                                                   | ' ITAL '             |
| ' ITALIENNE '                                                                  | ' ITAL '             |
| ' ITALIEN '                                                                    | ' ITAL '             |
| ' ITALIAN '                                                                    | ' ITAL '             |
| ' ITALIA '                                                                     | ' ITAL '             |
| ' ITALI '                                                                      | ' ITAL '             |
| ' ITALO '                                                                      | ' ITAL '             |
| ' ITALY '                                                                      | ' ITAL '             |
| ' JUNIOR '                                                                     | ' JR '               |
| ' KOMMANDIT BOLAG '                                                            | ' KB '               |
| ' KOMMANDIT BOLAGET '                                                          | ' KB '               |
| ' KOMMANDITBOLAGET '                                                           | ' KB '               |
| ' KOMMANDITBOLAG '                                                             | ' KB '               |
| ' KOMMANDIT GESELLSCHAFT '                                                     | ' KG '               |
| ' KOMMANDITGESELLSCHAFT '                                                      | ' KG '               |
| ' KOMMANDIT GESELLSCHAFT AUF AKTIEN '                                          | ' KGAA '             |
| ' KOMMANDITGESELLSCHAFT AUF AKTIEN '                                           | ' KGAA '             |
| ' KUTATO INTEZETE '                                                            | ' KI '               |
| ' KUTATO INTEZET '                                                             | ' KI '               |
| ' KUTATOINTEZETE '                                                             | ' KI '               |
| ' KUTATOINTEZET '                                                              | ' KI '               |
| ' KABUSHIKI GAISHA '                                                           | ' KK '               |
| ' KABUSHIKI KAISHA '                                                           | ' KK '               |
| ' KABUSHIKI GAISYA '                                                           | ' KK '               |
| ' KABUSHIKI KAISYA '                                                           | ' KK '               |
| ' KABUSHIKIGAISHA '                                                            | ' KK '               |
| ' KABUSHIKIKAISHA '                                                            | ' KK '               |
| ' KABUSHIKIGAISYA '                                                            | ' KK '               |
| ' KABUSHIKIKAISYA '                                                            | ' KK '               |
| ' KOMBINATU '                                                                  | ' KOMB '             |
| ' KOMBINATY '                                                                  | ' KOMB '             |
| ' KOMBINAT '                                                                   | ' KOMB '             |
| ' KONINKLIJKE '                                                                | ' KONINK '           |
| ' KONCERNOVY PODNIK '                                                          | ' KP '               |
| ' KUNSTSTOFFTECHNIK '                                                          | ' KUNST '            |
| ' KUNSTSTOFF '                                                                 | ' KUNST '            |
| ' LABORATOIRES '                                                               | ' LAB '              |
| ' LABORATOIRE '                                                                | ' LAB '              |
| ' LABORATOIR '                                                                 | ' LAB '              |
| ' LABORATORIEI '                                                               | ' LAB '              |
| ' LABORATORIES '                                                               | ' LAB '              |
| ' LABORATORII '                                                                | ' LAB '              |
| ' LABORATORIJ '                                                                | ' LAB '              |
| ' LABORATORIOS '                                                               | ' LAB '              |
| ' LABORATORIO '                                                                | ' LAB '              |
| ' LABORATORIUM '                                                               | ' LAB '              |
| ' LABORATORI '                                                                 | ' LAB '              |
| ' LABORATORY '                                                                 | ' LAB '              |
| ' LABORTORI '                                                                  | ' LAB '              |
| ' LAVORAZA '                                                                   | ' LAVORAZ '          |
| ' LAVORAZIONE '                                                                | ' LAVORAZ '          |
| ' LAVORAZIONI '                                                                | ' LAVORAZ '          |
| ' LAVORAZIO '                                                                  | ' LAVORAZ '          |
| ' LAVORAZI '                                                                   | ' LAVORAZ '          |
| ' LIMITED PARTNERSHIP '                                                        | ' LP '               |
| ' LIMITED '                                                                    | ' LTD '              |
| ' LTD LTEE '                                                                   | ' LTD '              |
| ' MASCHINENVERTRIEB '                                                          | ' MASCH '            |
| ' MASCHINENBAUANSTALT '                                                        | ' MASCHBAU '         |
| ' MASCHINENBAU '                                                               | ' MASCHBAU '         |
| ' MASCHINENFABRIEK '                                                           | ' MASCHFAB '         |
| ' MASCHINENFABRIKEN '                                                          | ' MASCHFAB '         |
| ' MASCHINENFABRIK '                                                            | ' MASCHFAB '         |
| ' MASCHINENFAB '                                                               | ' MASCHFAB '         |
| ' MASCHINEN '                                                                  | ' MASCH '            |
| ' MASCHIN '                                                                    | ' MASCH '            |
| ' MIT BESCHRANKTER HAFTUNG '                                                   | ' MBH '              |
| ' MANUFACTURINGS '                                                             | ' MFG '              |
| ' MANUFACTURING '                                                              | ' MFG '              |
| ' MANIFATTURAS '                                                               | ' MFR '              |
| ' MANIFATTURA '                                                                | ' MFR '              |
| ' MANIFATTURE '                                                                | ' MFR '              |
| ' MANUFACTURAS '                                                               | ' MFR '              |
| ' MANUFACTURERS '                                                              | ' MFR '              |
| ' MANUFACTURER '                                                               | ' MFR '              |
| ' MANUFACTURES '                                                               | ' MFR '              |
| ' MANUFACTURE '                                                                | ' MFR '              |
| ' MANUFATURA '                                                                 | ' MFR '              |
| ' MAATSCHAPPIJ '                                                               | ' MIJ '              |
| ' MEDICAL '                                                                    | ' MED '              |
| ' MINISTERE '                                                                  | ' MIN '              |
| ' MINISTERIUM '                                                                | ' MIN '              |
| ' MINISTERO '                                                                  | ' MIN '              |
| ' MINISTERSTVAKH '                                                             | ' MIN '              |
| ' MINISTERSTVAM '                                                              | ' MIN '              |
| ' MINISTERSTVAMI '                                                             | ' MIN '              |
| ' MINISTERSTVA '                                                               | ' MIN '              |
| ' MINISTERSTVE '                                                               | ' MIN '              |
| ' MINISTERSTVO '                                                               | ' MIN '              |
| ' MINISTERSTVOM '                                                              | ' MIN '              |
| ' MINISTERSTVU '                                                               | ' MIN '              |
| ' MINISTERSTV '                                                                | ' MIN '              |
| ' MINISTERSTWO '                                                               | ' MIN '              |
| ' MINISTERUL '                                                                 | ' MIN '              |
| ' MINISTRE '                                                                   | ' MIN '              |
| ' MINISTRY '                                                                   | ' MIN '              |
| ' MINISTER '                                                                   | ' MIN '              |
| ' MAGYAR TUDOMANYOS AKADEMIA '                                                 | ' MTA '              |
| ' NATIONAAL '                                                                  | ' NAT '              |
| ' NATIONAL '                                                                   | ' NAT '              |
| ' NATIONALE '                                                                  | ' NAT '              |
| ' NATIONAUX '                                                                  | ' NAT '              |
| ' NATL '                                                                       | ' NAT '              |
| ' NAZIONALE '                                                                  | ' NAZ '              |
| ' NAZIONALI '                                                                  | ' NAZ '              |
| ' NORDDEUTSCH '                                                                | ' NORDDEUT '         |
| ' NORDDEUTSCHE '                                                               | ' NORDDEUT '         |
| ' NORDDEUTSCHER '                                                              | ' NORDDEUT '         |
| ' NORDDEUTSCHES '                                                              | ' NORDDEUT '         |
| ' NARODNI PODNIK '                                                             | ' NP '               |
| ' NARODNIJ PODNIK '                                                            | ' NP '               |
| ' NARODNY PODNIK '                                                             | ' NP '               |
| ' NAAMLOOSE VENOOTSCHAP '                                                      | ' NV '               |
| ' NAAMLOZE VENNOOTSCHAP '                                                      | ' NV '               |
| ' N V '                                                                        | ' NV '               |
| ' OESTERREICHISCHES '                                                          | ' OESTERR '          |
| ' OESTERREICHISCHE '                                                           | ' OESTERR '          |
| ' OESTERREICHISCH '                                                            | ' OESTERR '          |
| ' OESTERREICH '                                                                | ' OESTERR '          |
| ' OSTERREICHISCHES '                                                           | ' OESTERR '          |
| ' OSTERREICHISCHE '                                                            | ' OESTERR '          |
| ' OSTERREICHISCH '                                                             | ' OESTERR '          |
| ' OSTERREICH '                                                                 | ' OESTERR '          |
| ' OFFICINE MECCANICA '                                                         | ' OFF MEC '          |
| ' OFFICINE MECCANICHE '                                                        | ' OFF MEC '          |
| ' OFFICINE NATIONALE '                                                         | ' OFF NAT '          |
| ' OFFENE HANDELSGESELLSCHAFT '                                                 | ' OHG '              |
| ' ONTWIKKELINGSBUREAU '                                                        | ' ONTWIK '           |
| ' ONTWIKKELINGS '                                                              | ' ONTWIK '           |
| ' OBOROVY PODNIK '                                                             | ' OP '               |
| ' ORGANISATIE '                                                                | ' ORG '              |
| ' ORGANISATIONS '                                                              | ' ORG '              |
| ' ORGANISATION '                                                               | ' ORG '              |
| ' ORGANIZATIONS '                                                              | ' ORG '              |
| ' ORGANIZATION '                                                               | ' ORG '              |
| ' ORGANIZZAZIONE '                                                             | ' ORG '              |
| ' OSAKEYHTIO '                                                                 | ' OY '               |
| ' PHARMACEUTICALS '                                                            | ' PHARM '            |
| ' PHARMACEUTICAL '                                                             | ' PHARM '            |
| ' PHARMACEUTICA '                                                              | ' PHARM '            |
| ' PHARMACEUTIQUES '                                                            | ' PHARM '            |
| ' PHARMACEUTIQUE '                                                             | ' PHARM '            |
| ' PHARMAZEUTIKA '                                                              | ' PHARM '            |
| ' PHARMAZEUTISCHEN '                                                           | ' PHARM '            |
| ' PHARMAZEUTISCHE '                                                            | ' PHARM '            |
| ' PHARMAZEUTISCH '                                                             | ' PHARM '            |
| ' PHARMAZIE '                                                                  | ' PHARM '            |
| ' PUBLIC LIMITED COMPANY '                                                     | ' PLC '              |
| ' PRELUCRAREA '                                                                | ' PRELUC '           |
| ' PRELUCRARE '                                                                 | ' PRELUC '           |
| ' PRODOTTI '                                                                   | ' PROD '             |
| ' PRODUCE '                                                                    | ' PROD '             |
| ' PRODUCTS '                                                                   | ' PROD '             |
| ' PRODUCT '                                                                    | ' PROD '             |
| ' PRODUCTAS '                                                                  | ' PROD '             |
| ' PRODUCTA '                                                                   | ' PROD '             |
| ' PRODUCTIE '                                                                  | ' PROD '             |
| ' PRODUCTOS '                                                                  | ' PROD '             |
| ' PRODUCTO '                                                                   | ' PROD '             |
| ' PRODUCTORES '                                                                | ' PROD '             |
| ' PRODUITS '                                                                   | ' PROD '             |
| ' PRODUIT '                                                                    | ' PROD '             |
| ' PRODUKCJI '                                                                  | ' PROD '             |
| ' PRODUKTER '                                                                  | ' PROD '             |
| ' PRODUKTE '                                                                   | ' PROD '             |
| ' PRODUKT '                                                                    | ' PROD '             |
| ' PRODUSE '                                                                    | ' PROD '             |
| ' PRODUTOS '                                                                   | ' PROD '             |
| ' PRODUIT CHIMIQUES '                                                          | ' PROD CHIM '        |
| ' PRODUIT CHIMIQUE '                                                           | ' PROD CHIM '        |
| ' PRODUCTIONS '                                                                | ' PRODN '            |
| ' PRODUCTION '                                                                 | ' PRODN '            |
| ' PRODUKTIONS '                                                                | ' PRODN '            |
| ' PRODUKTION '                                                                 | ' PRODN '            |
| ' PRODUZIONI '                                                                 | ' PRODN '            |
| ' PROIECTARE '                                                                 | ' PROI '             |
| ' PROIECTARI '                                                                 | ' PROI '             |
| ' PRZEDSIEBIOSTWO '                                                            | ' PRZEDSIEB '        |
| ' PRZEMYSLU '                                                                  | ' PRZEYM '           |
| ' PROPRIETARY '                                                                | ' PTY '              |
| ' PERSONENVENNOOTSCHAP MET '                                                   | ' PVBA '             |
| ' BEPERKTE AANSPRAKELIJKHEID '                                                 | ' PVBA '             |
| ' REALISATIONS '                                                               | ' REAL '             |
| ' REALISATION '                                                                | ' REAL '             |
| ' RECHERCHES '                                                                 | ' RECH '             |
| ' RECHERCHE '                                                                  | ' RECH '             |
| ' RECHERCHES ET DEVELOPMENTS '                                                 | ' RECH & DEV '       |
| ' RECHERCHE ET DEVELOPMENT '                                                   | ' RECH & DEV '       |
| ' RECHERCHES ET DEVELOPPEMENTS '                                               | ' RECH & DEV '       |
| ' RECHERCHE ET DEVELOPPEMENT '                                                 | ' RECH & DEV '       |
| ' RESEARCH & DEVELOPMENT '                                                     | ' RES & DEV '        |
| ' RESEARCH AND DEVELOPMENT '                                                   | ' RES & DEV '        |
| ' RESEARCH '                                                                   | ' RES '              |
| ' RIJKSUNIVERSITEIT '                                                          | ' RIJKSUNIV '        |
| ' SECRETATY '                                                                  | ' SECRETARY '        |
| ' SECRETRY '                                                                   | ' SECRETARY '        |
| ' SECREATRY '                                                                  | ' SECRETARY '        |
| ' SOCIEDAD ANONIMA '                                                           | ' SA '               |
| ' SOCIETE ANONYME DITE '                                                       | ' SA '               |
| ' SOCIETE ANONYME '                                                            | ' SA '               |
| ' SOCIETE A RESPONSABILITE LIMITEE '                                           | ' SARL '             |
| ' SOCIETE A RESPONSIBILITE LIMITEE '                                           | ' SARL '             |
| ' SOCIETA IN ACCOMANDITA SEMPLICE '                                            | ' SAS '              |
| ' SCHWEIZERISCHES '                                                            | ' SCHWEIZ '          |
| ' SCHWEIZERISCHER '                                                            | ' SCHWEIZ '          |
| ' SCHWEIZERISCHE '                                                             | ' SCHWEIZ '          |
| ' SCHWEIZERISCH '                                                              | ' SCHWEIZ '          |
| ' SCHWEIZER '                                                                  | ' SCHWEIZ '          |
| ' SCIENCES '                                                                   | ' SCI '              |
| ' SCIENCE '                                                                    | ' SCI '              |
| ' SCIENTIFICA '                                                                | ' SCI '              |
| ' SCIENTIFIC '                                                                 | ' SCI '              |
| ' SCIENTIFIQUES '                                                              | ' SCI '              |
| ' SCIENTIFIQUE '                                                               | ' SCI '              |
| ' SHADAN HOJIN '                                                               | ' SH '               |
| ' SIDERURGICAS '                                                               | ' SIDER '            |
| ' SIDERURGICA '                                                                | ' SIDER '            |
| ' SIDERURGIC '                                                                 | ' SIDER '            |
| ' SIDERURGIE '                                                                 | ' SIDER '            |
| ' SIDERURGIQUE '                                                               | ' SIDER '            |
| ' SOCIETA IN NOME COLLECTIVO '                                                 | ' SNC '              |
| ' SOCIETE EN NOM COLLECTIF '                                                   | ' SNC '              |
| ' SOCIETE ALSACIENNE '                                                         | ' SOC ALSAC '        |
| ' SOCIETE APPLICATION '                                                        | ' SOC APPL '         |
| ' SOCIETA APPLICAZIONE '                                                       | ' SOC APPL '         |
| ' SOCIETE AUXILIAIRE '                                                         | ' SOC AUX '          |
| ' SOCIETE CHIMIQUE '                                                           | ' SOC CHIM '         |
| ' SOCIEDAD CIVIL '                                                             | ' SOC CIV '          |
| ' SOCIETE CIVILE '                                                             | ' SOC CIV '          |
| ' SOCIETE COMMERCIALES '                                                       | ' SOC COMML '        |
| ' SOCIETE COMMERCIALE '                                                        | ' SOC COMML '        |
| ' SOCIEDAD ESPANOLA '                                                          | ' SOC ESPAN '        |
| ' SOCIETE ETUDES '                                                             | ' SOC ETUD '         |
| ' SOCIETE ETUDE '                                                              | ' SOC ETUD '         |
| ' SOCIETE EXPLOITATION '                                                       | ' SOC EXPL '         |
| ' SOCIETE GENERALE '                                                           | ' SOC GEN '          |
| ' SOCIETE INDUSTRIELLES '                                                      | ' SOC IND '          |
| ' SOCIETE INDUSTRIELLE '                                                       | ' SOC IND '          |
| ' SOCIETE MECANIQUES '                                                         | ' SOC MEC '          |
| ' SOCIETE MECANIQUE '                                                          | ' SOC MEC '          |
| ' SOCIETE NATIONALE '                                                          | ' SOC NAT '          |
| ' SOCIETE NOUVELLE '                                                           | ' SOC NOUV '         |
| ' SOCIETE PARISIENNE '                                                         | ' SOC PARIS '        |
| ' SOCIETE PARISIENN '                                                          | ' SOC PARIS '        |
| ' SOCIETE PARISIEN '                                                           | ' SOC PARIS '        |
| ' SOCIETE TECHNIQUES '                                                         | ' SOC TECH '         |
| ' SOCIETE TECHNIQUE '                                                          | ' SOC TECH '         |
| ' SDRUZENI PODNIKU '                                                           | ' SP '               |
| ' SDRUZENI PODNIK '                                                            | ' SP '               |
| ' SOCIETA PER AZIONI '                                                         | ' SPA '              |
| ' SPITALUL '                                                                   | ' SPITAL '           |
| ' SOCIETE PRIVEE A RESPONSABILITE LIMITEE '                                    | ' SPRL '             |
| ' SOCIEDAD DE RESPONSABILIDAD LIMITADA '                                       | ' SRL '              |
| ' STIINTIFICA '                                                                | ' STIINT '           |
| ' SUDDEUTSCHES '                                                               | ' SUDDEUT '          |
| ' SUDDEUTSCHER '                                                               | ' SUDDEUT '          |
| ' SUDDEUTSCHE '                                                                | ' SUDDEUT '          |
| ' SUDDEUTSCH '                                                                 | ' SUDDEUT '          |
| ' SOCIEDADE '                                                                  | ' SOC '              |
| ' SOCIEDAD '                                                                   | ' SOC '              |
| ' SOCIETA '                                                                    | ' SOC '              |
| ' SOCIETE '                                                                    | ' SOC '              |
| ' SOCIETY '                                                                    | ' SOC '              |
| ' SA DITE '                                                                    | ' SA '               |
| ' TECHNICAL '                                                                  | ' TECH '             |
| ' TECHNICO '                                                                   | ' TECH '             |
| ' TECHNICZNY '                                                                 | ' TECH '             |
| ' TECHNIKAI '                                                                  | ' TECH '             |
| ' TECHNIKI '                                                                   | ' TECH '             |
| ' TECHNIK '                                                                    | ' TECH '             |
| ' TECHNIQUES '                                                                 | ' TECH '             |
| ' TECHNIQUE '                                                                  | ' TECH '             |
| ' TECHNISCHES '                                                                | ' TECH '             |
| ' TECHNISCHE '                                                                 | ' TECH '             |
| ' TECHNISCH '                                                                  | ' TECH '             |
| ' TECHNOLOGY '                                                                 | ' TECH '             |
| ' TECHNOLOGIES '                                                               | ' TECH '             |
| ' TELECOMMUNICATIONS '                                                         | ' TELECOM '          |
| ' TELECOMMUNICACION '                                                          | ' TELECOM '          |
| ' TELECOMMUNICATION '                                                          | ' TELECOM '          |
| ' TELECOMMUNICAZIONI '                                                         | ' TELECOM '          |
| ' TELECOMUNICAZIONI '                                                          | ' TELECOM '          |
| ' TRUSTUL '                                                                    | ' TRUST '            |
| ' UNITED KINGDOM '                                                             | ' UK '               |
| ' SECRETARY OF STATE FOR '                                                     | ' UK SEC FOR '       |
| ' UNIVERSIDADE '                                                               | ' UNIV '             |
| ' UNIVERSIDAD '                                                                | ' UNIV '             |
| ' UNIVERSITA DEGLI STUDI '                                                     | ' UNIV '             |
| ' UNIVERSITAET '                                                               | ' UNIV '             |
| ' UNIVERSITAIRE '                                                              | ' UNIV '             |
| ' UNIVERSITAIR '                                                               | ' UNIV '             |
| ' UNIVERSITATEA '                                                              | ' UNIV '             |
| ' UNIVERSITEIT '                                                               | ' UNIV '             |
| ' UNIVERSITETAMI '                                                             | ' UNIV '             |
| ' UNIVERSITETAM '                                                              | ' UNIV '             |
| ' UNIVERSITETE '                                                               | ' UNIV '             |
| ' UNIVERSITETOM '                                                              | ' UNIV '             |
| ' UNIVERSITETOV '                                                              | ' UNIV '             |
| ' UNIVERSITETU '                                                               | ' UNIV '             |
| ' UNIVERSITETY '                                                               | ' UNIV '             |
| ' UNIVERSITETA '                                                               | ' UNIV '             |
| ' UNIVERSITAT '                                                                | ' UNIV '             |
| ' UNIVERSITET '                                                                | ' UNIV '             |
| ' UNIVERSITE '                                                                 | ' UNIV '             |
| ' UNIVERSITY '                                                                 | ' UNIV '             |
| ' UNIVERSITA '                                                                 | ' UNIV '             |
| ' UNIWERSYTET '                                                                | ' UNIV '             |
| ' UNITED STATES OF AMERICA ADMINISTRATOR '                                     | ' US ADMIN '         |
| ' UNITED STATES OF AMERICA AS REPRESENTED BY THE ADMINISTRATOR '               | ' US ADMIN '         |
| ' UNITED STATES OF AMERICA AS REPRESENTED BY THE DEPT '                        | ' US DEPT '          |
| ' UNITED STATES OF AMERICA AS REPRESENTED BY THE UNITED STATES DEPT '          | ' US DEPT '          |
| ' UNITED STATES OF AMERICAN AS REPRESENTED BY THE UNITED STATES DEPT '         | ' US DEPT '          |
| ' UNITED STATES GOVERNMENT AS REPRESENTED BY THE SECRETARY OF '                | ' US SEC '           |
| ' UNITED STATES OF AMERICA REPRESENTED BY THE SECRETARY '                      | ' US SEC '           |
| ' UNITED STATES OF AMERICA AS REPRESENTED BY THE SECRETARY '                   | ' US SEC '           |
| ' UNITED STATES OF AMERICAS AS REPRESENTED BY THE SECRETARY '                  | ' US SEC '           |
| ' UNITES STATES OF AMERICA AS REPRESENTED BY THE SECRETARY '                   | ' US SEC '           |
| ' UNITED STATES OF AMERICA SECRETARY OF '                                      | ' US SEC '           |
| ' UNITED STATES OF AMERICA '                                                   | ' USA '              |
| ' UNITED STATES '                                                              | ' USA '              |
| ' UTILAJE '                                                                    | ' UTIL '             |
| ' UTILAJ '                                                                     | ' UTIL '             |
| ' UTILISATIONS VOLKSEIGENER BETRIEBE '                                         | ' VEB '              |
| ' UTILISATION VOLKSEIGENER BETRIEBE '                                          | ' VEB '              |
| ' VEB KOMBINAT '                                                               | ' VEB KOMB '         |
| ' VEREENIGDE '                                                                 | ' VER '              |
| ' VEREINIGTES VEREINIGUNG '                                                    | ' VER '              |
| ' VEREINIGTE VEREINIGUNG '                                                     | ' VER '              |
| ' VEREIN '                                                                     | ' VER '              |
| ' VERENIGING '                                                                 | ' VER '              |
| ' VERWALTUNGEN '                                                               | ' VERW '             |
| ' VERWALTUNGS '                                                                | ' VERW '             |
| ' VERWERTUNGS '                                                                | ' VERW '             |
| ' VERWALTUNGSGESELLSCHAFT '                                                    | ' VERW GES '         |
| ' VYZK USTAV '                                                                 | ' VU '               |
| ' VYZKUMNY USTAV '                                                             | ' VU '               |
| ' VYZKUMNYUSTAV '                                                              | ' VU '               |
| ' VEREINIGUNG VOLKSEIGENER BETRIEBUNG '                                        | ' VVB '              |
| ' VYZK VYVOJOVY USTAV '                                                        | ' VVU '              |
| ' VYZKUMNY VYVOJOVY USTAV '                                                    | ' VVU '              |
| ' WERKZEUGMASCHINENKOMBINAT '                                                  | ' WERKZ MASCH KOMB ' |
| ' WERKZEUGMASCHINENFABRIK '                                                    | ' WERKZ MASCHFAB '   |
| ' WESTDEUTSCHES '                                                              | ' WESTDEUT '         |
| ' WESTDEUTSCHER '                                                              | ' WESTDEUT '         |
| ' WESTDEUTSCHE '                                                               | ' WESTDEUT '         |
| ' WESTDEUTSCH '                                                                | ' WESTDEUT '         |
| ' WISSENSCHAFTLICHE(S) '                                                       | ' WISS '             |
| ' WISSENSCHAFTLICHES TECHNISCHES ZENTRUM '                                     | ' WTZ '              |
| ' YUGEN KAISHA '                                                               | ' YG YUGEN GAISHA '  |
| ' YUUGEN GAISHA '                                                              | ' YG YUGEN GAISHA '  |
| ' YUUGEN KAISHA '                                                              | ' YG YUGEN GAISHA '  |
| ' YUUGEN KAISYA '                                                              | ' YG YUGEN GAISHA '  |
| ' ZAVODU '                                                                     | ' ZAVOD '            |
| ' ZAVODY '                                                                     | ' ZAVOD '            |
| ' ZENTRALES '                                                                  | ' ZENT '             |
| ' ZENTRALE '                                                                   | ' ZENT '             |
| ' ZENTRALEN '                                                                  | ' ZENT '             |
| ' ZENTRALNA '                                                                  | ' ZENT '             |
| ' ZENTRUM '                                                                    | ' ZENT '             |
| ' ZENTRALINSTITUT '                                                            | ' ZENT INST '        |
| ' ZENTRALLABORATORIUM '                                                        | ' ZENT LAB '         |
| ' ZAIDAN HOJIN '                                                               | ' ZH '               |
| ' ZAIDAN HOUJIN '                                                              | ' ZH '               |
| ' LIMITED '                                                                    | ' LTD '              |
| ' LIMITADA '                                                                   | ' LTDA '             |
| ' SECRETARY '                                                                  | ' SEC '              |


*** Compustat
:PROPERTIES:
:ID:       org:5lmhq6914gi0
:END:
COMPUSTAT specific standardization for organizational names. Implementation of initial part nameonly_main.do from  https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' COMPUSTAT specific standardization for organizational names
  ##'
  ##' @param x object
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.replace.compustat <- function(x
                               , ...) {
    replace_patterns(x
                    , patterns = cockburn.patterns.compustat
                    , ...)
  }



  ##' COMPUSTAT specific standardization for organizational names. Full name replacements.
  ##'
  ##' @param x object
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.replace.compustat.names <- function(x
                                     , ...) {
    replace_patterns(x
                    , patterns = cockburn.patterns.compustat.names
                    , patterns.type = "trim.exact"
                    , ...)
  }

  ## Test
  ## c("WESTINGHOUSE ELEC  "
  ## , "GRACE (W R) & CO"
  ## , "GRACE (W R) & CO Ltd.") %>% 
  ##   cockburn.compustat.names
#+END_SRC

**** Table: Compustat Standartization
- pattern type :: fixed (see doc for harmonize.replace)

#+call: make-rds-patterns-table(data = cockburn.patterns.compustat, data.name = "cockburn.patterns.compustat")
#+NAME: cockburn.patterns.compustat
| '-ADR'                                         | ' '                    |
| '-ADS'                                         | ' '                    |
| '-CL A '                                       | ' '                    |
| '-CL B '                                       | ' '                    |
| '-CONN '                                       | ' '                    |
| '-CONSOLIDATED '                               | ' '                    |
| '-DEL '                                        | ' '                    |
| '-DE '                                         | ' '                    |
| '-NY SHARES '                                  | ' '                    |
| '-OLD '                                        | ' '                    |
| '-ORD '                                        | ' '                    |
| '-PRE AMEND '                                  | ' '                    |
| '-PRE DIVEST '                                 | ' '                    |
| '-PREAMEND '                                   | ' '                    |
| '-PREDIVEST '                                  | ' '                    |
| '-PROJ '                                       | ' '                    |
| '-PROJECTED '                                  | ' '                    |
| '-PREF '                                       | ' '                    |
| '-PRE FASB '                                   | ' '                    |
| '-PREFASB '                                    | ' '                    |
| '-PRO FORMA '                                  | ' '                    |
| '- PRO FORMA '                                 | ' '                    |
| '-PRO FORMA1 '                                 | ' '                    |
| '-PRO FORMA2 '                                 | ' '                    |
| '-PRO FORMA3 '                                 | ' '                    |
| '-REDH '                                       | ' '                    |
| '-SER A COM '                                  | ' '                    |
| '-SER A '                                      | ' '                    |
| '-SPN '                                        | ' '                    |
| ' ACCPTNCE '                                   | ' ACCEPTANCE '         |
| ' BANCORPORATION '                             | ' BANCORP '            |
| ' BANCORPORTN '                                | ' BANCORP '            |
| ' BANCRP '                                     | ' BANCORP '            |
| ' BNCSHRS '                                    | ' BANCSHARES '         |
| ' BRWG '                                       | ' BREWING '            |
| ' CHEVRONTEXACO '                              | ' CHEVRON TEXACO '     |
| ' CHSE '                                       | ' CHASE '              |
| ' COMMN '                                      | ' COMMUNICATION '      |
| ' COMMUN '                                     | ' COMMUNICATION '      |
| ' COMMUNICATNS '                               | ' COMMUNICATION '      |
| ' COMMUNICATIONS '                             | ' COMMUNICATION '      |
| ' DPT STS '                                    | ' DEPT STORES '        |
| ' DPT '                                        | ' DEPT '               |
| ' ENRGY '                                      | ' ENERGY '             |
| ' FINL '                                       | ' FINANCIAL '          |
| ' FNCL '                                       | ' FINANCIAL '          |
| ' GRP '                                        | ' GROUP '              |
| ' HLDGS '                                      | ' HOLDINGS '           |
| ' HLDG '                                       | ' HOLDING '            |
| ' HLT NTWK '                                   | ' HEALTH NETWORK '     |
| ' HTLS RES '                                   | ' HOTELS & RESORTS '   |
| ' HLTH '                                       | ' HEALTH '             |
| ' INTRTECHNLGY '                               | ' INTERTECHNOLOGY '    |
| ' JPMORGAN '                                   | ' J P MORGAN '         |
| ' MED OPTIC '                                  | ' MEDICAL OPTICS '     |
| ' MINNESOTA MINING AND MANUFACTURING COMPANY ' | ' 3M COMPANY '         |
| ' NAT RES '                                    | ' NATURAL RESOURCES '  |
| ' NETWRKS '                                    | ' NETWORK '            |
| ' PHARMACTICALS '                              | ' PHARM '              |
| ' PHARMACT '                                   | ' PHARM '              |
| ' PPTYS TST '                                  | ' PROPERTIES TRUST '   |
| ' PPTY '                                       | ' PROPERTY '           |
| ' PROPERTY TR '                                | ' PROPERTY TRUST '     |
| ' PAC RAILWY '                                 | ' PACIFIC RAILWAY '    |
| ' SEMICONDTR '                                 | ' SEMICONDUCTOR '      |
| ' SOLU '                                       | ' SOLUTIONS '          |
| ' ST & ALMN '                                  | ' STEEL & ALUMINUM '   |
| ' STD '                                        | ' STANDARD '           |
| ' TECHNOLGS '                                  | ' TECH '               |
| ' TECHNOL '                                    | ' TECH '               |
| ' TRANSPORTATN '                               | ' TRANSPORTATION '     |
| ' ADVERTSG '                                   | ' ADVERTISING '        |
| ' ADVNTGE '                                    | ' ADVANTAGE '          |
| ' AIRLN '                                      | ' AIRLINES '           |
| ' AIRLS '                                      | ' AIRLINES '           |
| ' AM '                                         | ' AMERICA '            |
| ' AMER '                                       | ' AMERICAN '           |
| ' APPLIAN '                                    | ' APPLIANCES '         |
| ' APPLICTN '                                   | ' APPLICATIONS '       |
| ' ARCHTCTS '                                   | ' ARCHITECTS '         |
| ' ASSD '                                       | ' ASSOCIATED '         |
| ' ASSOC '                                      | ' ASSOCIATES '         |
| ' ASSOCS '                                     | ' ASSOCIATES '         |
| ' ATOMC '                                      | ' ATOMIC '             |
| ' BANCSH '                                     | ' BANCSHARES '         |
| ' BANCSHR '                                    | ' BANCSHARES '         |
| ' BCSHS '                                      | ' BANCSHARES '         |
| ' BK '                                         | ' BANK '               |
| ' BLDGS '                                      | ' BUILDINGS '          |
| ' BROADCASTG '                                 | ' BROADCASTING '       |
| ' BTLNG '                                      | ' BOTTLING '           |
| ' CBLVISION '                                  | ' CABLEVISION '        |
| ' CENTRS '                                     | ' CENTERS '            |
| ' CHAMPNSHIP '                                 | ' CHAMPIONSHIP '       |
| ' CMMNCTNS '                                   | ' COMMUNICATIONS '     |
| ' CNVRSION '                                   | ' CONVERSION '         |
| ' COFF '                                       | ' COFFEE '             |
| ' COMM '                                       | ' COMMUNICATIONS '     |
| ' COMMUN '                                     | ' COMMUNICATIONS '     |
| ' COMMUNCTN '                                  | ' COMMUNICATIONS '     |
| ' COMMUNICTNS '                                | ' COMMUNICATIONS '     |
| ' COMP '                                       | ' COMPUTERS '          |
| ' COMPUTR '                                    | ' COMPUTER '           |
| ' CONFERENCG '                                 | ' CONFERENCING '       |
| ' CONSTRN '                                    | ' CONSTR '             |
| ' CONTL '                                      | ' CONTINENTAL '        |
| ' CONTNT '                                     | ' CONTINENTAL '        |
| ' CONTRL '                                     | ' CONTROL '            |
| ' CONTRL '                                     | ' CONTROL '            |
| ' CTR '                                        | ' CENTER '             |
| ' CTRS '                                       | ' CENTERS '            |
| ' CVRGS '                                      | ' COVERINGS '          |
| ' DEV '                                        | ' DEVELOPMENT '        |
| ' DEVL '                                       | ' DEVELOPMENT '        |
| ' DEVLP '                                      | ' DEVELOPMENT '        |
| ' DISTR '                                      | ' DISTRIBUTION '       |
| ' DISTRIBUT '                                  | ' DISTRIBUTION '       |
| ' DISTRIBUTN '                                 | ' DISTRIBUTION '       |
| ' ELCTRNCS '                                   | ' ELECTRONICS '        |
| ' ELECTR '                                     | ' ELECTRONICS '        |
| ' ENGNRD '                                     | ' ENGINEERED '         |
| ' ENMT '                                       | ' ENTERTAINMENT '      |
| ' ENTERTAIN '                                  | ' ENTERTAINMENT '      |
| ' ENTERTNMNT '                                 | ' ENTERTAINMENT '      |
| ' ENTMNT '                                     | ' ENTERTAINMENT '      |
| ' ENTMT '                                      | ' ENTERTAINMENT '      |
| ' ENTRPR '                                     | ' ENTERPRISES '        |
| ' ENTRPRISE '                                  | ' ENTERPRISES '        |
| ' ENTRPRS '                                    | ' ENTERPRISES '        |
| ' ENVIR '                                      | ' ENVIRONMENTAL '      |
| ' ENVIRNMNTL '                                 | ' ENVIRONMENTAL '      |
| ' ENVR '                                       | ' ENVIRONMENTAL '      |
| ' EQUIPMT '                                    | ' EQUIPMENT '          |
| ' EXCHG '                                      | ' EXCHANGE '           |
| ' EXPLOR '                                     | ' EXPLORATION '        |
| ' FNDG '                                       | ' FUNDING '            |
| ' GLD '                                        | ' GOLD '               |
| ' GP '                                         | ' GROUP '              |
| ' HLDS '                                       | ' HLDGS '              |
| ' HLTHCARE '                                   | ' HEALTHCARE '         |
| ' HLTHCR '                                     | ' HEALTHCARE '         |
| ' HOMEMDE '                                    | ' HOMEMADE '           |
| ' HSPTL '                                      | ' HOSPITAL '           |
| ' ILLUM '                                      | ' ILLUMINATION '       |
| ' INDL '                                       | ' INDUSTRIAL '         |
| ' INDPT '                                      | ' INDEPENDENT '        |
| ' INDTY '                                      | ' INDEMNITY '          |
| ' INFORMATN '                                  | ' INFO '               |
| ' INSTNS '                                     | ' INSTITUTIONS '       |
| ' INSTRUMEN '                                  | ' INSTRUMENTS '        |
| ' INSTRUMNT '                                  | ' INSTRUMENTS '        |
| ' INTEGRATRS '                                 | ' INTEGRATORS '        |
| ' INTERNATIONL '                               | ' INT '                |
| ' INVS '                                       | ' INVESTMENTS '        |
| ' INVT '                                       | ' INVESTMENT '         |
| ' MANAGEMNT '                                  | ' MANAGEMENT '         |
| ' MANAGMNT '                                   | ' MANAGEMENT '         |
| ' MANHATN '                                    | ' MANHATTAN '          |
| ' MANUF '                                      | ' MFG '                |
| ' MDSE '                                       | ' MERCHANDISING '      |
| ' MEASURMNT '                                  | ' MEASUREMENT '        |
| ' MERCHNDSNG '                                 | ' MERCHANDISING '      |
| ' MGMT '                                       | ' MANAGEMENT '         |
| ' MGRS '                                       | ' MANAGERS '           |
| ' MGT '                                        | ' MANAGEMENT '         |
| ' MICROWAV '                                   | ' MICROWAVE '          |
| ' MKTS '                                       | ' MARKETS '            |
| ' MLTIMEDIA '                                  | ' MULTIMEDIA '         |
| ' MTG '                                        | ' MORTGAGE '           |
| ' MTNS '                                       | ' MOUTAINS '           |
| ' MTRS '                                       | ' MOTORS '             |
| ' NETWRK '                                     | ' NETWORK '            |
| ' NOWEST '                                     | ' NORTHWEST '          |
| ' NTWRK '                                      | ' NETWORK '            |
| ' OFFSHRE '                                    | ' OFFSHORE '           |
| ' ORGANIZTN '                                  | ' ORG '                |
| ' PBLG '                                       | ' PUBLISHING '         |
| ' PHARMACEUTICL '                              | ' PHARM '              |
| ' PLAST '                                      | ' PLASTICS '           |
| ' PPTYS '                                      | ' PROPERTIES '         |
| ' PRODS '                                      | ' PROD '               |
| ' PRODTN '                                     | ' PRODN '              |
| ' PRODUCTN '                                   | ' PRODN '              |
| ' PRPANE '                                     | ' PROPANE '            |
| ' PTS '                                        | ' PARTS '              |
| ' PUBLISH '                                    | ' PUBLISHING '         |
| ' PUBLSHING '                                  | ' PUBLISHING '         |
| ' PUBN '                                       | ' PUBLICATIONS '       |
| ' PUBNS '                                      | ' PUBLICATIONS '       |
| ' PWR '                                        | ' POWER '              |
| ' RAILRD '                                     | ' RAILROAD '           |
| ' RECREATN '                                   | ' RECREATION '         |
| ' RECYCL '                                     | ' RECYCLING '          |
| ' REFIN '                                      | ' REFINING '           |
| ' REFNG '                                      | ' REFINING '           |
| ' RESTR '                                      | ' RESTAURANT '         |
| ' RESTS '                                      | ' RESTAURANTS '        |
| ' RETAILNG '                                   | ' RETAILING '          |
| ' RLTY '                                       | ' REALTY '             |
| ' RR '                                         | ' RAILROAD '           |
| ' RSCH '                                       | ' RESEARCH '           |
| ' RTNG '                                       | ' RATING '             |
| ' SCIENTIF '                                   | ' SCIENTIFIC '         |
| ' SERV '                                       | ' SERVICES '           |
| ' SLTNS '                                      | ' SOLUTIONS '          |
| ' SOFTWRE '                                    | ' SOFTWARE '           |
| ' SOLTNS '                                     | ' SOLUTIONS '          |
| ' SOLUT '                                      | ' SOLUTIONS '          |
| ' SRVC '                                       | ' SERVICES '           |
| ' SRVCS '                                      | ' SERVICES '           |
| ' STEAKHSE '                                   | ' STEAKHOUSE '         |
| ' STHWST '                                     | ' SOUTHWEST '          |
| ' STL '                                        | ' STEEL '              |
| ' STRS '                                       | ' STORES '             |
| ' SUP '                                        | ' SUPPLY '             |
| ' SUPERMKTS '                                  | ' SUPERMARKETS '       |
| ' SUPP '                                       | ' SUPPLIES '           |
| ' SURVYS '                                     | ' SURVEYS '            |
| ' SVC '                                        | ' SERVICES '           |
| ' SVCS '                                       | ' SERVICES '           |
| ' SVSC '                                       | ' SERVICES '           |
| ' SYS '                                        | ' SYSTEMS '            |
| ' SYSTM '                                      | ' SYSTEMS '            |
| ' TCHNLGY '                                    | ' TECH '               |
| ' TECHNGS '                                    | ' TECHNOLOGIES '       |
| ' TECHNL '                                     | ' TECH '               |
| ' TECHNLGIES '                                 | ' TECHNOLOGIES '       |
| ' TEL '                                        | ' TELEPHONE '          |
| ' TELE-COMM '                                  | ' TELECOMMUNICATIONS ' |
| ' TELE-COMMUN '                                | ' TELECOMMUNICATIONS ' |
| ' TELECOMMS '                                  | ' TELECOMMUNICATIONS ' |
| ' TELECONFERENC '                              | ' TELECONFERENCING '   |
| ' TELEG '                                      | ' TELEGRAPH '          |
| ' TELEGR '                                     | ' TELEGRAPH '          |
| ' TELVSN '                                     | ' TELEVISION '         |
| ' TR '                                         | ' TRUST '              |
| ' TRANSN '                                     | ' TRANSPORTATION '     |
| ' TRANSPORTN '                                 | ' TRANSPORTATION '     |
| ' TRNSACTN '                                   | ' TRANSACTION '        |
| ' UTD '                                        | ' UNITED '             |
| ' WSTN '                                       | ' WESTERN '            |
| ' WTR '                                        | ' WATER '              |




**** Table: Compustat Standartization Names
- pattern type :: trim.exact (see doc for harmonize.replace)

#+call: make-rds-patterns-table(data = cockburn.patterns.compustat.names, data.name = "cockburn.patterns.compustat.names")

#+name: cockburn.patterns.compustat.names
| ' A. L. WILLIAMS CORP. '                       | 'WILLIAMS (A.L.) CORP'       |
| ' B. F. GOODRICH CO. '                         | 'GOODRICH CORP'              |
| ' BELL + HOWELL COMPANY '                      | 'BELL & HOWELL OPERATING CO' |
| ' BENDIX CORPORATION(NOW ALLIED-SIGNAL INC.) ' | 'BENDIX CORP'                |
| ' BORG-WARNER CORPORATION '                    | 'BORGWARNER INC'             |
| ' CHRYSLER MOTORS CORPORATION '                | 'CHRYSLER CORP'              |
| ' CISCO TECHNOLOGY, INC. '                     | 'CISCO SYSTEMS INC'          |
| ' DELL PRODUCTS, L.P. '                        | 'DELL INC'                   |
| ' DELPHI TECHNOLOGIES, INC. '                  | 'DELPHI CORP'                |
| ' E. I. DU PONT DE NEMOURS AND COMPANY '       | 'DU PONT (E I) DE NEMOURS'   |
| ' E. R. SQUIBB + SONS, INC. '                  | 'SQUIBB CORP'                |
| ' ELI LILLY AND COMPANY '                      | 'LILLY (ELI) & CO'           |
| ' G. D. SEARLE & CO. '                         | 'SEARLE (G.D.) & CO'         |
| ' MINNESOTA MINING AND MANUFACTURING COMPANY ' | '3M CO'                      |
| ' OWENS-CORNING FIBERGLAS CORPORATION '        | 'OWENS CORNING'              |
| ' SCHLUMBERGER TECHNOLOGY CORPORATION '        | 'SCHLUMBERGER LTD'           |
| ' SCI-MED LIFE SYSTEMS, INC. '                 | 'SICMED LIFE SYSTEMS'        |
| ' TDK CORPORATION '                            | 'TDK CORP'                   |
| ' UNITED STATES SURGICAL CORPORATION '         | 'U S SURGICAL CORP'          |
| ' W. R. GRACE & CO. '                          | 'GRACE (W R) & CO'           |
| ' WESTINGHOUSE ELECTRIC CORP. '                | 'WESTINGHOUSE ELEC'          |






*** Identify Entity Type
:PROPERTIES:
:ID:       org:fyt54a51nki0
:END:
#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Identifies Entity Type
  ##'
  ##' @param x vector or table
  ##' @param procedures.message For debuging. If set will message which procedures were done.
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.detect.type <- function(x
                                 , procedures.message = FALSE
                                 , ...) {
    procedure.message <- function(x, name) {
      if(procedures.message) message(name)
      return(x)
    }
    x %>% 
      cockburn.detect.corp(...) %T>% 
      procedure.message("cockburn.detect.corp") %>%
      cockburn.detect.indiv(...) %T>% 
      procedure.message("cockburn.detect.indiv") %>%
      cockburn.detect.govt(...) %T>% 
      procedure.message("cockburn.detect.govt") %>%
      cockburn.detect.univ(...) %T>% 
      procedure.message("cockburn.detect.univ") %>%
      cockburn.detect.inst(...) %T>% 
      procedure.message("cockburn.detect.inst") %T>%
      cockburn.detect.inst.conds(...) %T>% 
      procedure.message("cockburn.detect.inst.conds") %>%
      cockburn.detect.inst.german(...) %T>% 
      procedure.message("cockburn.detect.inst.german") %>%
      cockburn.detect.hosp(...) %T>% 
      procedure.message("cockburn.detect.hosp") %>%
      return()
  }

  ##' Cleanup Entity Type
  ##'
  ##' @param x vector or table
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.replace.type <- function(x, ...) {
    x %>% 
      cockburn.replace.govt(...) %>% 
      cockburn.replace.univ(...) %>% 
      return()
  }
#+END_SRC

#+BEGIN_SRC R :tangle no
   ## ## Tests
  c(" DR VLASOV "
  , " S.VLASOV PHD "
  , " STANICA LEGALY REPRESENTED BY STAS"
  , " DR VLASOV & BROTHER "
  , "MSlab & C"
  , "LEGALY REPRESENTED BY STAS"
  , " REPUBLIC LEGALY REPRESENTED BY STAS"
  , " TILBURG UNIVERSTIY "
  , " VU UNIVERSTITAET "
  , " FUNDATION LEGALY REPRESENTED BY STAS") %>%
    cockburn.detect.type(procedures.message = TRUE)
    ## cockburn.detect.type(codes.name = "type")

  data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                    , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
                    , "MSLab Co."
                    , "MSLaeb Comp."
                    , "MSLab Comp. Ltd."
                    , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ  UNIVERSITY") %>% rep(20)
           , foo = "I love coffee" ) %>%
    cockburn.detect.type


  c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                    , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
                    , "MSLab Co."
                    , "MSLaeb Comp."
                    , "MSLab Comp. Ltd."
  , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ UNIVERSITY") %>% rep(20) %>%
    cockburn.detect.type
#+END_SRC

**** Firms (Corporates)
:PROPERTIES:
:ID:       org:nvtj6q51nki0
:END:
- code :: "firm"
#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Detect Corporates (code - "firm")
  ##'
  ##' From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' 
  ##' @param x vector or table
  ##' @param codes.name 
  ##' @param x.codes.merge 
  ##' @param ... 
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.detect.corp <- function(x
                                 , codes.name = "entity.type"
                                 , x.codes.merge = TRUE 
                                 , ...) {
    harmonize.detect(x
                   , codes.name = codes.name
                   , x.codes.merge = x.codes.merge
                   , patterns = cockburn.patterns.corp
                   , codes = "firm"
                   , return.only.first.detected.code = TRUE
                   , ...)
  }

  ## test
  ## c(" DR VLASOV & BROTHER "
  ## ,  "MSlab & C"
  ## , " S.VLASOV PHD "
  ## , "LEGALY REPRESENTED BY STAS") %>%
  ## cockburn.detect.corp
#+END_SRC

***** table - cockburn.patterns.corp

#+call: make-rds-patterns-table(data = cockburn.patterns.corp, data.name = "cockburn.patterns.corp")

#+name: cockburn.patterns.corp
| ' & BRO '                                                |
| ' & BROTHER '                                            |
| ' & C '                                                  |
| ' & CIE '                                                |
| ' & CO '                                                 |
| ' & FILS '                                               |
| ' & PARTNER '                                            |
| ' & SOEHNE '                                             |
| ' & SOHN '                                               |
| ' & SON '                                                |
| ' & SONS '                                               |
| ' & ZN '                                                 |
| ' & ZONEN '                                              |
| ' A '                                                    |
| ' A G '                                                  |
| ' A RL '                                                 |
| ' A S '                                                  |
| ' AANSPRAKELIJKHEID '                                    |
| ' AB '                                                   |
| ' ACTIEN GESELLSCHAFT '                                  |
| ' ACTIENGESELLSCHAFT '                                   |
| ' AD '                                                   |
| ' ADVIESBUREAU '                                         |
| ' AE '                                                   |
| ' AG '                                                   |
| ' AG & CO '                                              |
| ' AGG '                                                  |
| ' AGSA '                                                 |
| ' AK TIEBOLAGET '                                        |
| ' AKIEBOLAG '                                            |
| ' AKIEBOLG '                                             |
| ' AKIENGESELLSCHAFT '                                    |
| ' AKITENGESELLSCHAFT '                                   |
| ' AKITIEBOLAG '                                          |
| ' AKLIENGISELLSCHAFT '                                   |
| ' AKSJESELSKAP '                                         |
| ' AKSJESELSKAPET '                                       |
| ' AKSTIEBOLAGET '                                        |
| ' AKTAINGESELLSCHAFT '                                   |
| ' AKTEIBOLAG '                                           |
| ' AKTEINGESELLSCHAFT '                                   |
| ' AKTIBOLAG '                                            |
| ' AKTIE BOLAGET '                                        |
| ' AKTIEBDAG '                                            |
| ' AKTIEBLOAG '                                           |
| ' AKTIEBOALG '                                           |
| ' AKTIEBOALGET '                                         |
| ' AKTIEBOCAG '                                           |
| ' AKTIEBOLAC '                                           |
| ' AKTIEBOLAF '                                           |
| ' AKTIEBOLAG '                                           |
| ' AKTIEBOLAGET '                                         |
| ' AKTIEBOLAQ '                                           |
| ' AKTIEBOLOG '                                           |
| ' AKTIEGBOLAG '                                          |
| ' AKTIEGESELLSCHAFT '                                    |
| ' AKTIEGOLAGET '                                         |
| ' AKTIELBOLAG '                                          |
| ' AKTIEN '                                               |
| ' AKTIEN GESELLSCHAFT '                                  |
| ' AKTIENBOLAG '                                          |
| ' AKTIENBOLAGET '                                        |
| ' AKTIENEGESELLSCHAFT '                                  |
| ' AKTIENEGSELLSCHAFT '                                   |
| ' AKTIENGEGESELLSCHAFT '                                 |
| ' AKTIENGELLSCHAFT '                                     |
| ' AKTIENGESCELLSCHAFT '                                  |
| ' AKTIENGESELL SCHAFT '                                  |
| ' AKTIENGESELLCHAFT '                                    |
| ' AKTIENGESELLESCHAFT '                                  |
| ' AKTIENGESELLESHAFT '                                   |
| ' AKTIENGESELLS '                                        |
| ' AKTIENGESELLSCAFT '                                    |
| ' AKTIENGESELLSCGAFT '                                   |
| ' AKTIENGESELLSCHAFT '                                   |
| ' AKTIENGESELLSCHART '                                   |
| ' AKTIENGESELLSCHATT '                                   |
| ' AKTIENGESELLSCHGT '                                    |
| ' AKTIENGESELLSCHRAFT '                                  |
| ' AKTIENGESELLSHAFT '                                    |
| ' AKTIENGESELLSHAT '                                     |
| ' AKTIENGESELLSHCAFT '                                   |
| ' AKTIENGESELSCHAFT '                                    |
| ' AKTIENGESESCHAFT '                                     |
| ' AKTIENGESILLSCHAFT '                                   |
| ' AKTIENGESLLSCHAFT '                                    |
| ' AKTIENGESSELLSCHAFT '                                  |
| ' AKTIENGESSELSCHAFT '                                   |
| ' AKTIENGSELLSCHAFT '                                    |
| ' AKTIENGTESELLSCHAFT '                                  |
| ' AKTIENRESELLSCHAFT '                                   |
| ' AKTIESELSKAB '                                         |
| ' AKTIESELSKABET '                                       |
| ' AKTINGESELLSCHAFT '                                    |
| ' AKTSIONERNAYA KOMPANIA '                               |
| ' AKTSIONERNO '                                          |
| ' AKTSIONERNOE OBCHESTVO '                               |
| ' AKTSIONERNOE OBSCHEDTVO '                              |
| ' AKTSIONERNOE OBSCNESTVO '                              |
| ' AKTSIONERNOE OBSHESTVO '                               |
| ' AKTSIONERNOE OSBCHESTVO '                              |
| ' AKTSIONERNOEOBSCHESTVO '                               |
| ' ALTIENGESELLSCHAFT '                                   |
| ' AMBA '                                                 |
| ' AND SONS '                                             |
| ' ANDELSSELSKABET '                                      |
| ' ANLAGENGESELLSCHAFT '                                  |
| ' APPARATEBAU '                                          |
| ' APPERATEBAU '                                          |
| ' ARL '                                                  |
| ' AS '                                                   |
| ' ASA '                                                  |
| ' ASKTIENGESELLSCHAFT '                                  |
| ' ASOCIADOS '                                            |
| ' ASSCOIATES '                                           |
| ' ASSOCIADOS '                                           |
| ' ASSOCIATE '                                            |
| ' ASSOCIATED '                                           |
| ' ASSOCIATES '                                           |
| ' ASSOCIATI '                                            |
| ' ASSOCIATO '                                            |
| ' ASSOCIES '                                             |
| ' ASSSOCIATES '                                          |
| ' ATELIER '                                              |
| ' ATELIERS '                                             |
| ' ATIBOLAG '                                             |
| ' ATKIEBOLAG '                                           |
| ' ATKIENGESELLSCHAFT '                                   |
| ' AVV '                                                  |
| ' B '                                                    |
| ' BANK '                                                 |
| ' BANQUE '                                               |
| ' BEDRIJF '                                              |
| ' BEDRIJVEN '                                            |
| ' BEPERK '                                               |
| ' BEPERKTE AANSPREEKLIJKHEID '                           |
| ' BESCHRAENKTER HAFTUNG '                                |
| ' BESCHRANKTER '                                         |
| ' BESCHRANKTER HAFTUNG '                                 |
| ' BESLOTENGENOOTSCHAP '                                  |
| ' BESLOTENVENNOOTSCHAP '                                 |
| ' BETRIEBE '                                             |
| ' BMBH '                                                 |
| ' BRANDS '                                               |
| ' BROS '                                                 |
| ' BUSINESS '                                             |
| ' BV '                                                   |
| ' BV: '                                                  |
| ' BV? '                                                  |
| ' BVBA '                                                 |
| ' BVBASPRL '                                             |
| ' BVIO '                                                 |
| ' BVSA '                                                 |
| ' C{OVERSCORE O}RP '                                     |
| ' CAMPAGNIE '                                            |
| ' CAMPANY '                                              |
| ' CC '                                                   |
| ' CIE '                                                  |
| ' CMOPANY '                                              |
| ' CO '                                                   |
| ' CO OPERATIVE '                                         |
| ' CO OPERATIVES '                                        |
| ' CO: '                                                  |
| ' COFP '                                                 |
| ' COIRPORATION '                                         |
| ' COMANY '                                               |
| ' COMAPANY '                                             |
| ' COMERCIAL '                                            |
| ' COMERCIO '                                             |
| ' COMMANDITE SIMPLE '                                    |
| ' COMMERCIALE '                                          |
| ' COMMERCIALISATIONS '                                   |
| ' COMNPANY '                                             |
| ' COMP '                                                 |
| ' COMPAGNE '                                             |
| ' COMPAGNI '                                             |
| ' COMPAGNIE '                                            |
| ' COMPAGNIN '                                            |
| ' COMPAGNY '                                             |
| ' COMPAIGNIE '                                           |
| ' COMPAMY '                                              |
| ' COMPANAY '                                             |
| ' COMPANH '                                              |
| ' COMPANHIA '                                            |
| ' COMPANIA '                                             |
| ' COMPANIE '                                             |
| ' COMPANIES '                                            |
| ' COMPANY '                                              |
| ' COMPAY '                                               |
| ' COMPNAY '                                              |
| ' COMAPNY '                                              |
| ' COMPNY '                                               |
| ' COMPORATION '                                          |
| ' CONSORTILE PER AZIONE '                                |
| ' CONSORZIO '                                            |
| ' CONSTRUCTIONS '                                        |
| ' CONSULTING '                                           |
| ' CONZORZIO '                                            |
| ' COOEPERATIE '                                          |
| ' COOEPERATIEVE '                                        |
| ' COOEPERATIEVE VERENIGING '                             |
| ' COOEPERATIEVE VERKOOP '                                |
| ' COOP '                                                 |
| ' COOP A RL '                                            |
| ' COOPERATIE '                                           |
| ' COOPERATIEVE '                                         |
| ' COOPERATIEVE VENOOTSCHAP '                             |
| ' COOPERATION '                                          |
| ' COOPERATIVA AGICOLA '                                  |
| ' COOPERATIVA LIMITADA '                                 |
| ' COOPERATIVA PER AZIONI '                               |
| ' COORPORATION '                                         |
| ' COPANY '                                               |
| ' COPORATION '                                           |
| ' COPR '                                                 |
| ' COPRORATION '                                          |
| ' COPRPORATION '                                         |
| ' COROPORTION '                                          |
| ' COROPRATION '                                          |
| ' COROPROATION '                                         |
| ' CORORATION '                                           |
| ' CORP '                                                 |
| ' CORPARATION '                                          |
| ' CORPERATION '                                          |
| ' CORPFORATION '                                         |
| ' CORPN '                                                |
| ' CORPO '                                                |
| ' CORPOARTION '                                          |
| ' CORPOATAION '                                          |
| ' CORPOATION '                                           |
| ' CORPOIRATION '                                         |
| ' CORPOORATION '                                         |
| ' CORPOPRATION '                                         |
| ' CORPORAATION '                                         |
| ' CORPORACION '                                          |
| ' CORPORAION '                                           |
| ' CORPORAITON '                                          |
| ' CORPORARION '                                          |
| ' CORPORARTION '                                         |
| ' CORPORATAION '                                         |
| ' CORPORATE '                                            |
| ' CORPORATED '                                           |
| ' CORPORATI '                                            |
| ' CORPORATIION '                                         |
| ' CORPORATIN '                                           |
| ' CORPORATINO '                                          |
| ' CORPORATINON '                                         |
| ' CORPORATIO '                                           |
| ' CORPORATIOIN '                                         |
| ' CORPORATIOLN '                                         |
| ' CORPORATIOM '                                          |
| ' CORPORATION '                                          |
| ' CORPORATIOPN '                                         |
| ' CORPORATITON '                                         |
| ' CORPORATOIN '                                          |
| ' CORPORDATION '                                         |
| ' CORPORQTION '                                          |
| ' CORPORTAION '                                          |
| ' CORPORTATION '                                         |
| ' CORPORTION '                                           |
| ' CORPPORATION '                                         |
| ' CORPRATION '                                           |
| ' CORPROATION '                                          |
| ' CORPRORATION '                                         |
| ' CROP '                                                 |
| ' CROPORATION '                                          |
| ' CRPORATION '                                           |
| ' CV '                                                   |
| ' D ENTERPRISES '                                        |
| ' D ENTREPRISE '                                         |
| ' D O O '                                                |
| ' D’ENTREPRISE '                                         |
| ' DD '                                                   |
| ' DEVELOP '                                              |
| ' DEVELOPPEMENT '                                        |
| ' DEVELOPPEMENTS '                                       |
| ' DOING BUSINESS '                                       |
| ' DOO '                                                  |
| ' DORPORATION '                                          |
| ' EDMS '                                                 |
| ' EG '                                                   |
| ' ELECTRONIQUE '                                         |
| ' EN ZN '                                                |
| ' EN ZONEN '                                             |
| ' ENGINEERING '                                          |
| ' ENGINEERS '                                            |
| ' ENGINES '                                              |
| ' ENNOBLISSEMENT '                                       |
| ' ENTERPRISE '                                           |
| ' ENTRE PRISES '                                         |
| ' ENTREPOSE '                                            |
| ' ENTREPRISE '                                           |
| ' ENTREPRISES '                                          |
| ' EQUIP '                                                |
| ' EQUIPAMENTOS '                                         |
| ' EQUIPEMENT '                                           |
| ' EQUIPEMENTS '                                          |
| ' EQUIPMENT '                                            |
| ' EST '                                                  |
| ' ESTABILSSEMENTS '                                      |
| ' ESTABLISHMENT '                                        |
| ' ESTABLISSEMENT '                                       |
| ' ESTABLISSEMENTS '                                      |
| ' ESTABLISSMENTS '                                       |
| ' ET FILS '                                              |
| ' ETABLISSEMENT '                                        |
| ' ETABLISSMENTS '                                        |
| ' ETS '                                                  |
| ' FABRIC '                                               |
| ' FABRICA '                                              |
| ' FABRICATION '                                          |
| ' FABRICATIONS '                                         |
| ' FABRICS '                                              |
| ' FABRIEKEN '                                            |
| ' FABRIK '                                               |
| ' FABRIQUE '                                             |
| ' FABRYKA '                                              |
| ' FACTORY '                                              |
| ' FEDERATED '                                            |
| ' FILM '                                                 |
| ' FINANCIERE '                                           |
| ' FIRM '                                                 |
| ' FIRMA '                                                |
| ' GBMH '                                                 |
| ' GBR '                                                  |
| ' GEBR '                                                 |
| ' GEBROEDERS '                                           |
| ' GEBRUEDER '                                            |
| ' GENERALE POUR LES TECHNIQUES NOUVELLE '                |
| ' GENOSSENSCHAFT '                                       |
| ' GES M B H '                                            |
| ' GES MB H '                                             |
| ' GES MBH '                                              |
| ' GES MHH '                                              |
| ' GESELLSCHAFT '                                         |
| ' GESELLSCHAFT M B '                                     |
| ' GESELLSCHAFT MB H '                                    |
| ' GESELLSCHAFT MBH '                                     |
| ' GESELLSCHAFT MGH '                                     |
| ' GESELLSCHAFT MIT '                                     |
| ' GESELLSCHAFT MIT BESCHRANKTER '                        |
| ' GESELLSCHAFT MIT BESCHRANKTER HAFT '                   |
| ' GESELLSCHAFTMIT BESCHRANKTER '                         |
| ' GESMBH '                                               |
| ' GES '                                                  |
| ' GESSELLSCHAFT MIT BESCHRAENKTER HAUFTUNG '             |
| ' GIE '                                                  |
| ' GMBA '                                                 |
| ' GMBB '                                                 |
| ' GMBG '                                                 |
| ' GMBH '                                                 |
| ' GMHB '                                                 |
| ' GNBH '                                                 |
| ' GORPORATION '                                          |
| ' GROEP '                                                |
| ' GROUP '                                                |
| ' GROUPEMENT D ENTREPRISES '                             |
| ' H '                                                    |
| ' HAFRUNG '                                              |
| ' HANDEL '                                               |
| ' HANDELABOLAGET '                                       |
| ' HANDELEND ONDER '                                      |
| ' HANDELORGANISATION '                                   |
| ' HANDELS '                                              |
| ' HANDELSBOLAG '                                         |
| ' HANDELSBOLAGET '                                       |
| ' HANDELSGESELLSCHAFT '                                  |
| ' HANDESBOLAG '                                          |
| ' HATFUNG '                                              |
| ' HB '                                                   |
| ' HF '                                                   |
| ' HOLDINGS '                                             |
| ' INC '                                                  |
| ' INC: '                                                 |
| ' INCOPORATED '                                          |
| ' INCORORATED '                                          |
| ' INCORPARATED '                                         |
| ' INCORPATED '                                           |
| ' INCORPORATE '                                          |
| ' INCORPORATED '                                         |
| ' INCORPORORATED '                                       |
| ' INCORPORTED '                                          |
| ' INCORPOTATED '                                         |
| ' INCORPRATED '                                          |
| ' INCORPRORATED '                                        |
| ' INCROPORATED '                                         |
| ' INDISTRIES '                                           |
| ' INDUSRTIES '                                           |
| ' INDUSTRI '                                             |
| ' INDUSTRIA '                                            |
| ' INDUSTRIAL '                                           |
| ' INDUSTRIAL COP '                                       |
| ' INDUSTRIALNA '                                         |
| ' INDUSTRIAS '                                           |
| ' INDUSTRIE '                                            |
| ' INDUSTRIES '                                           |
| ' INDUSTRIJA '                                           |
| ' INDUSTRIJSKO '                                         |
| ' INGENIEURBUERO '                                       |
| ' INGENIEURBURO '                                        |
| ' INGENIEURGESELLSCHAFT '                                |
| ' INGENIEURSBUERO '                                      |
| ' INGENIEURSBUREAU '                                     |
| ' INGENIOERSBYRA '                                       |
| ' INGENJOERSFIRMA '                                      |
| ' INGENJOERSFIRMAN '                                     |
| ' INORPORATED '                                          |
| ' INT '                                                  |
| ' INT L '                                                |
| ' INTERNAITONAL '                                        |
| ' INTERNATIONAL '                                        |
| ' INTERNATIONAL BUSINESS '                               |
| ' INTERNATIONALE '                                       |
| ' INTERNATIONAUX '                                       |
| ' INTERNTIONAL '                                         |
| ' INTL '                                                 |
| ' INUDSTRIE '                                            |
| ' INVESTMENT '                                           |
| ' IS '                                                   |
| ' JOINTVENTURE '                                         |
| ' K G '                                                  |
| ' K K '                                                  |
| ' KABAUSHIKI KAISHA '                                    |
| ' KABISHIKI KAISHA '                                     |
| ' KABSUHIKI '                                            |
| ' KABUSHI KIKAISHA '                                     |
| ' KABUSHIBI KAISHA '                                     |
| ' KABUSHIKAISHA '                                        |
| ' KABUSHIKI '                                            |
| ' KABUSHIKKAISHA '                                       |
| ' KABUSHIKU KASISHA '                                    |
| ' KABUSHKIKI KAISHI '                                    |
| ' KABUSIKI '                                             |
| ' KABUSIKI KAISHA '                                      |
| ' KABUSIKI KAISYA '                                      |
| ' KABUSIKIKAISHA '                                       |
| ' KAGUSHIKI KAISHA '                                     |
| ' KAUSHIKI KAISHA '                                      |
| ' KAISHA '                                               |
| ' KAISYA '                                               |
| ' KABAUSHIKI GAISHA '                                    |
| ' KABISHIKI GAISHA '                                     |
| ' KABUSHI KIGAISHA '                                     |
| ' KABUSHIBI GAISHA '                                     |
| ' KABUSHIGAISHA '                                        |
| ' KABUSHIKGAISHA '                                       |
| ' KABUSHIKU GASISHA '                                    |
| ' KABUSHKIKI GAISHI '                                    |
| ' KABUSIKI GAISHA '                                      |
| ' KABUSIKI GAISYA '                                      |
| ' KABUSIKIGAISHA '                                       |
| ' KAGUSHIKI GAISHA '                                     |
| ' KAUSHIKI GAISHA '                                      |
| ' GAISHA '                                               |
| ' GAISYA '                                               |
| ' KB '                                                   |
| ' KB KY '                                                |
| ' KFT '                                                  |
| ' KG '                                                   |
| ' KGAA '                                                 |
| ' KK '                                                   |
| ' KOM GES '                                              |
| ' KOMM GES '                                             |
| ' KOMMANDITBOLAG '                                       |
| ' KOMMANDITBOLAGET '                                     |
| ' KOMMANDITGESELLSCHAFT '                                |
| ' KONSTRUKTIONEN '                                       |
| ' KOOPERATIVE '                                          |
| ' KS '                                                   |
| ' KUBUSHIKI KAISHA '                                     |
| ' KY '                                                   |
| ' L '                                                    |
| ' L C '                                                  |
| ' L L C '                                                |
| ' L P '                                                  |
| ' LAB '                                                  |
| ' LABARATOIRE '                                          |
| ' LABO '                                                 |
| ' LABORATOIRE '                                          |
| ' LABORATOIRES '                                         |
| ' LABORATORI '                                           |
| ' LABORATORIA '                                          |
| ' LABORATORIE '                                          |
| ' LABORATORIES '                                         |
| ' LABORATORIET '                                         |
| ' LABORATORIUM '                                         |
| ' LABORATORY '                                           |
| ' LABRATIORIES '                                         |
| ' LABS '                                                 |
| ' LC '                                                   |
| ' LCC '                                                  |
| ' LDA '                                                  |
| ' LDT '                                                  |
| ' LIIMITED '                                             |
| ' LIMIDADA '                                             |
| ' LIMINTED '                                             |
| ' LIMITADA '                                             |
| ' LIMITADO '                                             |
| ' LIMITATA '                                             |
| ' LIMITE '                                               |
| ' LIMITED '                                              |
| ' LIMITEE '                                              |
| ' LIMTED '                                               |
| ' LINITED '                                              |
| ' LITD '                                                 |
| ' LLC '                                                  |
| ' LLLC '                                                 |
| ' LLLP '                                                 |
| ' LLP '                                                  |
| ' LMITED '                                               |
| ' LP '                                                   |
| ' LT EE '                                                |
| ' LTA '                                                  |
| ' LTC '                                                  |
| ' LTD '                                                  |
| ' LTD: '                                                 |
| ' LTDA '                                                 |
| ' LTDS '                                                 |
| ' LTEE '                                                 |
| ' LTEE; '                                                |
| ' LTS '                                                  |
| ' MAATSCHAPPIJ '                                         |
| ' MANUFACTURE '                                          |
| ' MANUFACTURE D ARTICLES '                               |
| ' MANUFACTURE DE '                                       |
| ' MANUFACTURING '                                        |
| ' MARKETING '                                            |
| ' MASCHINENBAU '                                         |
| ' MASCHINENFABRIK '                                      |
| ' MBH '                                                  |
| ' MBH & CO '                                             |
| ' MERCHANDISING '                                        |
| ' MET BEPERKTE '                                         |
| ' MFG '                                                  |
| ' N A '                                                  |
| ' N V '                                                  |
| ' NA '                                                   |
| ' NAAMLOSE '                                             |
| ' NAAMLOZE '                                             |
| ' NAAMLOZE VENNOOTSCAP '                                 |
| ' NAAMLOZE VENNOOTSHCAP '                                |
| ' NAAMLOZEVENNOOTSCHAP '                                 |
| ' NAUCHNO PRIOZVODSTVENNAYA FIRMA '                      |
| ' NAUCHNO PRIOZVODSTVENNOE OBIEDINENIE '                 |
| ' NAUCHNO PRIOZVODSTVENNY KOOPERATIV '                   |
| ' NAUCHNO PROIZVODSTVENNOE '                             |
| ' NAUCHNO PROIZVODSTVENNOE OBJEDINENIE '                 |
| ' NAUCHNO TEKHNICHESKY KOOPERATIV '                      |
| ' NAUCHNO TEKHNICHESKYKKOOPERATIV '                      |
| ' NAUCHNO TEKHNOLOGICHESKOE '                            |
| ' NAUCHNO TEKHNOLOGICHESKOEPREDPRIYATIE '                |
| ' NAUCHNOPRIOZVODSTVENNOE '                              |
| ' NAUCHNOPROIZVODSTVENNOE '                              |
| ' NAUCHNOTEKHNICHESKYKKOOPERATIV '                       |
| ' NAUCHNOTEKNICHESKY '                                   |
| ' NV '                                                   |
| ' NV SA '                                                |
| ' NV: '                                                  |
| ' NVSA '                                                 |
| ' OBIDINENIE '                                           |
| ' OBIED '                                                |
| ' OBSCHESRYO '                                           |
| ' OBSCHESTVO & OGRANICHENNOI OTVETSTVENNOSTJU '          |
| ' OBSCHESTVO & ORGANICHENNOI OTVETSTVENNOSTIJU '         |
| ' OBSCHESTVO C '                                         |
| ' OBSCHESTVO S '                                         |
| ' OBSCHESTVO S OGRANICHENNOI '                           |
| ' OBSCHESTVO S OGRANICHENNOI OTVETSTVEN NOSTJU '         |
| ' OBSCHESTVO S OGRANICHENNOI OTVETSTVENNOSTIJU '         |
| ' OBSCHESTVO S OGRANICHENNOI OTVETSTVENNPSTJU '          |
| ' OBSCHESTVO S OGRANICHENNOY OTVETSTVENNOSTJU '          |
| ' OBSCHESTVO S OGRANICHENOI '                            |
| ' OBSCHESTVO S ORGANICHENNOI OTVETSTVENNOSTIJU '         |
| ' OBSCHESTVO S ORGANICHENNOI OTVETSTVENNOSTJU '          |
| ' OBSHESTVO S '                                          |
| ' OBSHESTVO S OGRANNICHENNOJ '                           |
| ' OBSHESTVO S ORGANICHENNOI OTVETSTVENNOSTIJU '          |
| ' OBSHESTVO S ORGANICHENNOI OTVETSTVENNOSTJU '           |
| ' OCTROOIBUREAU '                                        |
| ' OGRANICHENNOI OTVETSTVENNOSTIJU '                      |
| ' OGRANICHENNOI OTVETSTVENNOSTIJU FIRMA '                |
| ' OGRANICHENNOI OTVETSTVENNOSTJU '                       |
| ' OGRANICHENNOY OTVETSTVENNOSTYU '                       |
| ' OHG '                                                  |
| ' ONDERNEMING '                                          |
| ' OTVETCTVENNOSTJU '                                     |
| ' OTVETSTVENNOSTIJU '                                    |
| ' OTVETSTVENNOSTJU '                                     |
| ' OTVETSTVENNOSTOU '                                     |
| ' OTVETSTVENNOSTYU '                                     |
| ' OY '                                                   |
| ' OYABLTD '                                              |
| ' OYG '                                                  |
| ' OYI '                                                  |
| ' OYJ '                                                  |
| ' OYL '                                                  |
| ' P '                                                    |
| ' P C '                                                  |
| ' P L C '                                                |
| ' PARNERSHIP '                                           |
| ' PARNTERSHIP '                                          |
| ' PARTNER '                                              |
| ' PARTNERS '                                             |
| ' PARTNERSHIP '                                          |
| ' PATENT OFFICE '                                        |
| ' PATENTVERWALTUNGS GESELLSCHAFT MBH '                   |
| ' PATENTVERWALTUNGSGESELLSCHAFT '                        |
| ' PATENTVERWERTUNGSGESELLSCHAFT '                        |
| ' PATNERSHIP '                                           |
| ' PC '                                                   |
| ' PER AZIONA '                                           |
| ' PERSONENVENNOOTSCHAP MET BE PERKTE AANSPRAKELIJKHEID ' |
| ' PHARM '                                                |
| ' PHARMACEUTICA '                                        |
| ' PHARMACEUTICAL '                                       |
| ' PHARMACEUTICALS '                                      |
| ' PHARMACEUTIQUE '                                       |
| ' PHARMACIA '                                            |
| ' PHARMACIE '                                            |
| ' PHARMACUETICALS '                                      |
| ' PLANTS '                                               |
| ' PLC '                                                  |
| ' PREDPRIVATIE '                                         |
| ' PREDPRIYATIE '                                         |
| ' PREPRIVATIE '                                          |
| ' PRODUCE '                                              |
| ' PRODUCT '                                              |
| ' PRODUCTEURS '                                          |
| ' PRODUCTION '                                           |
| ' PRODUCTIONS '                                          |
| ' PRODUCTIQUE '                                          |
| ' PRODUCTS '                                             |
| ' PRODUITS '                                             |
| ' PRODUKTE '                                             |
| ' PRODUKTER '                                            |
| ' PRODUKTION '                                           |
| ' PRODUKTIONSGESELLSCHAFT '                              |
| ' PRODUKTUTVECKLING '                                    |
| ' PRODURA '                                              |
| ' PRODUTIS '                                             |
| ' PROIZVODSTENNOE OBIEDINENIE '                          |
| ' PROIZVODSTVENNOE '                                     |
| ' PROIZVODSTVENNOE OBIEDINENIE '                         |
| ' PTY '                                                  |
| ' PTY LIM '                                              |
| ' PTYLTD '                                               |
| ' PUBLISHING '                                           |
| ' PVBA '                                                 |
| ' RECHERCHES '                                           |
| ' RESPONSABILITA LIMITATA '                              |
| ' RESPONSABILITA’ LIMITATA '                             |
| ' RESPONSABILITE LIMITE '                                |
| ' RO '                                                   |
| ' RT '                                                   |
| ' S A '                                                  |
| ' S A R L '                                              |
| ' S A RL '                                               |
| ' S COOP '                                               |
| ' S COOP LTDA '                                          |
| ' S NC '                                                 |
| ' S OGRANICHENNOI OTVETSTVENNEST '                       |
| ' S P A '                                                |
| ' S PA '                                                 |
| ' S R L '                                                |
| ' S RL '                                                 |
| ' S S '                                                  |
| ' SA '                                                   |
| ' SA A RL '                                              |
| ' SA RL '                                                |
| ' SA: '                                                  |
| ' SAAG '                                                 |
| ' SAARL '                                                |
| ' SALES '                                                |
| ' SANV '                                                 |
| ' SARL '                                                 |
| ' SARL: '                                                |
| ' SAS '                                                  |
| ' SC '                                                   |
| ' SCA '                                                  |
| ' SCARL '                                                |
| ' SCIETE ANONYME '                                       |
| ' SCOOP '                                                |
| ' SCPA '                                                 |
| ' SCRAS '                                                |
| ' SCRL '                                                 |
| ' SEMPLICE '                                             |
| ' SERIVICES '                                            |
| ' SERVICE '                                              |
| ' SERVICES '                                             |
| ' SHOP '                                                 |
| ' SIMPLIFIEE '                                           |
| ' SL '                                                   |
| ' SNC '                                                  |
| ' SOC '                                                  |
| ' SOC ARL '                                              |
| ' SOC COOOP ARL '                                        |
| ' SOC COOP A RESP LIM '                                  |
| ' SOC COOP A RL '                                        |
| ' SOC COOP R L '                                         |
| ' SOC COOP RL '                                          |
| ' SOC IND COMM '                                         |
| ' SOC RL '                                               |
| ' SOCCOOP ARL '                                          |
| ' SOCCOOPARL '                                           |
| ' SOCIEDAD '                                             |
| ' SOCIEDAD ANONIMA '                                     |
| ' SOCIEDAD ANONIMYA '                                    |
| ' SOCIEDAD INDUSTRIAL '                                  |
| ' SOCIEDAD LIMITADA '                                    |
| ' SOCIEDADE LIMITADA '                                   |
| ' SOCIET CIVILE '                                        |
| ' SOCIETA '                                              |
| ' SOCIETA A '                                            |
| ' SOCIETA A RESPONSABILITA LIMITATA '                    |
| ' SOCIETA ANONIMA '                                      |
| ' SOCIETA CONSORTILE '                                   |
| ' SOCIETA CONSORTILE A RESPONSABILITA '                  |
| ' SOCIETA CONSORTILE ARL '                               |
| ' SOCIETA CONSORTILE PER AZION '                         |
| ' SOCIETA CONSORTILE PER AZIONI '                        |
| ' SOCIETA COOPERATIVA '                                  |
| ' SOCIETA COOPERATIVA A '                                |
| ' SOCIETA IN ACCOMANDITA '                               |
| ' SOCIETA IN ACCOMANDITA SEMPLICE '                      |
| ' SOCIETA IN NOME COLLETTIVO '                           |
| ' SOCIETA INDUSTRIA '                                    |
| ' SOCIETA PER AXIONI '                                   |
| ' SOCIETA PER AZINOI '                                   |
| ' SOCIETA PER AZINONI '                                  |
| ' SOCIETA PER AZIONI '                                   |
| ' SOCIETA PER AZIONI: '                                  |
| ' SOCIETA PER L INDUSTRIA '                              |
| ' SOCIETA PERAZIONI '                                    |
| ' SOCIETAPERAZIONI '                                     |
| ' SOCIETE '                                              |
| ' SOCIETE A '                                            |
| ' SOCIETE A RESPONSABILITE '                             |
| ' SOCIETE A RESPONSABILITE DITE '                        |
| ' SOCIETE A RESPONSABILITEE '                            |
| ' SOCIETE ANANYME '                                      |
| ' SOCIETE ANNOYME '                                      |
| ' SOCIETE ANOMYME '                                      |
| ' SOCIETE ANOMYNE '                                      |
| ' SOCIETE ANONVME '                                      |
| ' SOCIETE ANONYM '                                       |
| ' SOCIETE ANONYME '                                      |
| ' SOCIETE ANOYME '                                       |
| ' SOCIETE CHIMIQUE '                                     |
| ' SOCIETE CIVILE '                                       |
| ' SOCIETE COOPERATIVE '                                  |
| ' SOCIETE D APPLICATIONS GENERALES '                     |
| ' SOCIETE D APPLICATIONS MECANIQUES '                    |
| ' SOCIETE D EQUIPEMENT '                                 |
| ' SOCIETE D ETUDE ET DE CONSTRUCTION '                   |
| ' SOCIETE D ETUDE ET DE RECHERCHE EN VENTILATION '       |
| ' SOCIETE D ETUDES ET '                                  |
| ' SOCIETE D ETUDES TECHNIQUES ET D ENTREPRISES '         |
| ' SOCIETE DE '                                           |
| ' SOCIETE DE CONSEILS DE RECHERCHES ET D APPLICATIONS '  |
| ' SOCIETE DE CONSTRUCTIO '                               |
| ' SOCIETE DE FABRICAITON '                               |
| ' SOCIETE DE FABRICATION '                               |
| ' SOCIETE DE PRODUCTION ET DE '                          |
| ' SOCIETE DES TRANSPORTS '                               |
| ' SOCIETE DITE '                                         |
| ' SOCIETE DITE : '                                       |
| ' SOCIETE DITE: '                                        |
| ' SOCIETE EN '                                           |
| ' SOCIETE EN COMMANDITE '                                |
| ' SOCIETE EN COMMANDITE ENREGISTREE '                    |
| ' SOCIETE EN NOM COLLECTIF '                             |
| ' SOCIETE ETUDES ET '                                    |
| ' SOCIETE ETUDES ET DEVELOPPEMENTS '                     |
| ' SOCIETE GENERALE POUR LES '                            |
| ' SOCIETE GENERALE POUR LES TECHNIQUES NOVELLES '        |
| ' SOCIETE METALLURGIQUE '                                |
| ' SOCIETE NOUVELLE '                                     |
| ' SOCIETE PAR ACTIONS '                                  |
| ' SOCIETE PAR ACTIONS SIMPLIFEE '                        |
| ' SOCIETE PAR ACTIONS SIMPLIFIEE '                       |
| ' SOCIETE TECHNIQUE D APPLICATION ET DE RECHERCHE '      |
| ' SOCIETE TECHNIQUE DE PULVERISATION '                   |
| ' SOCIETEANONYME '                                       |
| ' SOCIETEDITE '                                          |
| ' SOCIETEINDUSTRIELLE '                                  |
| ' SOCRL '                                                |
| ' SOEHNE '                                               |
| ' SOGRANICHENNOI OTVETSTVENNOSTJU '                      |
| ' SOHN '                                                 |
| ' SOHNE '                                                |
| ' SONNER '                                               |
| ' SP '                                                   |
| ' SP A '                                                 |
| ' SP Z OO '                                              |
| ' SP ZOO '                                               |
| ' SPA '                                                  |
| ' SPOKAZOO '                                             |
| ' SPOL '                                                 |
| ' SPOL S R O '                                           |
| ' SPOL S RO '                                            |
| ' SPOL SRO '                                             |
| ' SPOLECNOST SRO '                                       |
| ' SPOLKA Z OO '                                          |
| ' SPOLKA ZOO '                                           |
| ' SPOLS RO '                                             |
| ' SPOLSRO '                                              |
| ' SPRL '                                                 |
| ' SPZ OO '                                               |
| ' SPZOO '                                                |
| ' SR '                                                   |
| ' SR L '                                                 |
| ' SR1 '                                                  |
| ' SRI '                                                  |
| ' SRL '                                                  |
| ' SRO '                                                  |
| ' SßRL '                                                 |
| ' SURL '                                                 |
| ' TEAM '                                                 |
| ' TECHNIQUES NOUVELLE '                                  |
| ' TECHNOLOGIES '                                         |
| ' THE FIRM '                                             |
| ' TOHO BUSINESS '                                        |
| ' TOVARISCHESIVO S OGRANICHENNOI OIVETSIVENNOSTIJU '     |
| ' TOVARISCHESTVO '                                       |
| ' TOVARISCHESTVO S OGRANICHENNOI '                       |
| ' TOVARISCHESTVO S OGRANICHENNOI OTVETSTVENNOSTJU '      |
| ' TOVARISCHESTVO S OGRANICHENNOI OTVETSVENNOSTJU '       |
| ' TOVARISCHESTVO S ORGANICHENNOI OTVETSTVENNOSTJU '      |
| ' TOVARISCHETSTVO S ORGANICHENNOI '                      |
| ' TRADING '                                              |
| ' TRADING AS '                                           |
| ' TRADING UNDER '                                        |
| ' UGINE '                                                |
| ' UNTERNEHMEN '                                          |
| ' USA '                                                  |
| ' USINES '                                               |
| ' VAKMANSCHAP '                                          |
| ' VENNOOTSCHAP '                                         |
| ' VENNOOTSCHAP ONDER FIRMA: '                            |
| ' VENNOOTSHAP '                                          |
| ' VENNOTSCHAP '                                          |
| ' VENOOTSCHAP '                                          |
| ' VENTURE '                                              |
| ' VERARBEITUNG '                                         |
| ' VERKOOP '                                              |
| ' VERSICHERUNGSBUERO '                                   |
| ' VERTRIEBSGESELLSCHAFT '                                |
| ' VOF '                                                  |
| ' WERK '                                                 |
| ' WERKE '                                                |
| ' WERKEN '                                               |
| ' WERKHUIZEN '                                           |
| ' WERKS '                                                |
| ' WERKSTAETTE '                                          |
| ' WERKSTATT '                                            |
| ' WERKZEUGBAU '                                          |
| ' WINKEL '                                               |
| ' WORKS '                                                |
| ' YUGEN KAISHA '                                         |
| ' YUGENKAISHA '                                          |
| ' YUUGEN KAISHA '                                        |
| ' YUUGENKAISHA '                                         |
| ' ZOO '                                                  |


**** Individuals
:PROPERTIES:
:ID:       org:480k6q51nki0
:END:
- code :: "indiv"

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Detect Individuals (Non-Corporates group)
  ##'
  ##' From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' 
  ##' @param x vector or table
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.detect.indiv <- function(x
                                 , codes.name = "entity.type"
                                 , x.codes.merge = TRUE
                                 , ...) {
    harmonize.detect(x
                   , codes.name = codes.name
                   , x.codes.merge = x.codes.merge
                   , patterns = cockburn.patterns.indiv
                   , codes = "indiv"
                   , return.only.first.detected.code = TRUE
                   , ...)
  }

  ## test
  ## c(" DR VLASOV "
  ## , " S.VLASOV PHD "
  ## , "LEGALY REPRESENTED BY STAS") %>%
  ## cockburn.detect.indiv

    ## c(" DR VLASOV "
    ## , " S.VLASOV PHD "
    ## , " STANICA LEGALY REPRESENTED BY STAS"
    ## , " DR VLASOV & BROTHER "
    ## , "MSlab & C"
    ## , "LEGALY REPRESENTED BY STAS"
    ## , " REPUBLIC LEGALY REPRESENTED BY STAS"
    ## , " TILBURG UNIVERSTIY "
    ## , " VU UNIVERSTITAET "
    ## , " FUNDATION LEGALY REPRESENTED BY STAS") %>%
    ##   cockburn.detect.indiv %>%
    ##   cockburn.detect.govt %>%
    ##   cockburn.detect.indiv
#+END_SRC

***** table - cockburn.patterns.indiv
#+call: make-rds-patterns-table(data = cockburn.patterns.indiv, data.name = "cockburn.patterns.indiv")

#+name: cockburn.patterns.indiv
| ' GEB '                       |
| ' DECEASED '                  |
| ' DECEDE '                    |
| ' DESEASED '                  |
| ' DIPL '                      |
| ' DIPL BETRIEBSWIRT '         |
| ' DIPL CHEM '                 |
| ' DIPL GEOGR '                |
| ' DIPL ING '                  |
| ' DIPL ING '                  |
| ' DIPL PHYS '                 |
| ' DIPL PHYS '                 |
| ' DIPL WIRTSCH ING '          |
| ' DOTT ING '                  |
| ' DR '                        |
| ' EPOSE '                     |
| ' EPOUSE '                    |
| ' EPSE '                      |
| ' GEBOREN '                   |
| ' GEBORENE '                  |
| ' GES VERTRETEN DURCH '       |
| ' GRAD '                      |
| ' HERITIERE '                 |
| ' ING '                       |
| ' ING GRAD '                  |
| ' ING DIPL '                  |
| ' JR '                        |
| ' LA SUCCESSION '             |
| ' LEGAL '                     |
| ' LEGALLY REPR '              |
| ' LEGALLY REPRESENTED '       |
| ' LEGALY REPRESENTED BY '     |
| ' NEE '                       |
| ' PHD '                       |
| ' PROF '                      |
| ' REPRESENTATIVE OF '         |
| ' REPRESENTEE PAR SON LEGAL ' |
| ' VERSTORBEN '                |
| ' VERSTORBEN ERFINDERS '      |
| ' VERSTORBENEN ERFINDERS '    |
| ' VERTRETEN DURCH '           |

**** Government
:PROPERTIES:
:ID:       org:r46k6q51nki0
:END:
- code :: "govt"

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Detect Goverment Organizations (Non-Corporates group)
  ##'
  ##' From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' 
  ##' @param x vector or table
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.detect.govt <- function(x
                                 , codes.name = "entity.type"
                                 , x.codes.merge = TRUE 
                                 , ...) {
    harmonize.detect(x
                   , codes.name = codes.name
                   , x.codes.merge = x.codes.merge
                   , patterns = cockburn.patterns.govt
                   , codes = "govt"
                   , return.only.first.detected.code = TRUE
                   , ...)
  }

  ## test
  ## c(" DR VLASOV "
  ## , " S.VLASOV PHD "
  ## , " REPUBLIC LEGALY REPRESENTED BY STAS") %>%
  ## cockburn.detect.govt


  ##' Cleanup Goverment Organizations (Non-Corporates group)
  ##'
  ##' From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' 
  ##' @param x vector or table
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.replace.govt <- function(x, ...) {
      replace_patterns(x
                      , patterns = cockburn.patterns.govt.cleanup
                      , ...)
  }


  ## test
  ## " VERY IMPORTANT SEC OF THE DEPT OF  " %>% cockburn.replace.govt
#+END_SRC

***** table - cockburn.patterns.govt

#+call: make-rds-patterns-table(data = cockburn.patterns.govt, data.name = "cockburn.patterns.govt")

#+name: cockburn.patterns.govt
| ' NAT RES COUNCIL '                       |
| ' NAT RES INST '                          |
| ' NAT SCI COUNCIL '                       |
| ' NAT SCI INST '                          |
| ' AGENCY '                                |
| ' STATE OF '                              |
| ' US ADMIN '                              |
| ' ADMINISTRATOR '                         |
| ' COMMISSIONER OF PATENTS '               |
| ' US DEPT '                               |
| ' US SEC '                                |
| ' UK SEC FOR '                            |
| ' UK '                                    |
| ' COMMONWEALTH '                          |
| ' MIN OF '                                |
| ' MIN FOR '                               |
| ' LETAT FR REPRESENTE '                   |
| ' LA POSTE '                              |
| ' ADMINISTRATOR '                         |
| ' AGENCE '                                |
| ' AGENCY '                                |
| ' AMMINISTRAZIONE '                       |
| ' AMMINISTRAZIONE '                       |
| ' AUTHORITY '                             |
| ' BOTANICAL GARDEN '                      |
| ' BUNDESANSTALT '                         |
| ' BUNDESREPUBLIK '                        |
| ' CHAMBRE '                               |
| ' CITY '                                  |
| ' COMISSARIAT '                           |
| ' COMMISARIAT '                           |
| ' COMMISSARAIT '                          |
| ' COMMISSARAT '                           |
| ' COMMISSARIAT '                          |
| ' COMMISSARIET '                          |
| ' COMMISSION '                            |
| ' COMMISSRIAT '                           |
| ' COMMONWEALTH '                          |
| ' COMMUNAUTE '                            |
| ' CONFEDERATED TRIBES '                   |
| ' COOUNCIL OF '                           |
| ' COUCIL OF '                             |
| ' COUNCIL '                               |
| ' COUNSEL OF '                            |
| ' COUNTY '                                |
| ' DEN PRAESIDENTEN '                      |
| ' DEPARTMENT OF AGRICULTURE '             |
| ' DETAT '                                 |
| ' ETAT '                                  |
| ' GERMANY '                               |
| ' GEZONDHEIDSDIENST '                     |
| ' GOUVERNEMENT '                          |
| ' GOUVERNMENT '                           |
| ' GOVERNER '                              |
| ' GOVERNMENT '                            |
| ' GOVERNOR '                              |
| ' HER MAJESTY '                           |
| ' KEN '                                   |
| ' LETAT '                                 |
| ' MINISTER '                              |
| ' MINISTERO '                             |
| ' MINISTRE '                              |
| ' MINISTRI '                              |
| ' MINISTRO '                              |
| ' MINISTRY '                              |
| ' MUNICIPAL UTILITY DISTRICT '            |
| ' NACIONAL '                              |
| ' NATIONAL '                              |
| ' NAZIONALE '                             |
| ' POLICE '                                |
| ' PREFECTURE '                            |
| ' PRESIDENZA DEL CONSIGLIO DEI MINISTRI ' |
| ' PRESIDENZADEL CONSIGLIO DEL MINISTRI '  |
| ' REPUBLIC '                              |
| ' RESEARCH COUNCIL '                      |
| ' SECRETARIAT '                           |
| ' SECRETARY '                             |
| ' STAAT '                                 |
| ' STADT '                                 |
| ' STATE '                                 |
| ' STATO '                                 |
| ' THE QUEEN '                             |
| ' VILLE '                                 |
| ' CNRS '                                  |
| ' CENT NAT DE LA RECH '                   |
| ' CENT NAT DETUDES SPATIALES '            |
| ' DESY '                                  |

***** table - cockburn.patterns.govt.cleanup


#+call: make-rds-patterns-table(data = cockburn.patterns.govt.cleanup, data.name = "cockburn.patterns.govt.cleanup")

#+name: cockburn.patterns.govt.cleanup
| pattern                | replacement |
|------------------------+-------------|
| ' SEC OF DEPT OF '     | ' DEPT OF ' |
| ' SEC OF THE DEPT OF ' | ' DEPT OF ' |


**** Universities
:PROPERTIES:
:ID:       org:zdck6q51nki0
:END:
- code :: "univ"

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Detect Universities (Non-Corporates group)
  ##'
  ##' From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' 
  ##' @param x vector or table
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.detect.univ <- function(x
                                 , codes.name = "entity.type"
                                 , x.codes.merge = TRUE 
                                 , ...) {
    harmonize.detect(x
                   , codes.name = codes.name
                   , x.codes.merge = x.codes.merge
                   , patterns = cockburn.patterns.univ
                   , codes = "univ"
                   , return.only.first.detected.code = TRUE
                   , ...)
  }

  ## test
  ## c(" TILBURG UNIVERSTIY "
  ## , " VU UNIVERSTITAET "
  ## , "LEGALY REPRESENTED BY STAS") %>%
  ## cockburn.detect.univ


  ##' Cleanup Universities (Non-Corporates group)
  ##'
  ##' From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' 
  ##' @param x vector or table
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.replace.univ <- function(x, ...) {
      replace_patterns(x
                      , patterns = cockburn.patterns.univ.cleanup
                      , ...)
  }

  ## test
  ## c(" SUPERVISORS OF THE TILBURG UNIVERSTIY "
  ## , " VU UNIVERSTITAET "
  ## , "LEGALY REPRESENTED BY STAS") %>%
  ## cockburn.replace.univ
#+END_SRC

***** table - universities
#+call: make-rds-patterns-table(data = cockburn.patterns.univ, data.name = "cockburn.patterns.univ")

#+name: cockburn.patterns.univ
| ' ACADEM'                   |
| ' ACAD '                    |
| ' AKAD '                    |
| ' COLLEGE '                 |
| ' CURATORS '                |
| ' ECOLE '                   |
| ' FACULTE '                 |
| ' INST OF TECH '            |
| ' INST OF TECH'             |
| ' INSTITUTE OF TECHNOLOGY ' |
| ' INTERNUIVERSITAIR '       |
| ' INTERUNIVERITAIR '        |
| ' POLITEC '                 |
| ' POLYTEC '                 |
| ' REGENTS '                 |
| ' RIJKSUNIVERSTTEIT '       |
| ' SCHOOL '                  |
| ' SCHULE '                  |
| ' SUPERVISORS '             |
| ' TRUSTEES '                |
| ' UMIVERSIDAD '             |
| ' UNIV '                    |
| ' UNIVERISITY '             |
| ' UNIVERISTY '              |
| ' UNIVERSATIES '            |
| ' UNIVERSI'                 |
| ' UNIVERSTIA '              |
| ' UNIVERSTITAT '            |
| ' UNIVERSTITAET '           |
| ' UNIVERSTITY '             |
| ' UNIVERSTIY '              |
| ' UNIVERSY '                |
| ' UNIVERZ '                 |
| ' UNVERSITY '               |
| ' KU LEUVEN '               |

***** table - clean up university names
#+call: make-rds-patterns-table(data = cockburn.patterns.univ.cleanup, data.name = "cockburn.patterns.univ.cleanup")

#+name: cockburn.patterns.univ.cleanup
| pattern                         | replacement |
|---------------------------------+-------------|
| ' BOARD OF REGENTS OF THE '     | ' '         |
| ' BOARD OF REGENTS OF '         | ' '         |
| ' BOARD OF REGENTS '            | ' '         |
| ' REGENTS OF THE '              | ' '         |
| ' REGENTS OF '                  | ' '         |
| ' REGENTS '                     | ' '         |
| ' BOARD OF TRUSTEES OF THE '    | ' '         |
| ' BOARD OF TRUSTEES OF '        | ' '         |
| ' BOARD OF TRUSTEES OPERATING ' | ' '         |
| ' BOARD OF TRUSTEES '           | ' '         |
| ' TRUSTEES OF THE '             | ' '         |
| ' TRUSTEES OF '                 | ' '         |
| ' TRUSTEES '                    | ' '         |
| ' BOARD OF SUPERVISORS OF THE ' | ' '         |
| ' BOARD OF SUPERVISORS OF '     | ' '         |
| ' BOARD OF SUPERVISORS '        | ' '         |
| ' SUPERVISORS OF THE '          | ' '         |
| ' SUPERVISORS OF '              | ' '         |
| ' SUPERVISORS '                 | ' '         |
| ' BOARD OF GOVERNORS OF THE '   | ' '         |
| ' BOARD OF GOVERNORS OF '       | ' '         |
| ' BOARD OF GOVERNORS '          | ' '         |
| ' GOVERNORS OF THE '            | ' '         |
| ' GOVERNORS OF '                | ' '         |
| ' GOVERNORS '                   | ' '         |
| ' CURATORS OF THE '             | ' '         |
| ' CURATORS '                    | ' '         |
| ' THE '                         | ' '         |


**** Non-profit institutes
:PROPERTIES:
:ID:       org:owhk6q51nki0
:END:

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Detect Non-profit Institutes (Non-Corporates group)
  ##'
  ##' From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' 
  ##' @param x vector or table
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.detect.inst <- function(x
                                 , codes.name = "entity.type"
                                 , x.codes.merge = TRUE 
                                 , ...) {
    harmonize.detect(x
                   , codes.name = codes.name
                   , x.codes.merge = x.codes.merge
                   , patterns = cockburn.patterns.inst
                   , codes = "inst"
                   , return.only.first.detected.code = TRUE
                   , ...)
  }

  ## test
  ## c(" DR VLASOV "
  ## , " S.VLASOV PHD "
  ## , " FUNDATION LEGALY REPRESENTED BY STAS") %>%
  ## cockburn.detect.inst
#+END_SRC

***** table - cockburn.patterns.inst

#+call: make-rds-patterns-table(data = cockburn.patterns.inst, data.name = "cockburn.patterns.inst")

#+name: cockburn.patterns.inst
| ' RESEARCH COUNCIL '               |
| ' RES COUNCIL '                    |
| ' FRAUNHOFER GES '                 |
| ' MAX PLANCK GES '                 |
| ' ASBL '                           |
| ' ASOCIACION '                     |
| ' ASSOCIATION '                    |
| ' ASSOCIAZIONE '                   |
| ' BLOOD '                          |
| ' BLOOD CENTER '                   |
| ' BLOOD SERVICES '                 |
| ' BLOOD TRANSFUSION SERVICE '      |
| ' CHURCH '                         |
| ' COOPERATIVE '                    |
| ' E V '                            |
| ' EV '                             |
| ' FEDERATION '                     |
| ' FONDATION '                      |
| ' FONDATIONE '                     |
| ' FOUNDATION '                     |
| ' FORSKNINGSINSTITUT '             |
| ' FUNDACAO '                       |
| ' FUNDACIO '                       |
| ' FUNDACION '                      |
| ' FUNDATION '                      |
| ' INDUSTRIAL TECHNOLOGY RESEARCH ' |
| ' INSITUT '                        |
| ' INSITUTE '                       |
| ' INSTIT '                         |
| ' INSTYTUT '                       |
| ' INSTYTUT '                       |
| ' INTITUTE '                       |
| ' ISTITUTO '                       |
| ' KENKYUSHO '                      |
| ' MINISTRIES '                     |
| ' SOCIETY '                        |
| ' STICHTING '                      |
| ' STIFTELSE '                      |
| ' STIFTUNG '                       |
| ' TRANSFUSION '                    |
| ' TRANSFUSION SANGUINE '           |
| ' TRUST '                          |
| ' VERENINING '                     |
| ' VZW '                            |

***** Complex conditions
:PROPERTIES:
:ID:       org:ajok6q51nki0
:END:

| pattern        | condition                            |
|----------------+--------------------------------------|
| ' COUNCIL OF ' | >0 & strpos(standard_name," RES ")>0 |
| ' FOUND '      | ~=0 & asstype~="univ"                |
| ' INST '       | >0 & asstype~="univ"                 |

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Detects Non-profit institutes with special conditions
  ##'
  ##' @param x table. Expected that x has a column with codes for universities
  ##' @param codes.col column with codes for universities ("univ"). Default is last column of x
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md
  ##' @export
  cockburn.detect.inst.conds.1 <- function(x
                                         , codes.name = "entity.type"
                                         , x.codes.merge = TRUE
                                         , ...) {
      ## STATA equvalent
      ## replace asstype = "inst" if strpos(standard_name," COUNCIL OF ")>0 & strpos(standard_name," RES ")>0
      harmonize.detect(x
                     , patterns = " COUNCIL OF .* RES | RES .* COUNCIL OF "
                     , patterns.type = "regex"
                     , codes = "inst"
                     , codes.name = codes.name
                     , x.codes.merge = x.codes.merge
                     , return.only.first.detected.code = TRUE
                     , ...)
          }


  ##' Detects Non-profit institutes with special conditions
  ##'
  ##' @param x table. Expected that x has a column with codes for universities
  ##' @param codes.col column with codes for universities ("univ"). Default is last column of x
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md
  ##' @export
  cockburn.detect.inst.conds.2 <- function(x
                                         , codes.name = "entity.type"
                                         , x.codes.merge = TRUE
                                         , ...) {
      ## STATA equvalent
      ## replace asstype = "inst" if strpos(standard_name," FOUND ")~=0 & asstype~="univ"
      ## assume a bug: " FOUND ")~=0 -> " FOUND ")>0
      ## replace asstype = "inst" if strpos(standard_name," INST ")>0 & asstype~="univ"
      codes <- harmonize.x(x, x.col = codes.name, ...)
      conds <- codes %>%
          lapply(equals, "univ") %>% 
          sapply(any, na.rm = TRUE) %>%
          not
      x.vec <- harmonize.x(x, ...)
      coded <- harmonize.detect(x = data.table(x.vec, codes)
                              , patterns = c(" FOUND "
                                           , " INST ")
                              , x.rows = conds
                              , codes = "inst"
                              , x.codes.merge = x.codes.merge
                              , return.only.first.detected.code = TRUE
                              , return.only.codes = TRUE)
      harmonize.x.dots(x, coded, x.col = codes.name
                     , x.col.update = TRUE)
  }




  ##' Detects Non-profit institutes with special conditions
  ##'
  ##' @param x table. Expected that x has a column with codes for universities
  ##' @param codes.col column with codes for universities ("univ"). Default is last column of x
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md
  ##' @export
  cockburn.detect.inst.conds <- function(x
                                       , x.codes.merge = TRUE
                                       , codes.name = "entity.type"
                                       , ...) {
    x %>% 
      cockburn.detect.inst.conds.1(x.codes.merge = x.codes.merge
                                 , codes.name = codes.name) %>%
      cockburn.detect.inst.conds.2(codes.name = codes.name
                                 , x.codes.merge = x.codes.merge) %>%
      return()
  }
#+END_SRC

#+BEGIN_SRC R :tangle no
   ## tests
  data.table(org = c(" EVIL FOUND OF BIG CORP "
                   , " EVIL FOUND OF BIG CORP "
                   , " INT INST OF MAGIC"
                   , " COUNCIL OF PARANORMAL RES & DEV "
                   , " COUNCIL OF GROWN UP KIDS ")
           , entity.type = list(c("univ", "gov"), NA, "univ", NA, "gov")) %>%
  cockburn.detect.inst.conds.2

  data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                    , "MSLab CÖ. <a href=lsdldf> <br> <\\a>"
                    , "MSLab Co."
                    , "MSLaeb Comp."
                    , " COUNCIL OF PARANORMAL RES & DEV "
                    , "MSLab Comp. Ltd."
                    , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") %>% rep(20)
           , foo = "I love coffee" ) %>%
    cockburn.detect.inst.conds(x.codes.merge = TRUE)

  data.table(org = c(" DR VLASOV "
                   , " S.VLASOV PHD "
                   , " STANICA LEGALY REPRESENTED BY STAS"
                   , " DR VLASOV & BROTHER "
                   , "MSlab & C"
                   , "LEGALY REPRESENTED BY STAS"
                   , " REPUBLIC LEGALY REPRESENTED BY STAS"
                   , " TILBURG UNIVERSTIY "
                   , " VU UNIVERSTITAET "
                   , " FUNDATION LEGALY REPRESENTED BY STAS")
           , entity.type = list(c("univ", "gov"), NA, "univ", NA, "gov")) %>%
    cockburn.detect.inst.conds


#+END_SRC

***** German Non-profit institutes
:PROPERTIES:
:ID:       org:vxuk6q51nki0
:END:

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Detects German Non-profit institutes
  ##'
  ##' "EINGETRAGENER VEREIN. NON PROFIT SOCIETY/ASSOCIATION."
  ##' 
  ##' @param x table
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.detect.inst.german <- function(x
                                 , codes.name = "entity.type"
                                 , x.codes.merge = TRUE 
                                 , ...) {
    conds <- harmonize.detect(x, patterns = c(" UNIV "
                                            , " GMBH "
                                            , " KGAA "
                                            , " KG "
                                            , " AG "
                                            , " EG "
                                            , " OHG ")
                            , codes = TRUE
                            , return.only.first.detected.code = TRUE
                            , return.only.codes = TRUE) %>%
        unlist %>% sapply(isTRUE) %>% not
    harmonize.detect(x, patterns = c(" STIFTUNG "
                                   , " EINGETRAGENER VEREIN ")
                   , codes.name = codes.name
                   , x.codes.merge = x.codes.merge
                   , x.rows = conds
                   , codes = "inst"
                   , return.only.first.detected.code = TRUE
                   , ...)
  }
#+END_SRC

#+BEGIN_SRC R :results none :session :tangle no :eval no-export
      ## Test
      c(" EINGETRAGENER VEREIN UNIV "
      , " BERLIN EINGETRAGENER VEREIN "
      , " STIFTUNG ") %>% 
          cockburn.detect.inst.german
#+END_SRC


**** Hospitals
:PROPERTIES:
:ID:       org:pk0l6q51nki0
:END:

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Detect Hospitals (Non-Corporates group)
  ##'
  ##' From non_corporates.do file. Source - https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded
  ##' 
  ##' @param x vector or table
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md 
  ##' @export 
  cockburn.detect.hosp <- function(x
                                 , codes.name = "entity.type"
                                 , x.codes.merge = TRUE 
                                 , ...) {
    harmonize.detect(x
                   , codes.name = codes.name
                   , x.codes.merge = x.codes.merge
                   , patterns = cockburn.patterns.hosp
                   , codes = "hosp"
                   , return.only.first.detected.code = TRUE
                   , ...)
  }




  ## test
  ## c(" DR VLASOV "
  ## , " S.VLASOV PHD "
  ## , " STANICA LEGALY REPRESENTED BY STAS") %>%
  ##     cockburn.detect.hosp
#+END_SRC

***** table - cockburn.patterns.hosp
#+call: make-rds-patterns-table(data = cockburn.patterns.hosp, data.name = "cockburn.patterns.hosp")

#+name: cockburn.patterns.hosp
| ' AMTS SYGEHUS '        |
| ' AMTSSYGEHUS '         |
| ' BOLNHITSA '           |
| ' BOLNISN '             |
| ' BOLNITSA '            |
| ' BOLNYITSA '           |
| ' CENTRE '              |
| ' CLINIC '              |
| ' CLINICA '             |
| ' CLINIQUE '            |
| ' HAIGLA '              |
| ' HOPITAL '             |
| ' HOPITAUX '            |
| ' HOPSITAL '            |
| ' HOSITAL '             |
| ' HOSP '                |
| ' HOSPIDAL '            |
| ' HOSPITAL '            |
| ' HOSPITALARIO '        |
| ' HOSPITALET '          |
| ' HOSPITAUX '           |
| ' KESKUSSAIRAALA '      |
| ' KLIINIK '             |
| ' KLINIK '              |
| ' KLINIKA '             |
| ' KLINIKKA '            |
| ' KLINIKUM '            |
| ' KORHAZ '              |
| ' KRANKENHAUS '         |
| ' LHOSPTALET '          |
| ' LIGONINE '            |
| ' MEDICAL CENTER '      |
| ' NEMOCNICA '           |
| ' NEMOCNICE '           |
| ' NOSOCOMIO '           |
| ' NOSOKOMIO '           |
| ' OSPEDALE '            |
| ' OSPETALE '            |
| ' OSPITALIERI '         |
| ' POLICLINICA '         |
| ' POLICLINICO '         |
| ' POLIKLINIK '          |
| ' SAIRAALA '            |
| ' SJUKHUS '             |
| ' SJUKHUSET '           |
| ' SLIMNICA '            |
| ' SPITAL '              |
| ' STACIONARS '          |
| ' STANICA '             |
| ' STREDISKO '           |
| ' SYGEHUS '             |
| ' SYGEHUSET '           |
| ' SYKEHUS '             |
| ' SZPITAL '             |
| ' UNIVERSITAETSKLINIK ' |
| ' ZIEKENHUIS '          |
| ' CITY OF HOPE '        |


*** Punctuation
:PROPERTIES:
:ID:       org:ehachlb1cgi0
:END:
Following funciton removes punctuation and standardise some symbols. Implementation of punctuation2.do from  https://sites.google.com/site/patentdataproject/Home/posts/namestandardizationroutinesuploaded

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Removes punctuation and standardise some symbols. 
  ##'
  ##' @param x object
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##' 
  ##' @md
  ##' @import magrittr
  ##' @export 
  cockburn.replace.punctuation <- function(x
                                           , ...) {
    x %>%
      harmonize.replace(patterns = cockburn.patterns.punctuation.and, ...) %>%
      harmonize.replace(patterns = cockburn.patterns.punctuation.the
                      , patterns.type.col = 3, ...) %>%
      ## I swapted patstat with amadeus otherwise Ã²Ã¢ÃªÃ®Ã© will not become oaeie
      harmonize.replace(patterns = cockburn.patterns.punctuation.patstat, ...) %>% 
      harmonize.replace(patterns = cockburn.patterns.punctuation.amadeus, ...) %>%
      harmonize.replace(patterns = cockburn.patterns.punctuation.char, ...)
  }

  ## Test
  ## c("WESTINGHOUSE, |.?^&*@ ELEC  "
  ## , "GRACE (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©"
  ## , "GRACE (W/R) & CO Ltd.") %>% 
  ##   cockburn.replace.punctuation
#+END_SRC

**** table - & (EPO Espace)

#+call: make-rds-patterns-table(data = cockburn.patterns.punctuation.and, data.name = "cockburn.patterns.punctuation.and")

#+name: cockburn.patterns.punctuation.and
| pattern | replacement |
|---------+-------------|
| '&AMP;' | ' & '       |
| '+'     | ' & '       |
| ' AND ' | ' & '       |
| ' ET '  | ' & '       |
| ' UND ' | ' & '       |
| '&'     | ' & '       |

**** table - the (British)

#+call: make-rds-patterns-table(data = cockburn.patterns.punctuation.the, data.name = "cockburn.patterns.punctuation.the")

#+name: cockburn.patterns.punctuation.the
| pattern | replacement | type   |
|---------+-------------+--------|
| '(THE)' | ''          | ends   |
| 'THE '  | ''          | begins |


ISO8859-1 (AMADEUS)

#+BEGIN_SRC emacs-lisp
   ;; (insert-char '#10r192) 
  (char-to-string 192)
#+END_SRC


**** table - Accented characters - AMADEUS

#+call: make-rds-patterns-table(data = cockburn.patterns.punctuation.amadeus, data.name = "cockburn.patterns.punctuation.amadeus")

#+name: cockburn.patterns.punctuation.amadeus
| pattern | replacement | codepoint |
|---------+-------------+-----------|
| À       | A           |       192 |
| Á       | A           |       193 |
| Â       | A           |       194 |
| Ã       | A           |       195 |
| Ä       | AE          |       196 |
| Å       | A           |       197 |
| Æ       | AE          |       198 |
| Ç       | C           |       199 |
| È       | E           |       200 |
| É       | E           |       201 |
| Ê       | E           |       202 |
| Ë       | E           |       203 |
| Ì       | I           |       204 |
| Í       | I           |       205 |
| Î       | I           |       206 |
| Ï       | I           |       207 |
| Ð       | D           |       208 |
| Ñ       | N           |       209 |
| Ò       | O           |       210 |
| Ó       | O           |       211 |
| Ô       | O           |       212 |
| Õ       | O           |       213 |
| Ö       | OE          |       214 |
| Ø       | O           |       216 |
| Ù       | U           |       217 |
| Ú       | U           |       218 |
| Û       | U           |       219 |
| Ü       | UE          |       220 |
| Ý       | Y           |       221 |
| ß       | SS          |       223 |
| à       | a           |       224 |
| á       | a           |       225 |
| â       | a           |       226 |
| ã       | a           |       227 |
| ä       | ae          |       228 |
| å       | a           |       229 |
| æ       | ae          |       230 |
| ç       | c           |       231 |
| è       | e           |       232 |
| é       | e           |       233 |
| ê       | e           |       234 |
| ë       | e           |       235 |
| ì       | i           |       236 |
| í       | i           |       237 |
| î       | i           |       238 |
| ï       | i           |       239 |
| ð       | o           |       240 |
| ñ       | n           |       241 |
| ò       | o           |       242 |
| ó       | o           |       243 |
| ô       | o           |       244 |
| õ       | o           |       245 |
| ö       | oe          |       246 |
| ø       | o           |       248 |
| ù       | u           |       249 |
| ú       | u           |       250 |
| û       | u           |       251 |
| ü       | ue          |       252 |
| ý       | y           |       253 |
| ÿ       | y           |       255 |
#+TBLFM: $1='(char-to-string $>);N


**** table - Accented characters - EPO PATSTAT

#+call: make-rds-patterns-table(data = cockburn.patterns.punctuation.patstat, data.name = "cockburn.patterns.punctuation.patstat")

#+name: cockburn.patterns.punctuation.patstat
| pattern | replacement | code1 | code2 | name                     |
|---------+-------------+-------+-------+--------------------------|
| Ã       | a           |   195 |   160 | a grave                  |
| Ã¡      | a           |   195 |   161 | a acute                  |
| Ã   | A           |   195 |   128 | A acute                  |
| Ã²      | o           |   195 |   178 | Some sort of o (Italian) |
| Ã¢      | a           |   195 |   162 | a circumflex             |
| Ãª      | e           |   195 |   170 | e circumflex             |
| Ã®      | i           |   195 |   174 | i circumflex             |
| Ã©      | e           |   195 |   169 | e acute                  |
| Ã   | E           |   195 |   137 | E acute                  |
| Ã¨      | e           |   195 |   168 | e grave                  |
| Ã§      | c           |   195 |   167 | c cedilla                |
| Ã   | E           |   195 |   139 | E umlaut                 |
| Ã¤      | ae          |   195 |   164 | a umlaut                 |
| Ã¶      | oe          |   195 |   182 | o umlaut                 |
| Ã¼      | ue          |   195 |   188 | u umlaut                 |
| Ã   | AE          |   195 |   132 | A umlaut                 |
| Ã   | OE          |   195 |   150 | O umlaut                 |
| Ã   | UE          |   195 |   156 | U umlaut                 |
| Ã   | N           |   195 |   145 | N tilde                  |
| Ã±      | n           |   195 |   177 | n tilde                  |
#+TBLFM: $1='(concat (char-to-string $3) (char-to-string $4));N

**** table - strips out all punctuation characters

#+call: make-rds-patterns-table(data = cockburn.patterns.punctuation.char, data.name = "cockburn.patterns.punctuation.char")

#+name: cockburn.patterns.punctuation.char
| pattern  | replacement |
|----------+-------------|
| '''      | ''          |
| ';'      | ''          |
| '^'      | ''          |
| '<'      | ''          |
| '.'      | ''          |
| '`'      | ''          |
| '_'      | ''          |
| '>'      | ''          |
| ''''     | ''          |
| '!'      | ''          |
| '+'      | ''          |
| '?'      | ''          |
| '('      | ''          |
| '£'      | ''          |
| '{'      | ''          |
| '\'      | ''          |
| ')'      | ''          |
| '$'      | ''          |
| '}'      | ''          |
| ' \vert' | ''          |
| ','      | ''          |
| '%'      | ''          |
| '['      | ''          |
| '¦'      | ''          |
| '*'      | ''          |
| ']'      | ''          |
| '/'      | ' '         |
| '@'      | ''          |
| ':'      | ''          |
| '~'      | ''          |
| '#'      | ''          |
| '-'      | ' '         |




*** Standard Name
:PROPERTIES:
:ID:       org:tnnchlb1cgi0
:END:

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Create standard name
  ##'
  ##' @param x object
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##' 
  ##' @md
  ##' @import magrittr
  ##' @export 
  cockburn.replace.standard.names <- function(x
                                              , ...) {
    x %>%
      cockburn.replace.derwent(...) %>% 
      replace_patterns(patterns = cockburn.patterns.standard.names.additional, ...) %>% 
      replace_patterns(patterns = cockburn.patterns.standard.names.country.specific, ...)
  }
#+END_SRC

#+BEGIN_SRC R :results none :session :tangle no :eval no-export
  ## Test
  c("WESTINGHOUSE, |.?^&*@ ELEC  "
  , "GRACE (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©  PUBLIC LIMITED "
  , "GRACE (W/R) & CO LTD ") %>% 
   cockburn.replace.standard.names
#+END_SRC


**** table - additional changes

#+call: make-rds-patterns-table(data = cockburn.patterns.standard.names.additional, data.name = "cockburn.patterns.standard.names.additional")

#+name: cockburn.patterns.standard.names.additional
| pattern        | replacement |
|----------------+-------------|
| ' RES & DEV '  | ' R&D '     |
| ' RECH & DEV ' | ' R&D '     |

**** table - country specific work

#+call: make-rds-patterns-table(data = cockburn.patterns.standard.names.country.specific, data.name = "cockburn.patterns.standard.names.country.specific")

#+name: cockburn.patterns.standard.names.country.specific
| pattern                                                | replacement       | country            |
|--------------------------------------------------------+-------------------+--------------------|
| ' PUBLIC LIMITED '                                     | ' PLC '           | UNITED KINGDOM     |
| ' PUBLIC LIABILITY COMPANY '                           | ' PLC '           | UNITED KINGDOM     |
| ' HOLDINGS '                                           | ' HLDGS '         | UNITED KINGDOM     |
| ' HOLDING '                                            | ' HLDGS '         | UNITED KINGDOM     |
| ' GREAT BRITAIN '                                      | ' GB '            | UNITED KINGDOM     |
| ' LTD CO '                                             | ' CO LTD '        | UNITED KINGDOM     |
| ' SOC LIMITADA '                                       | ' SL '            | SPANISH            |
| ' SOC EN COMMANDITA '                                  | ' SC '            | SPANISH            |
| ' & CIA '                                              | ' CO '            | SPANISH            |
| ' SOC IN ACCOMANDITA PER AZIONI '                      | ' SA '            | ITALIAN            |
| ' SAPA '                                               | ' SA '            | ITALIAN            |
| ' SOC A RESPONSABILITÀ LIMITATA '                      | ' SRL '           | ITALIAN            |
| ' HANDELSBOLAG '                                       | ' HB  '           | SWEDISH            |
| ' KOMANDIT GESELLSCHAFT '                              | ' KG '            | GERMAN             |
| ' KOMANDITGESELLSCHAFT '                               | ' KG '            | GERMAN             |
| ' EINGETRAGENE GENOSSENSCHAFT '                        | ' EG '            | GERMAN             |
| ' GENOSSENSCHAFT '                                     | ' EG '            | GERMAN             |
| ' GESELLSCHAFT M B H '                                 | ' GMBH '          | GERMAN             |
| ' OFFENE HANDELS GESELLSCHAFT '                        | ' OHG '           | GERMAN             |
| ' GESMBH '                                             | ' GMBH '          | GERMAN             |
| ' GESELLSCHAFT BURGERLICHEN RECHTS '                   | ' GBR '           | GERMAN             |
| ' GESELLSCHAFT '                                       | ' GMBH '          | GERMAN             |
| ' GMBH CO KG '                                         | ' GMBH & CO KG '  | GERMAN             |
| ' GMBH COKG '                                          | ' GMBH & CO KG '  | GERMAN             |
| ' GMBH U CO KG '                                       | ' GMBH & CO KG '  | GERMAN             |
| ' GMBH U COKG '                                        | ' GMBH & CO KG '  | GERMAN             |
| ' GMBH U CO '                                          | ' GMBH & CO KG '  | GERMAN             |
| ' GMBH CO '                                            | ' GMBH & CO KG '  | GERMAN             |
| ' AG CO KG '                                           | ' AG & CO KG '    | GERMAN             |
| ' AG COKG '                                            | ' AG & CO KG '    | GERMAN             |
| ' AG U CO KG '                                         | ' AG & CO KG '    | GERMAN             |
| ' AG U COKG '                                          | ' AG & CO KG '    | GERMAN             |
| ' AG U CO '                                            | ' AG & CO KG '    | GERMAN             |
| ' AG CO '                                              | ' AG & CO KG '    | GERMAN             |
| ' GMBH CO OHG '                                        | ' GMBH &CO OHG '  | GERMAN             |
| ' GMBH COOHG '                                         | ' GMBH & CO OHG ' | GERMAN             |
| ' GMBH U CO OHG '                                      | ' GMBH & CO OHG ' | GERMAN             |
| ' GMBH U COOHG '                                       | ' GMBH & CO OHG ' | GERMAN             |
| ' AG CO OHG '                                          | ' AG & CO OHG '   | GERMAN             |
| ' AG COOHG '                                           | ' AG & CO OHG '   | GERMAN             |
| ' AG U CO OHG '                                        | ' AG & CO OHG '   | GERMAN             |
| ' AG U COOHG '                                         | ' AG & CO OHG '   | GERMAN             |
| ' SOCIETE ANONYME SIMPLIFIEE '                         | ' SAS '           | FRENCH and BELGIAN |
| ' SOC ANONYME '                                        | ' SA '            | FRENCH and BELGIAN |
| ' STE ANONYME '                                        | ' SA '            | FRENCH and BELGIAN |
| ' SARL UNIPERSONNELLE '                                | ' SARLU '         | FRENCH and BELGIAN |
| ' SOC PAR ACTIONS SIMPLIFIEES '                        | ' SAS '           | FRENCH and BELGIAN |
| ' SAS UNIPERSONNELLE '                                 | ' SASU '          | FRENCH and BELGIAN |
| ' ENTREPRISE UNIPERSONNELLE A RESPONSABILITE LIMITEE ' | ' EURL '          | FRENCH and BELGIAN |
| ' SOCIETE CIVILE IMMOBILIERE '                         | ' SCI '           | FRENCH and BELGIAN |
| ' GROUPEMENT D INTERET ECONOMIQUE '                    | ' GIE '           | FRENCH and BELGIAN |
| ' SOCIETE EN PARTICIPATION '                           | ' SP '            | FRENCH and BELGIAN |
| ' SOCIETE EN COMMANDITE SIMPLE '                       | ' SCS '           | FRENCH and BELGIAN |
| ' ANONYME DITE '                                       | ' SA '            | FRENCH and BELGIAN |
| ' SOC DITE '                                           | ' SA '            | FRENCH and BELGIAN |
| ' & CIE '                                              | ' CO '            | FRENCH and BELGIAN |
| ' BV BEPERKTE AANSPRAKELIJKHEID '                      | ' BVBA '          | BELGIAN            |
| ' COMMANDITAIRE VENNOOTSCHAP OP AANDELEN '             | ' CVA '           | BELGIAN            |
| ' GEWONE COMMANDITAIRE VENNOOTSCHAP '                  | ' GCV '           | BELGIAN            |
| ' SOCIETE EN COMMANDITE PAR ACTIONS '                  | ' SCA '           | BELGIAN            |
| ' ANDELSSELSKABET '                                    | ' AMBA '          | DENMARK            |
| ' ANDELSSELSKAB '                                      | ' AMBA '          | DENMARK            |
| ' INTERESSENTSKABET '                                  | ' IS '            | DENMARK            |
| ' INTERESSENTSKAB '                                    | ' IS '            | DENMARK            |
| ' KOMMANDITAKTIESELSKABET '                            | ' KAS '           | DENMARK            |
| ' KOMMANDITAKTIESELSKAB '                              | ' KAS '           | DENMARK            |
| ' KOMMANDITSELSKABET '                                 | ' KS '            | DENMARK            |
| ' KOMMANDITSELSKAB '                                   | ' KS '            | DENMARK            |
| ' ANDELSLAGET '                                        | ' AL '            | NORWAY             |
| ' ANDELSLAG '                                          | ' AL '            | NORWAY             |
| ' ANSVARLIG SELSKAPET '                                | ' ANS '           | NORWAY             |
| ' ANSVARLIG SELSKAP '                                  | ' ANS '           | NORWAY             |
| ' AKSJESELSKAPET '                                     | ' AS '            | NORWAY             |
| ' AKSJESELSKAP '                                       | ' AS '            | NORWAY             |
| ' ALLMENNAKSJESELSKAPET '                              | ' ASA '           | NORWAY             |
| ' ALLMENNAKSJESELSKAP '                                | ' ASA '           | NORWAY             |
| ' SELSKAP MED DELT ANSAR '                             | ' DA '            | NORWAY             |
| ' KOMMANDITTSELSKAPET '                                | ' KS '            | NORWAY             |
| ' KOMMANDITTSELSKAP '                                  | ' KS '            | NORWAY             |
| ' COMMANDITAIRE VENNOOTSCHAP '                         | ' CV '            | NETHERLANDS        |
| ' COMMANDITAIRE VENNOOTSCHAP OP ANDELEN '              | ' CVOA '          | NETHERLANDS        |
| ' VENNOOTSCHAP ONDER FIRMA '                           | ' VOF '           | NETHERLANDS        |
| ' PUBLIKT AKTIEBOLAG '                                 | ' APB '           | FINLAND            |
| ' KOMMANDIITTIYHTIO '                                  | ' KY '            | FINLAND            |
| ' JULKINEN OSAKEYHTIO '                                | ' OYJ '           | FINLAND            |
| ' SPOLKA AKCYJNA '                                     | ' SA '            | POLAND             |
| ' SPOLKA PRAWA CYWILNEGO '                             | ' SC '            | POLAND             |
| ' SPOLKA KOMANDYTOWA '                                 | ' SK '            | POLAND             |
| ' SPOLKA Z OGRANICZONA ODPOWIEDZIALNOSCIA '            | ' SPZOO '         | POLAND             |
| ' SP Z OO '                                            | ' SPZOO '         | POLAND             |
| ' SPZ OO '                                             | ' SPZOO '         | POLAND             |
| ' SP ZOO '                                             | ' SPZOO '         | POLAND             |
| ' ANONYMOS ETAIRIA '                                   | ' AE '            | GREECE             |
| ' ETERRORRYTHMOS '                                     | ' EE '            | GREECE             |
| ' ETAIRIA PERIORISMENIS EVTHINIS '                     | ' EPE '           | GREECE             |
| ' OMORRYTHMOS '                                        | ' OE '            | GREECE             |
| ' AKCIOVA SPOLECNOST '                                 | ' AS '            | CZECH REPUBLIC     |
| ' KOMANDITNI SPOLECNOST '                              | ' KS '            | CZECH REPUBLIC     |
| ' SPOLECNOST S RUCENIM OMEZENYM '                      | ' SRO '           | CZECH REPUBLIC     |
| ' VEREJNA OBCHODNI SPOLECNOST '                        | ' VOS '           | CZECH REPUBLIC     |
| ' AKTIONIERNO DRUSHESTWO '                             | ' AD '            | BULGARIA           |
| ' KOMANDITNO DRUSHESTWO '                              | ' KD '            | BULGARIA           |
| ' KOMANDITNO DRUSHESTWO S AKZII '                      | ' KDA '           | BULGARIA           |
| ' DRUSHESTWO S ORGRANITSCHENA OTGOWORNOST '            | ' OCD '           | BULGARIA           |


*** Stem Name
:PROPERTIES:
:ID:       org:k5q64a51nki0
:END:

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Creates so called stem name (a name with all legal entity identifiers removed)
  ##'
  ##' @param x object
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##' 
  ##' @md
  ##' @import magrittr
  ##' @export 
  cockburn.remove.standard.names <- function(x
                                              , ...) {
    replace_patterns(x
                    , patterns = cockburn.patterns.stem.name
                    , replacements = " "
                    , ...) 
  }

  ## Test
  ## c("WESTINGHOUSE, |.?^&*@ ELEC  "
  ## , "GRACE (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©  PUBLIC LIMITED "
  ## , "GRACE (W/R) & CO LTD ") %>% 
  ##  cockburn.remove.standard.names
#+END_SRC

creates a name with all legal entity identifiers removed

#+call: make-rds-patterns-table(data = cockburn.patterns.stem.name, data.name = "cockburn.patterns.stem.name")

#+name: cockburn.patterns.stem.name
| pattern             | replacement | country                      |
|---------------------+-------------+------------------------------|
| ' LTD '             | ' '         | UNITED KINGDOM               |
| ' CO LTD '          | ' '         | UNITED KINGDOM               |
| ' TRADING LTD '     | ' '         | UNITED KINGDOM               |
| ' CORP '            | ' '         | UNITED KINGDOM               |
| ' INTL '            | ' '         | UNITED KINGDOM               |
| ' INC '             | ' '         | UNITED KINGDOM               |
| ' PLC '             | ' '         | UNITED KINGDOM               |
| ' SPA '             | ' '         | UNITED KINGDOM               |
| ' CLA '             | ' '         | UNITED KINGDOM               |
| ' LLP '             | ' '         | UNITED KINGDOM               |
| ' LLC '             | ' '         | UNITED KINGDOM               |
| ' AIS '             | ' '         | UNITED KINGDOM               |
| ' INVESTMENTS '     | ' '         | UNITED KINGDOM               |
| ' PARTNERSHIP '     | ' '         | UNITED KINGDOM               |
| ' & CO '            | ' '         | UNITED KINGDOM               |
| ' CO '              | ' '         | UNITED KINGDOM               |
| ' COS '             | ' '         | UNITED KINGDOM               |
| ' CP '              | ' '         | UNITED KINGDOM               |
| ' LP '              | ' '         | UNITED KINGDOM               |
| ' BLSA '            | ' '         | UNITED KINGDOM               |
| ' GROUP '           | ' '         | UNITED KINGDOM               |
| ' SA '              | ' '         | FRANCE                       |
| ' SARL '            | ' '         | FRANCE                       |
| ' SAS '             | ' '         | FRANCE                       |
| ' EURL '            | ' '         | FRANCE                       |
| ' ETCIE '           | ' '         | FRANCE                       |
| ' ET CIE '          | ' '         | FRANCE                       |
| ' CIE '             | ' '         | FRANCE                       |
| ' GIE '             | ' '         | FRANCE                       |
| ' SC '              | ' '         | FRANCE                       |
| ' SNC '             | ' '         | FRANCE                       |
| ' SP '              | ' '         | FRANCE                       |
| ' SCS '             | ' '         | FRANCE                       |
| ' GMBHCOKG '        | ' '         | GERMANY                      |
| ' EGENOSSENSCHAFT ' | ' '         | GERMANY                      |
| ' GMBHCO '          | ' '         | GERMANY                      |
| ' COGMBH '          | ' '         | GERMANY                      |
| ' GESMBH '          | ' '         | GERMANY                      |
| ' GMBH '            | ' '         | GERMANY                      |
| ' KGAA '            | ' '         | GERMANY                      |
| ' KG '              | ' '         | GERMANY                      |
| ' AG '              | ' '         | GERMANY                      |
| ' EG '              | ' '         | GERMANY                      |
| ' GMBHCOKGAA '      | ' '         | GERMANY                      |
| ' MIT '             | ' '         | GERMANY                      |
| ' OHG '             | ' '         | GERMANY                      |
| ' GRUPPE '          | ' '         | GERMANY                      |
| ' GBR '             | ' '         | GERMANY                      |
| ' SL '              | ' '         | Spain                        |
| ' SA '              | ' '         | Spain                        |
| ' SC '              | ' '         | Spain                        |
| ' SRL '             | ' '         | Spain                        |
| ' ESPANA '          | ' '         | Spain                        |
| ' SA '              | ' '         | Italy                        |
| ' SAS '             | ' '         | Italy                        |
| ' SNC '             | ' '         | Italy                        |
| ' SPA '             | ' '         | Italy                        |
| ' SRL '             | ' '         | Italy                        |
| ' AB '              | ' '         | SWEDEN - front and back      |
| ' HB '              | ' '         | SWEDEN - front and back      |
| ' KB '              | ' '         | SWEDEN - front and back      |
| ' SAS '             | ' '         | Belgium and French           |
| ' SA '              | ' '         | Belgium and French           |
| ' SARL '            | ' '         | Belgium and French           |
| ' SARLU '           | ' '         | Belgium and French           |
| ' SAS '             | ' '         | Belgium and French           |
| ' SASU '            | ' '         | Belgium and French           |
| ' EURL '            | ' '         | Belgium and French           |
| ' ETCIE '           | ' '         | Belgium and French           |
| ' CIE '             | ' '         | Belgium and French           |
| ' GIE '             | ' '         | Belgium and French           |
| ' SC '              | ' '         | Belgium and French           |
| ' SNC '             | ' '         | Belgium and French           |
| ' SP '              | ' '         | Belgium and French           |
| ' SCS '             | ' '         | Belgium and French           |
| ' BV '              | ' '         | Specifically Belgian ones    |
| ' CVA '             | ' '         | Specifically Belgian ones    |
| ' SCA '             | ' '         | Specifically Belgian ones    |
| ' SPRL '            | ' '         | Specifically Belgian ones    |
| ' SCS '             | ' '         | French language equivalents  |
| ' SA '              | ' '         | French language equivalents  |
| ' SPRL '            | ' '         | French language equivalents  |
| ' AMBA '            | ' '         | Denmark - front and back     |
| ' APS '             | ' '         | Denmark - front and back     |
| ' AS '              | ' '         | Denmark - front and back     |
| ' IS '              | ' '         | Denmark - front and back     |
| ' KAS '             | ' '         | Denmark - front and back     |
| ' KS '              | ' '         | Denmark - front and back     |
| ' PF '              | ' '         | Denmark - front and back     |
| ' AL '              | ' '         | Norway - front and back      |
| ' ANS '             | ' '         | Norway - front and back      |
| ' AS '              | ' '         | Norway - front and back      |
| ' ASA '             | ' '         | Norway - front and back      |
| ' DA '              | ' '         | Norway - front and back      |
| ' KS '              | ' '         | Norway - front and back      |
| ' BV '              | ' '         | Netherlands - front and back |
| ' CV '              | ' '         | Netherlands - front and back |
| ' CVOA '            | ' '         | Netherlands - front and back |
| ' NV '              | ' '         | Netherlands - front and back |
| ' VOF '             | ' '         | Netherlands - front and back |
| ' AB '              | ' '         | Finland                      |
| ' APB '             | ' '         | Finland                      |
| ' KB '              | ' '         | Finland                      |
| ' KY '              | ' '         | Finland                      |
| ' OY '              | ' '         | Finland                      |
| ' OYJ '             | ' '         | Finland                      |
| ' OYJ AB '          | ' '         | Finland                      |
| ' OY AB '           | ' '         | Finland                      |
| ' LTD '             | ' '         | Finland                      |
| ' PLC '             | ' '         | Finland                      |
| ' INC '             | ' '         | Finland                      |
| ' SA '              | ' '         | Poland                       |
| ' SC '              | ' '         | Poland                       |
| ' SK '              | ' '         | Poland                       |
| ' SPZOO '           | ' '         | Poland                       |
| ' AE '              | ' '         | Greece                       |
| ' EE '              | ' '         | Greece                       |
| ' EPE '             | ' '         | Greece                       |
| ' OE '              | ' '         | Greece                       |
| ' SA '              | ' '         | Greece                       |
| ' LTD '             | ' '         | Greece                       |
| ' PLC '             | ' '         | Greece                       |
| ' INC '             | ' '         | Greece                       |
| ' AS '              | ' '         | Czech Republic               |
| ' KS '              | ' '         | Czech Republic               |
| ' SRO '             | ' '         | Czech Republic               |
| ' VOS '             | ' '         | Czech Republic               |
| ' AD '              | ' '         | Bulgaria                     |
| ' KD '              | ' '         | Bulgaria                     |
| ' KDA '             | ' '         | Bulgaria                     |
| ' OCD '             | ' '         | Bulgaria                     |
| ' KOOP '            | ' '         | Bulgaria                     |
| ' DF '              | ' '         | Bulgaria                     |
| ' EOOD '            | ' '         | Bulgaria                     |
| ' EAD '             | ' '         | Bulgaria                     |
| ' OOD '             | ' '         | Bulgaria                     |
| ' KOOD '            | ' '         | Bulgaria                     |
| ' ET '              | ' '         | Bulgaria                     |
| ' KOGYO KK '        | ' '         | Japan                        |
| ' KK '              | ' '         | Japan                        |



*** USPTO special
:PROPERTIES:
:ID:       org:mex64a51nki0
:END:

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Removes special USPTO codes.
  ##'
  ##' @param x object
  ##' @inheritDotParams replace_patterns
  ##' @return Harmonized table
  ##' 
  ##' @md
  ##' @import magrittr
  ##' @export 
  cockburn.remove.uspto <- function(x
                                       , ...) {
    replace_patterns(x, patterns = cockburn.patterns.uspto, ...) 
  }



  ##' Special USPTO codes. Codes as "indiv"
  ##'
  ##' @param x object
  ##' @inheritDotParams harmonize.detect
  ##' @return Harmonized table
  ##' 
  ##' @md
  ##' @import magrittr
  ##' @export 
  cockburn.detect.uspto <- function(x
                                       , ...) {
    harmonize.detect(x
                   , patterns = ";"
                   , codes = "indiv"
                   , codes.name = "entity.type"
                   , return.only.first.detected.code = TRUE
                   , ...) 
  }

  ## ## Test
  ## c("WESTINGHOUSE, |.?^&*@ ELEC-CONN.  "
  ## , "GRACE-CONN. (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©  PUBLIC LIMITED "
  ## , "Bechara;John") %>% 
  ##  cockburn.remove.uspto.code

  ## c("WESTINGHOUSE, |.?^&*@ ELEC-CONN.  "
  ## , "GRACE-CONN. (W EN R) & CO - Ã²Ã¢ÃªÃ®Ã©  PUBLIC LIMITED "
  ## , "Bechara;John") %>% 
  ##   cockburn.detect.uspto.code
#+END_SRC



#+call: make-rds-patterns-table(data = cockburn.patterns.uspto, data.name = "cockburn.patterns.uspto")

#+name: cockburn.patterns.uspto
| pattern  | replacement |
|----------+-------------|
| '-CONN.' | ''          |
| ';'      | ' ; '       |

** Combined Cockburn Procedures
*** main_coname2.do
:PROPERTIES:
:ID:       org:ns374a51nki0
:END:

#+NAME: cockburn.procedures.table
| no | message                                                     | function.call                                    |
|----+-------------------------------------------------------------+--------------------------------------------------|
|    | *Prepossessing*                                             |                                                  |
|  1 | Cleaning spaces                                             | 'harmonize.squish.spaces', wrap.in.spaces = TRUE |
|  2 | Upper casing                                                | 'harmonize.toupper'                              |
|    |                                                             |                                                  |
|    | *Standartization*                                           |                                                  |
|  3 | Special removals and recoding for USPTO names               | 'cockburn.detect.uspto'                          |
|  4 | Standardization of symbols and removals of some punctuation | 'cockburn.replace.punctuation'                   |
|  5 | Standardization of names (Derwent, etc.)                    | 'cockburn.replace.standard.names'                |
|  6 | Identification of organization type                         | 'cockburn.detect.type'                           |
|  7 | Cleaning organization type                                  | 'cockburn.replace.type'                          |
|  8 | Combining single char sequences                             | 'cockburn.combabbrev'                            |
|  9 | Removal of legal entity identifiers                         | 'cockburn.remove.standard.names'                 |
| 10 | Cleaning spaces                                             | 'harmonize.squish.spaces'                        |

#+call: make-rds-patterns-table(data = cockburn.procedures.table, data.name = "cockburn.procedures.table", remove.single.quotes = "FALSE")

#+BEGIN_SRC R :tangle ./R/cockburn.r
  ##' Harmonizes strings using exact procedures described in Cockburn, et al. (2009)
  ##' @param x table or vector
  ##' @param cockburn.procedures list of procedures to pass to `harmonize` function. Default is `cockburn.procedures.list`
  ##' @param detect.legal.form Whether to detect legal forms. Default is FALSE
  ##' @param return.x.before.common.words.removal Whether to save harmonized column before `common.words.removal` procedure. Default is FALSE
  ##' @param return.x.cols.all Whether to return initial column in x. Default is FALSE
  ##' @inheritDotParams harmonize
  ##' @return Harmonized table
  ##'
  ##' @references Cockburn, et al. (2009)
  ##' 
  ##' @md 
  ##' @import magrittr
  ##' @export 
  harmonize.cockburn <- function(x
                               , cockburn.procedures = cockburn.procedures.table
                               , detect.legal.form = FALSE
                               , return.x.before.common.words.removal = FALSE
                               , return.x.cols.all = FALSE
                               , ... ) {
      if(is.data.frame(cockburn.procedures)) {
          cockburn.procedures %<>% harmonize.make.procedures.list
      }
    ## do some tweaks on cockburn.procedures
    if(!detect.legal.form) {
      cockburn.procedures %<>%
        extract(sapply(., extract2, 1) %>%
                is_in(c("cockburn.detect.type"
                      , "cockburn.detect.uspto")) %>%
                not)
    }
    if(return.x.before.common.words.removal) {
      cockburn.procedures %<>% 
        inset2(sapply(., extract2, 1) %>%
               equals("cockburn.remove.standard.names") %>%
               which
             , list("cockburn.remove.standard.names"
                  , return.x.cols.all = TRUE))
    }
    if(return.x.cols.all) {
      cockburn.procedures %<>% 
        inset2(1, c(as.list(extract2(.,1))
                  , return.x.cols.all = TRUE))
    }
    harmonize(x, cockburn.procedures, ...)
  }
#+END_SRC

#+BEGIN_SRC R :tangle no
  ## Test
   data.table(name = c("MÄKARÖNI ETÖ FKÜSNÖ Ltd"
                     , "M S Lab CÖ. <a href=lsdldf> <br> <\\a>"
                     , "MSLab Co."
                     , "MSLaeb Comp."
                     , "MSLab Comp. Ltd."
                     , "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝŸ") %>% rep(20)
            , foo = "Coffee" ) %>%
     ## harmonize.cockburn()
     ## harmonize.cockburn(detect.legal.form = TRUE)
     ## harmonize.cockburn(return.x.cols.all = TRUE)
     ## harmonize.cockburn(return.x.before.common.words.removal = TRUE)
     harmonize.cockburn(progress.min = 100
                      , detect.legal.form = TRUE)
#+END_SRC

** Old Code

:PROPERTIES:
:ID:       org:k43ijzz0cai0
:END:
:LOGBOOK:
- Refiled on [2019-07-19 Fri 12:08]
:END:

#+BEGIN_SRC R :tangle no

  ## sequence used in NBER PDP
  ## ................................................................................
  ## - 0 leading and trimming spaces
  ## - 1 punctuation2
  ## - 2 derwent 
  ## - 3 standard_name 
  ## - 4 corporates
  ## - 5 (combabbrev) - it is just coding for legal form
  ## - 6 (stem_name) - I left common names untouched


  ## Define functions for harmonization
  ## ================================================================================
  ## Load Substitution Rules
  ## ================================================================================

  ## Path for files with substitutions
  delayedAssign("inst.dir", system.file(package = "harmonizer"))
  ## inst.dir <- file.path("../inst")  # for testing
  ## Specify accented char to replace with ascii equivalents
  ## Note: a" wraper for delayedAssign() is %<d-% from pryr package
  delayedAssign("harmonization.accented"
              , file.path(inst.dir, "ascii-equivalents/accented-chars.txt") %>% 
                readLines(encoding = "UTF-8") %>%
                enc2utf8)
  ## Specify folders to scan for CSV with substitutions
  delayedAssign("harmonization.dirs"
              , c("nber-pdp-harmonization"
                  ## , "magerman-harmonization"
                , "additional-harmonization"))
  delayedAssign("harmonization.files"
              , (sapply(file.path(inst.dir, harmonization.dirs)
                      , list.files
                      , pattern = ".csv$", full.names = TRUE) %>% unlist))
  delayedAssign("harmonization.names"
              , basename(harmonization.files) %>%
                str_replace(".csv$", ""))
  ## Load all CSVs into list
  delayedAssign("harmonization.tabs"
              , lapply(harmonization.files, function(file) {
                  ## packageStartupMessage("* Loading substitutions: "
                  ##                     , basename(file))
                  read.csv(file
                         , header = FALSE
                         , col.names = c("del", "ins")
                         , as.is = TRUE
                         , colClasses = c("character", "character")
                         , na.strings = NULL
                         , comment.char = "#"
                         , strip.white = TRUE
                         , encoding = "UTF-8")
              }) %>% setNames(harmonization.names))
  ## Get list of system encodings (should save time)
  delayedAssign("harmonizer.enc.list", iconvlist())










  ## Test
  ## apply.harmonization("!s!df,.sdf,.sd LTD, CO", c("nber-punctuation"
  ##                                               , "nber-stem-name"))


  ## Wrapers for harmonizations
  ## ================================================================================
  #' @import magrittr
  apply.nber <- function(org.names) {
      org.names %>% 
          apply.harmonization(c("additional-name-only"
                              , "nber-nameonly")) %>% 
          apply.harmonization("nber-punctuation"
                            , add.spaces = FALSE
                            , del.spaces = FALSE) %>%
          remove.quotes %>% 
          apply.harmonization(c("additional-substitutions"
                              , "nber-standard-name"
                              , "nber-univ"
                              , "nber-derwent")) %>%
          apply.harmonization("additional-regex"
                            , regex = TRUE
                            , add.spaces = FALSE) %>% 
          apply.harmonization(c("additional-removals"
                              , "nber-stem-name")
                            , add.spaces = "right")
  }


  ## Test
  ## apply.nber("LTD,LAL,LDF&^*($), &CO. LIMITED")


  ## I see that there is quite a lot of umlauts in harmonization replacements
  ## So it should be either at the end or more sophisticated
  ## str_subset(harmonization.tabs %>% rbindlist %>% extract2("ins"), "UE|AE|OE")
  #' @import magrittr
  apply.ulmaut <- function(org.names) {
      org.names %>% 
          apply.harmonization("nber-umlaut")
  }


  #' @import magrittr
  apply.derwent <- function(org.names) {
      org.names %>% 
          apply.harmonization("nber-derwent")
  }

  #' @import magrittr
  apply.nber.sansremovals <- function(org.names) {
      org.names %>% 
          apply.harmonization(c("additional-name-only"
                              , "nber-nameonly")) %>% 
          apply.harmonization("nber-punctuation"
                            , add.spaces = FALSE
                            , del.spaces = FALSE) %>%
          remove.quotes %>% 
          apply.harmonization(c("additional-substitutions"
                              , "nber-standard-name"
                              , "nber-univ"
                              , "nber-derwent")) %>% 
          apply.harmonization("additional-regex"
                            , regex = TRUE
                            , add.spaces = FALSE) 
  }

  #' it assumes that there is no removals for the first word
  #' @import magrittr
  apply.nber.removals <- function(org.names) {
      org.names %>% 
          apply.harmonization(c("additional-removals"
                              , "nber-stem-name")
                            , add.spaces = "right")
  }


  #' @import magrittr
  apply.nber.sansderwent.sansremovals <- function(org.names) {
      org.names %>% 
          apply.harmonization(c("additional-name-only"
                              , "nber-nameonly")) %>% 
          apply.harmonization("nber-punctuation"
                            , add.spaces = FALSE
                            , del.spaces = FALSE) %>%
          remove.quotes %>% 
          apply.harmonization(c("additional-substitutions"
                              , "nber-standard-name"
                              , "nber-univ")) %>% 
          apply.harmonization("additional-regex"
                            , regex = TRUE
                            , add.spaces = FALSE)
  }

  #' @import magrittr
  apply.nber.sansderwent <- function(org.names) {
      org.names %>% 
          apply.harmonization(c("additional-name-only"
                              , "nber-nameonly")) %>% 
          apply.harmonization("nber-punctuation"
                            , add.spaces = FALSE
                            , del.spaces = FALSE) %>%
          remove.quotes %>% 
          apply.harmonization(c("additional-substitutions"
                              , "nber-standard-name"
                              , "nber-univ")) %>%
          apply.harmonization("additional-regex"
                            , regex = TRUE
                            , add.spaces = FALSE) %>% 
          apply.harmonization(c("additional-removals"
                              , "nber-stem-name")
                            , add.spaces = "right")
  }


  #' @import magrittr
  apply.punctuation <- function(org.names) {
      org.names %>% 
          apply.harmonization("nber-punctuation"
                            , add.spaces = FALSE
                            , del.spaces = FALSE) %>%
          remove.quotes
  }

#+END_SRC


#+BEGIN_SRC R  :tangle no
       ## Subsitutes strings
      #' @import magrittr stringi stringr data.table
      apply.harmonization <- function(org.names
                                    , harmonization.names
                                    , add.spaces = "both"
                                    , del.spaces = TRUE
                                    , regex = FALSE) {
        if(del.spaces) org.names %<>% remove.spaces
        if(add.spaces == "right")
          org.names %<>%  paste0(" ")  # add space at the end
        if(add.spaces == "both")
          org.names %<>% {paste0(" ",. , " ")}  # add space at the end
        harmonization.tab <-
          harmonization.tabs[harmonization.names] %>%
          rbindlist
        if(regex) org.names %<>% stri_replace_all_regex(harmonization.tab$del
                                                      , harmonization.tab$ins
                                                      , vectorize_all = FALSE)
        else org.names %<>% stri_replace_all_fixed(harmonization.tab$del
                                                 , harmonization.tab$ins
                                                 , vectorize_all = FALSE)
        return(org.names)
      }


    ## Apply Magerman Example:
    ## , magerman.remove.common.words
    ## , magerman.clean.punctuation
    ## , list(magerman.do.something, col = 2)
    ## , magerman.clean.punctuation
#+END_SRC

*** Tests and experiments (no tangle)

#+BEGIN_SRC R :tangle no
  ## Examples
  ## --------------------------------------------------------------------------------

  ## Testing progress indication
  ## harmonize(as.character(1:100000), progress.by = 1000) %>% class

  ## comp.example <- c("žŸong-ÂÃÇÈÏa\n\u00b5 &oacute;\u00b5<p>,  INt LTD &AMP; Co;  "
  ##                 , "<br> the $ (&AMP; C&oacute;MP comPANY) Ïotta"
  ##                 , "Tempshield Cryo-Protection™"
  ##                 , "Ábcdêãçoàúü"
  ##                 , "Polgen Sp. z o.o. <U+0096> Sp. K."
  ##                 , "Polgen Sp. z o.o. – Sp. K."
  ##                 , "Jerome® <br>"
  ##                 , "Controlled Environments®  Magazine"
  ##                 , "a\n\u00b5\u00b5"
  ##                 , "fa\xE7ile"
  ##                 , "fa\xc3\xa7ile"
  ##                 , "MSlab CO. CO., LTD."
  ##                 , "MSlab, A \\SOCIETE ANONYME\\"
  ##                 , "S.A.S. University Co., {PE}, Ltd. (Europe)"
  ##                 , "Analytical Technologies Limited"
  ##                 , "Anasys Instruments Corporation"
  ##                 , "C4 Control de Contaminacion Ltda"
  ##                 , "Crescent Scientific Pvt Ltd."
  ##                 , "Daigger & Co., Inc."
  ##                 , "Dell Inc."
  ##                 , "Deltalab. S.L.U."
  ##                 , "DLAB Scientific Co.,Ltd."
  ##                 , "ebro Electronic GmbH und Co. KG"
  ##                 , "Ecom spol. s r.o., s.r.o., akc. spol."
  ##                 , "G.A.S. mbH"
  ##                 , "Glassco Laboratory Equipments PVT LTD"
  ##                 , "Lhasa Limited"
  ##                 , "rose plastic USA, LLLP"
  ##                 , "a;sdkfjsdlkfj;laswee\'\" asdf Co.")

  ## comp.example %>% harmonize(quite = TRUE
  ##                          , include.original = TRUE)

  ## ## Testing Magerman

  ## harmonization.tabs[["additional-magerman"]]$del %>%
  ##     {cbind(harmonize( .,quite = TRUE
  ##             , include.original = TRUE
  ##             , procedures = list(
  ##                   list("toascii", TRUE)
  ##                 , "tolower"
  ##                 , "html2txt"
  ##                 , list("toascii", FALSE)
  ##                 , "remove.brackets"
  ##                 , "toupper"
  ##                 , "remove.quotes"
  ##                 , "apply.nber.sansremovals"
  ##                 , "trims"
  ##               )
  ##               )
  ##            , harm.rem = harmonize(.,quite = TRUE
  ##             , procedures = list(
  ##                   list("toascii", TRUE)
  ##                 , "tolower"
  ##                 , "html2txt"
  ##                 , list("toascii", FALSE)
  ##                 , "remove.brackets"
  ##                 , "toupper"
  ##                 , "remove.quotes"
  ##                 , "apply.nber.sansremovals"
  ##                 , list("apply.harmonization"
  ##                      , c("additional-removals", "nber-stem-name")
  ##                      , add.spaces = "both")
  ##                 , "trims"
  ##               )))}


  ## Magerman et al. (2006) harmonization
  ## harm.magerman <- system.file(package = "harmonizer") %>%
  ##     file.path("magerman-harmonization", "magerman-harmonization.csv") %>%
  ##     read.csv(header = FALSE, stringsAsFactors = FALSE)

  ## harm.magerman <- file.path("..", "inst", "magerman-harmonization"
  ##                          , "magerman-legal-entities.csv") %>%
  ##     read.csv(header = FALSE
  ##            , stringsAsFactors = FALSE
  ##              , strip.white = TRUE
  ##            , quote = "\"")

  ## library("harmonizer")

  ## data.frame(origin = harm.magerman[[1]] %>%
  ##                      {paste0("MSlab", .)}
  ##          , harm = harm.magerman[[1]] %>%
  ##                    {paste0("MSlab", .)} %>%
  ##                    harmonize
  ##          , magerman = harm.magerman[[3]] %>% 
  ##                        {paste0("MSlab", .)}
  ##          , magerman.harm = harm.magerman[[3]] %>% 
  ##                             {paste0("MSlab", .)} %>% harmonize) %>%
  ##     write.csv("test.csv")



  ## TODO
  ## Detects type of organization based on clues from 'harm.codes.list'
  ##' @import magrittr stringi
  ## harm.detect <- function(org.names, harm.codes.list, add.spaces = TRUE){
  ##     if(add.spaces) {
  ##         org.names <- paste(" ", org.names, " ")  # add spaces
  ##     }
  ##     lapply(org.names, function(org)
  ##         stri_detect_fixed(org, harm.codes.list$ins) %>%
  ##         harm.codes.list$del[.] %>%
  ##         ##head(n = 1) %>%
  ##         str_c(collapse = "-") %>%  # for combinations
  ##         ifelse(length(.) == 0, "unknown", .)) %>% unlist
  ## }

  ## Testing
  ## harm.detect(
  ##     c("lala  UNIV LTD "
  ##     , "<br> asdf $ &AMP; &oacute; lala Ï a\n\u00b5\u00b5")
  ## , harm.codes.list)

 
#+END_SRC

